
c:/Users/300457/Downloads/HybridLift2/target/HybridLift2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f68  08080018  08080018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  08084f80  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000070  20000400  08084f84  00030400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000e14  20000470  20000470  00040470  2**3
                  ALLOC
  5 .module_info_suffix 00000028  08084ff4  08084ff4  00034ff4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  0808501c  0808501c  0003501c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0012fcea  00000000  00000000  00035020  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0001b469  00000000  00000000  00164d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001f8b3  00000000  00000000  00180173  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002618  00000000  00000000  0019fa26  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00004350  00000000  00000000  001a203e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00036db7  00000000  00000000  001a638e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000436a1  00000000  00000000  001dd145  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009f72e  00000000  00000000  002207e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000cfd4  00000000  00000000  002bff14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	94 49 08 08                                         .I..

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f004 fb9e 	bl	808476e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f004 fba3 	bl	8084784 <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	08084f84 	.word	0x08084f84
 808004c:	20000470 	.word	0x20000470
 8080050:	20000470 	.word	0x20000470
 8080054:	20001284 	.word	0x20001284
 8080058:	20001284 	.word	0x20001284

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f003 f8df 	bl	8083220 <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	08084f04 	.word	0x08084f04
 8080084:	08084f78 	.word	0x08084f78

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 ba0c 	b.w	80804a4 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 fb0b 	bl	80806a8 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f003 b885 	b.w	80831a4 <_post_loop>

0808009a <_Znwj>:
 808009a:	f002 bd3d 	b.w	8082b18 <malloc>

0808009e <_ZdlPv>:
 808009e:	f002 bd43 	b.w	8082b28 <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr

080800b2 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
 80800b2:	6810      	ldr	r0, [r2, #0]
 80800b4:	4770      	bx	lr

080800b6 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 80800b6:	7c03      	ldrb	r3, [r0, #16]
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 80800b8:	4602      	mov	r2, r0
 80800ba:	f003 0308 	and.w	r3, r3, #8
 80800be:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80800c2:	b12b      	cbz	r3, 80800d0 <_ZN4File9availableEv+0x1a>
 80800c4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80800c6:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 80800c8:	1a18      	subs	r0, r3, r0
 80800ca:	bf48      	it	mi
 80800cc:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
 80800d0:	4770      	bx	lr
	...

080800d4 <_Z9aver_callv>:
String readCard;
//data = String::format("{\"lat\":%d, \"lon\":%d, \"digaverage1\":%d, \"anaverage1\":%d}", lat, lon, digaverage1, anaverage1);

//Calculates the averages of the digital analog inputs over the past minute and resets values
void aver_call()
{
 80800d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  anaverage1 = AnalogInput1 / cnt;
 80800d8:	4e35      	ldr	r6, [pc, #212]	; (80801b0 <_Z9aver_callv+0xdc>)
 80800da:	f8df b108 	ldr.w	fp, [pc, #264]	; 80801e4 <_Z9aver_callv+0x110>
 80800de:	6834      	ldr	r4, [r6, #0]
 80800e0:	f8db 0000 	ldr.w	r0, [fp]
  anaverage2 = AnalogInput2 / cnt;
 80800e4:	f8df a100 	ldr.w	sl, [pc, #256]	; 80801e8 <_Z9aver_callv+0x114>
//data = String::format("{\"lat\":%d, \"lon\":%d, \"digaverage1\":%d, \"anaverage1\":%d}", lat, lon, digaverage1, anaverage1);

//Calculates the averages of the digital analog inputs over the past minute and resets values
void aver_call()
{
  anaverage1 = AnalogInput1 / cnt;
 80800e8:	fb90 f0f4 	sdiv	r0, r0, r4
 80800ec:	f004 f8a6 	bl	808423c <__aeabi_i2d>
 80800f0:	4b30      	ldr	r3, [pc, #192]	; (80801b4 <_Z9aver_callv+0xe0>)
  anaverage2 = AnalogInput2 / cnt;
  anaverage3 = AnalogInput3 / cnt;
 80800f2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80801ec <_Z9aver_callv+0x118>
//data = String::format("{\"lat\":%d, \"lon\":%d, \"digaverage1\":%d, \"anaverage1\":%d}", lat, lon, digaverage1, anaverage1);

//Calculates the averages of the digital analog inputs over the past minute and resets values
void aver_call()
{
  anaverage1 = AnalogInput1 / cnt;
 80800f6:	e9c3 0100 	strd	r0, r1, [r3]
  anaverage2 = AnalogInput2 / cnt;
 80800fa:	f8da 0000 	ldr.w	r0, [sl]
  anaverage3 = AnalogInput3 / cnt;
  anaverage4 = AnalogInput4 / cnt;
 80800fe:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80801f0 <_Z9aver_callv+0x11c>

//Calculates the averages of the digital analog inputs over the past minute and resets values
void aver_call()
{
  anaverage1 = AnalogInput1 / cnt;
  anaverage2 = AnalogInput2 / cnt;
 8080102:	fb90 f0f4 	sdiv	r0, r0, r4
 8080106:	f004 f899 	bl	808423c <__aeabi_i2d>
 808010a:	4b2b      	ldr	r3, [pc, #172]	; (80801b8 <_Z9aver_callv+0xe4>)
  anaverage3 = AnalogInput3 / cnt;
  anaverage4 = AnalogInput4 / cnt;
  anaverage5 = BatteryVolt / cnt;
 808010c:	4f2b      	ldr	r7, [pc, #172]	; (80801bc <_Z9aver_callv+0xe8>)

//Calculates the averages of the digital analog inputs over the past minute and resets values
void aver_call()
{
  anaverage1 = AnalogInput1 / cnt;
  anaverage2 = AnalogInput2 / cnt;
 808010e:	e9c3 0100 	strd	r0, r1, [r3]
  anaverage3 = AnalogInput3 / cnt;
 8080112:	f8d9 0000 	ldr.w	r0, [r9]
  anaverage4 = AnalogInput4 / cnt;
  anaverage5 = BatteryVolt / cnt;

  digaverage1 = DigitalInput[0] / cnt;
 8080116:	4d2a      	ldr	r5, [pc, #168]	; (80801c0 <_Z9aver_callv+0xec>)
//Calculates the averages of the digital analog inputs over the past minute and resets values
void aver_call()
{
  anaverage1 = AnalogInput1 / cnt;
  anaverage2 = AnalogInput2 / cnt;
  anaverage3 = AnalogInput3 / cnt;
 8080118:	fb90 f0f4 	sdiv	r0, r0, r4
 808011c:	f004 f88e 	bl	808423c <__aeabi_i2d>
 8080120:	4b28      	ldr	r3, [pc, #160]	; (80801c4 <_Z9aver_callv+0xf0>)
 8080122:	e9c3 0100 	strd	r0, r1, [r3]
  anaverage4 = AnalogInput4 / cnt;
 8080126:	f8d8 0000 	ldr.w	r0, [r8]
 808012a:	fb90 f0f4 	sdiv	r0, r0, r4
 808012e:	f004 f885 	bl	808423c <__aeabi_i2d>
 8080132:	4b25      	ldr	r3, [pc, #148]	; (80801c8 <_Z9aver_callv+0xf4>)
 8080134:	e9c3 0100 	strd	r0, r1, [r3]
  anaverage5 = BatteryVolt / cnt;
 8080138:	6838      	ldr	r0, [r7, #0]
 808013a:	fb90 f0f4 	sdiv	r0, r0, r4
 808013e:	f004 f87d 	bl	808423c <__aeabi_i2d>
 8080142:	4b22      	ldr	r3, [pc, #136]	; (80801cc <_Z9aver_callv+0xf8>)
 8080144:	e9c3 0100 	strd	r0, r1, [r3]

  digaverage1 = DigitalInput[0] / cnt;
 8080148:	6828      	ldr	r0, [r5, #0]
 808014a:	fb90 f0f4 	sdiv	r0, r0, r4
 808014e:	f004 f875 	bl	808423c <__aeabi_i2d>
 8080152:	4b1f      	ldr	r3, [pc, #124]	; (80801d0 <_Z9aver_callv+0xfc>)
 8080154:	e9c3 0100 	strd	r0, r1, [r3]
  digaverage2 = DigitalInput[1] / cnt;
 8080158:	6868      	ldr	r0, [r5, #4]
 808015a:	fb90 f0f4 	sdiv	r0, r0, r4
 808015e:	f004 f86d 	bl	808423c <__aeabi_i2d>
 8080162:	4b1c      	ldr	r3, [pc, #112]	; (80801d4 <_Z9aver_callv+0x100>)
 8080164:	e9c3 0100 	strd	r0, r1, [r3]
  digaverage3 = DigitalInput[2] / cnt;
 8080168:	68a8      	ldr	r0, [r5, #8]
 808016a:	fb90 f0f4 	sdiv	r0, r0, r4
 808016e:	f004 f865 	bl	808423c <__aeabi_i2d>
 8080172:	4b19      	ldr	r3, [pc, #100]	; (80801d8 <_Z9aver_callv+0x104>)
 8080174:	e9c3 0100 	strd	r0, r1, [r3]
  digaverage4 = DigitalInput[3] / cnt;
 8080178:	68e8      	ldr	r0, [r5, #12]
 808017a:	fb90 f0f4 	sdiv	r0, r0, r4
 808017e:	f004 f85d 	bl	808423c <__aeabi_i2d>
 8080182:	4b16      	ldr	r3, [pc, #88]	; (80801dc <_Z9aver_callv+0x108>)

  averfunc = true;
 8080184:	2201      	movs	r2, #1
  anaverage5 = BatteryVolt / cnt;

  digaverage1 = DigitalInput[0] / cnt;
  digaverage2 = DigitalInput[1] / cnt;
  digaverage3 = DigitalInput[2] / cnt;
  digaverage4 = DigitalInput[3] / cnt;
 8080186:	e9c3 0100 	strd	r0, r1, [r3]

  averfunc = true;
 808018a:	4b15      	ldr	r3, [pc, #84]	; (80801e0 <_Z9aver_callv+0x10c>)
 808018c:	701a      	strb	r2, [r3, #0]

  DigitalInput[0] = 0;
 808018e:	2300      	movs	r3, #0
 8080190:	602b      	str	r3, [r5, #0]
  DigitalInput[1] = 0;
 8080192:	606b      	str	r3, [r5, #4]
  DigitalInput[2] = 0;
 8080194:	60ab      	str	r3, [r5, #8]
  DigitalInput[3] = 0;
 8080196:	60eb      	str	r3, [r5, #12]

  AnalogInput1 = 0;
 8080198:	f8cb 3000 	str.w	r3, [fp]
  AnalogInput2 = 0;
 808019c:	f8ca 3000 	str.w	r3, [sl]
  AnalogInput3 = 0;
 80801a0:	f8c9 3000 	str.w	r3, [r9]
  AnalogInput4 = 0;
 80801a4:	f8c8 3000 	str.w	r3, [r8]
  BatteryVolt = 0;
 80801a8:	603b      	str	r3, [r7, #0]

  cnt = 0;
 80801aa:	6033      	str	r3, [r6, #0]
 80801ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80801b0:	20000c88 	.word	0x20000c88
 80801b4:	20000c60 	.word	0x20000c60
 80801b8:	20000c68 	.word	0x20000c68
 80801bc:	20000a34 	.word	0x20000a34
 80801c0:	20000a54 	.word	0x20000a54
 80801c4:	20000c70 	.word	0x20000c70
 80801c8:	20000c78 	.word	0x20000c78
 80801cc:	20000c80 	.word	0x20000c80
 80801d0:	20000a88 	.word	0x20000a88
 80801d4:	20000a90 	.word	0x20000a90
 80801d8:	20000a98 	.word	0x20000a98
 80801dc:	20000aa0 	.word	0x20000aa0
 80801e0:	20000aac 	.word	0x20000aac
 80801e4:	200008fc 	.word	0x200008fc
 80801e8:	20000900 	.word	0x20000900
 80801ec:	20000904 	.word	0x20000904
 80801f0:	20000908 	.word	0x20000908

080801f4 <_Z12publish_callv>:
}

void publish_call()
{
  publishfunc = true;
 80801f4:	4b01      	ldr	r3, [pc, #4]	; (80801fc <_Z12publish_callv+0x8>)
 80801f6:	2201      	movs	r2, #1
 80801f8:	701a      	strb	r2, [r3, #0]
 80801fa:	4770      	bx	lr
 80801fc:	200008f8 	.word	0x200008f8

08080200 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 8080200:	6803      	ldr	r3, [r0, #0]
 8080202:	4718      	bx	r3

08080204 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8080204:	2a01      	cmp	r2, #1
 8080206:	d002      	beq.n	808020e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 8080208:	2a02      	cmp	r2, #2
 808020a:	d002      	beq.n	8080212 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 808020c:	e004      	b.n	8080218 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808020e:	6001      	str	r1, [r0, #0]
	      break;
 8080210:	e002      	b.n	8080218 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8080212:	680b      	ldr	r3, [r1, #0]
 8080214:	b100      	cbz	r0, 8080218 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 8080216:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8080218:	2000      	movs	r0, #0
 808021a:	4770      	bx	lr

0808021c <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 808021c:	4770      	bx	lr
	...

08080220 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 8080220:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8080222:	4602      	mov	r2, r0
  {
    if (default_ && clock_ == 0)
 8080224:	7913      	ldrb	r3, [r2, #4]
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 8080226:	4608      	mov	r0, r1
 8080228:	6895      	ldr	r5, [r2, #8]
  {
    if (default_ && clock_ == 0)
 808022a:	b133      	cbz	r3, 808023a <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
 808022c:	b93d      	cbnz	r5, 808023e <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
 808022e:	490c      	ldr	r1, [pc, #48]	; (8080260 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
 8080230:	b004      	add	sp, #16
 8080232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
 8080236:	f002 be9d 	b.w	8082f74 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
 808023a:	4b0a      	ldr	r3, [pc, #40]	; (8080264 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
 808023c:	e000      	b.n	8080240 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
 808023e:	4b0a      	ldr	r3, [pc, #40]	; (8080268 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
 8080240:	7b16      	ldrb	r6, [r2, #12]
 8080242:	4c0a      	ldr	r4, [pc, #40]	; (808026c <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
 8080244:	490a      	ldr	r1, [pc, #40]	; (8080270 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 8080246:	7b52      	ldrb	r2, [r2, #13]
 8080248:	2e01      	cmp	r6, #1
 808024a:	bf08      	it	eq
 808024c:	4621      	moveq	r1, r4
 808024e:	9202      	str	r2, [sp, #8]
 8080250:	9101      	str	r1, [sp, #4]
 8080252:	9500      	str	r5, [sp, #0]
 8080254:	4a07      	ldr	r2, [pc, #28]	; (8080274 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
 8080256:	2100      	movs	r1, #0
 8080258:	f002 fed5 	bl	8083006 <_ZN5Print11printf_implEbPKcz>
  }
 808025c:	b004      	add	sp, #16
 808025e:	bd70      	pop	{r4, r5, r6, pc}
 8080260:	08084a01 	.word	0x08084a01
 8080264:	08084be4 	.word	0x08084be4
 8080268:	080849f0 	.word	0x080849f0
 808026c:	080849f9 	.word	0x080849f9
 8080270:	080849fd 	.word	0x080849fd
 8080274:	08084a17 	.word	0x08084a17

08080278 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
 8080278:	3010      	adds	r0, #16
 808027a:	f001 b979 	b.w	8081570 <_ZN7FatFile4syncEv>

0808027e <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
 808027e:	3010      	adds	r0, #16
 8080280:	f001 b88e 	b.w	80813a0 <_ZN7FatFile4peekEv>

08080284 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080284:	3010      	adds	r0, #16
 8080286:	f001 b9ff 	b.w	8081688 <_ZN7FatFile5writeEPKvj>

0808028a <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 808028a:	b507      	push	{r0, r1, r2, lr}
 808028c:	ab02      	add	r3, sp, #8
 808028e:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 8080292:	2201      	movs	r2, #1
 8080294:	4619      	mov	r1, r3
 8080296:	3010      	adds	r0, #16
 8080298:	f001 f9f6 	bl	8081688 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 808029c:	b003      	add	sp, #12
 808029e:	f85d fb04 	ldr.w	pc, [sp], #4

080802a2 <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 80802a2:	b510      	push	{r4, lr}
 80802a4:	4604      	mov	r4, r0
 80802a6:	f7ff fefa 	bl	808009e <_ZdlPv>
 80802aa:	4620      	mov	r0, r4
 80802ac:	bd10      	pop	{r4, pc}

080802ae <_ZN5Timer7timeoutEv>:

    /*
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
 80802ae:	b510      	push	{r4, lr}
    {
		running = true;
 80802b0:	2301      	movs	r3, #1
 80802b2:	7103      	strb	r3, [r0, #4]
        if (callback)
 80802b4:	6943      	ldr	r3, [r0, #20]

    /*
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
 80802b6:	4604      	mov	r4, r0
    {
		running = true;
        if (callback)
 80802b8:	b113      	cbz	r3, 80802c0 <_ZN5Timer7timeoutEv+0x12>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80802ba:	6983      	ldr	r3, [r0, #24]
 80802bc:	300c      	adds	r0, #12
 80802be:	4798      	blx	r3
        {
            callback();
        }
        running = false;
 80802c0:	2300      	movs	r3, #0
 80802c2:	7123      	strb	r3, [r4, #4]
 80802c4:	bd10      	pop	{r4, pc}

080802c6 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 80802c6:	b507      	push	{r0, r1, r2, lr}
    {
        void* timer_id = NULL;
 80802c8:	2300      	movs	r3, #0
 80802ca:	a902      	add	r1, sp, #8
 80802cc:	f841 3d04 	str.w	r3, [r1, #-4]!
        if (!os_timer_get_id(timer, &timer_id)) {
 80802d0:	f002 fad6 	bl	8082880 <os_timer_get_id>
 80802d4:	b920      	cbnz	r0, 80802e0 <_ZN5Timer12invoke_timerEPv+0x1a>
            if (timer_id)
 80802d6:	9801      	ldr	r0, [sp, #4]
 80802d8:	b110      	cbz	r0, 80802e0 <_ZN5Timer12invoke_timerEPv+0x1a>
                ((Timer*)timer_id)->timeout();
 80802da:	6803      	ldr	r3, [r0, #0]
 80802dc:	689b      	ldr	r3, [r3, #8]
 80802de:	4798      	blx	r3
        }
    }
 80802e0:	b003      	add	sp, #12
 80802e2:	f85d fb04 	ldr.w	pc, [sp], #4

080802e6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80802e6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80802e8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80802ea:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80802ec:	b113      	cbz	r3, 80802f4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80802ee:	2203      	movs	r2, #3
 80802f0:	4601      	mov	r1, r0
 80802f2:	4798      	blx	r3
    }
 80802f4:	4620      	mov	r0, r4
 80802f6:	bd10      	pop	{r4, pc}

080802f8 <_ZN5TimerC1EjSt8functionIFvvEEb>:
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 80802f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80802fa:	4604      	mov	r4, r0
 80802fc:	468e      	mov	lr, r1
 80802fe:	4915      	ldr	r1, [pc, #84]	; (8080354 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
 8080300:	2500      	movs	r5, #0
 8080302:	b085      	sub	sp, #20
 8080304:	7105      	strb	r5, [r0, #4]
 8080306:	6085      	str	r5, [r0, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080308:	6145      	str	r5, [r0, #20]
 808030a:	6001      	str	r1, [r0, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808030c:	af02      	add	r7, sp, #8
 808030e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8080312:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8080316:	f104 060c 	add.w	r6, r4, #12
 808031a:	e896 0003 	ldmia.w	r6, {r0, r1}
 808031e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8080322:	e897 0003 	ldmia.w	r7, {r0, r1}
 8080326:	e886 0003 	stmia.w	r6, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808032a:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
 808032c:	6960      	ldr	r0, [r4, #20]
 808032e:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8080330:	6161      	str	r1, [r4, #20]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080332:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
 8080334:	69a0      	ldr	r0, [r4, #24]
 8080336:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8080338:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 808033a:	e88d 0028 	stmia.w	sp, {r3, r5}
 808033e:	4a06      	ldr	r2, [pc, #24]	; (8080358 <_ZN5TimerC1EjSt8functionIFvvEEb+0x60>)
 8080340:	4623      	mov	r3, r4
 8080342:	4671      	mov	r1, lr
 8080344:	f104 0008 	add.w	r0, r4, #8
 8080348:	f002 fa8a 	bl	8082860 <os_timer_create>
    }
 808034c:	4620      	mov	r0, r4
 808034e:	b005      	add	sp, #20
 8080350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080352:	bf00      	nop
 8080354:	080849bc 	.word	0x080849bc
 8080358:	080802c7 	.word	0x080802c7

0808035c <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
 808035c:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 808035e:	6880      	ldr	r0, [r0, #8]
 8080360:	2300      	movs	r3, #0
 8080362:	b138      	cbz	r0, 8080374 <_ZN5Timer5_stopEjb+0x18>
 8080364:	e88d 000a 	stmia.w	sp, {r1, r3}
 8080368:	2102      	movs	r1, #2
 808036a:	f002 fa91 	bl	8082890 <os_timer_change>
 808036e:	fab0 f080 	clz	r0, r0
 8080372:	0940      	lsrs	r0, r0, #5
    }
 8080374:	b003      	add	sp, #12
 8080376:	f85d fb04 	ldr.w	pc, [sp], #4

0808037a <_ZN5Timer6_startEjb>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }

    bool isValid() const { return handle!=nullptr; }
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
 808037a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 808037c:	4614      	mov	r4, r2
 808037e:	4606      	mov	r6, r0
 8080380:	460d      	mov	r5, r1
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 8080382:	2200      	movs	r2, #0
 8080384:	4621      	mov	r1, r4
 8080386:	f7ff ffe9 	bl	808035c <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 808038a:	68b0      	ldr	r0, [r6, #8]
 808038c:	2300      	movs	r3, #0
 808038e:	b140      	cbz	r0, 80803a2 <_ZN5Timer6_startEjb+0x28>
 8080390:	9301      	str	r3, [sp, #4]
 8080392:	9500      	str	r5, [sp, #0]
 8080394:	4622      	mov	r2, r4
 8080396:	4619      	mov	r1, r3
 8080398:	f002 fa7a 	bl	8082890 <os_timer_change>
 808039c:	fab0 f080 	clz	r0, r0
 80803a0:	0940      	lsrs	r0, r0, #5
    }
 80803a2:	b002      	add	sp, #8
 80803a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080803a8 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80803a8:	b538      	push	{r3, r4, r5, lr}
 80803aa:	4b0e      	ldr	r3, [pc, #56]	; (80803e4 <_ZN5TimerD1Ev+0x3c>)
 80803ac:	4604      	mov	r4, r0
 80803ae:	6003      	str	r3, [r0, #0]
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle)
 80803b0:	6883      	ldr	r3, [r0, #8]
 80803b2:	b18b      	cbz	r3, 80803d8 <_ZN5TimerD1Ev+0x30>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80803b4:	2200      	movs	r2, #0
 80803b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80803ba:	f7ff ffcf 	bl	808035c <_ZN5Timer5_stopEjb>
    void dispose()
    {
        if (handle)
        	{
        		stop();
        		while (running) {
 80803be:	7923      	ldrb	r3, [r4, #4]
 80803c0:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80803c4:	b11b      	cbz	r3, 80803ce <_ZN5TimerD1Ev+0x26>
				delay(1);
 80803c6:	2001      	movs	r0, #1
 80803c8:	f002 fe86 	bl	80830d8 <delay>
 80803cc:	e7f7      	b.n	80803be <_ZN5TimerD1Ev+0x16>
			}
        		os_timer_destroy(handle, nullptr);
 80803ce:	4629      	mov	r1, r5
 80803d0:	68a0      	ldr	r0, [r4, #8]
 80803d2:	f002 fa4d 	bl	8082870 <os_timer_destroy>
            handle = nullptr;
 80803d6:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80803d8:	f104 000c 	add.w	r0, r4, #12
 80803dc:	f7ff ff83 	bl	80802e6 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80803e0:	4620      	mov	r0, r4
 80803e2:	bd38      	pop	{r3, r4, r5, pc}
 80803e4:	080849bc 	.word	0x080849bc

080803e8 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80803e8:	b510      	push	{r4, lr}
 80803ea:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80803ec:	f7ff ffdc 	bl	80803a8 <_ZN5TimerD1Ev>
 80803f0:	4620      	mov	r0, r4
 80803f2:	f7ff fe54 	bl	808009e <_ZdlPv>
 80803f6:	4620      	mov	r0, r4
 80803f8:	bd10      	pop	{r4, pc}

080803fa <_ZN7FatFile4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
 80803fa:	b507      	push	{r0, r1, r2, lr}
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 80803fc:	2201      	movs	r2, #1
 80803fe:	f10d 0107 	add.w	r1, sp, #7
 8080402:	f000 ff1a 	bl	808123a <_ZN7FatFile4readEPvj>
 8080406:	2801      	cmp	r0, #1
 8080408:	bf0c      	ite	eq
 808040a:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 808040e:	f04f 30ff 	movne.w	r0, #4294967295
  }
 8080412:	b003      	add	sp, #12
 8080414:	f85d fb04 	ldr.w	pc, [sp], #4

08080418 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
 8080418:	b508      	push	{r3, lr}
    return FatFile::read();
 808041a:	3010      	adds	r0, #16
 808041c:	f7ff ffed 	bl	80803fa <_ZN7FatFile4readEv>
  }
 8080420:	bd08      	pop	{r3, pc}
	...

08080424 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
 8080424:	b530      	push	{r4, r5, lr}
    SPI_CLK_CORE = 72*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
 8080426:	4b1d      	ldr	r3, [pc, #116]	; (808049c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
 8080428:	b085      	sub	sp, #20
 808042a:	9300      	str	r3, [sp, #0]
 808042c:	7913      	ldrb	r3, [r2, #4]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
 808042e:	f500 658c 	add.w	r5, r0, #1120	; 0x460
 8080432:	f88d 3004 	strb.w	r3, [sp, #4]
 8080436:	6893      	ldr	r3, [r2, #8]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
 8080438:	4604      	mov	r4, r0
 808043a:	9302      	str	r3, [sp, #8]
 808043c:	7b13      	ldrb	r3, [r2, #12]
 808043e:	f88d 300c 	strb.w	r3, [sp, #12]
 8080442:	7b53      	ldrb	r3, [r2, #13]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
 8080444:	460a      	mov	r2, r1
 8080446:	f88d 300d 	strb.w	r3, [sp, #13]
 808044a:	f200 416c 	addw	r1, r0, #1132	; 0x46c
 808044e:	466b      	mov	r3, sp
 8080450:	4628      	mov	r0, r5
 8080452:	f001 fc5f 	bl	8081d14 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
 8080456:	b1f0      	cbz	r0, 8080496 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
 8080458:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 808045a:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
 808045e:	4628      	mov	r0, r5
 8080460:	f001 f8bc 	bl	80815dc <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 8080464:	2101      	movs	r1, #1
 8080466:	4620      	mov	r0, r4
 8080468:	f001 fafd 	bl	8081a66 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 808046c:	4601      	mov	r1, r0
 808046e:	b168      	cbz	r0, 808048c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
 8080470:	4621      	mov	r1, r4
 8080472:	4628      	mov	r0, r5
 8080474:	f000 fec9 	bl	808120a <_ZN7FatFile8openRootEP9FatVolume>
 8080478:	b168      	cbz	r0, 8080496 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
 808047a:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
 808047e:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
 8080482:	bf16      	itet	ne
 8080484:	4b06      	ldrne	r3, [pc, #24]	; (80804a0 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
 8080486:	4618      	moveq	r0, r3
 8080488:	601d      	strne	r5, [r3, #0]
 808048a:	e005      	b.n	8080498 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
 808048c:	4620      	mov	r0, r4
 808048e:	f001 faea 	bl	8081a66 <_ZN9FatVolume4initEh>
 8080492:	2800      	cmp	r0, #0
 8080494:	d1ec      	bne.n	8080470 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
 8080496:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
 8080498:	b005      	add	sp, #20
 808049a:	bd30      	pop	{r4, r5, pc}
 808049c:	080849b0 	.word	0x080849b0
 80804a0:	20000ca8 	.word	0x20000ca8

080804a4 <setup>:
//Software timer which calls aver_call every 1 mins, runs in the background and allows main loop to continue running
Timer timer(60000, aver_call);
Timer pub(180000, publish_call);

void setup()
{
 80804a4:	b570      	push	{r4, r5, r6, lr}
 80804a6:	b08e      	sub	sp, #56	; 0x38
  Serial.begin();
 80804a8:	f003 f9fe 	bl	80838a8 <_Z16_fetch_usbserialv>
 80804ac:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80804b0:	f003 f9da 	bl	8083868 <_ZN9USBSerial5beginEl>
  Serial1.begin(9600);
 80804b4:	f003 fac8 	bl	8083a48 <_Z22__fetch_global_Serial1v>
 80804b8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80804bc:	f003 fabe 	bl	8083a3c <_ZN11USARTSerial5beginEm>
    bool resetFromISR() { return _reset(0, true); }
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
 80804c0:	2200      	movs	r2, #0
 80804c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80804c6:	483d      	ldr	r0, [pc, #244]	; (80805bc <setup+0x118>)
 80804c8:	f7ff ff57 	bl	808037a <_ZN5Timer6_startEjb>
 80804cc:	2200      	movs	r2, #0
 80804ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80804d2:	483b      	ldr	r0, [pc, #236]	; (80805c0 <setup+0x11c>)
 80804d4:	f7ff ff51 	bl	808037a <_ZN5Timer6_startEjb>

  timer.start();
  pub.start();
  gettingFix = true;
 80804d8:	4b3a      	ldr	r3, [pc, #232]	; (80805c4 <setup+0x120>)

  pinMode(D0, INPUT);
 80804da:	2100      	movs	r1, #0
  Serial.begin();
  Serial1.begin(9600);

  timer.start();
  pub.start();
  gettingFix = true;
 80804dc:	2401      	movs	r4, #1

  pinMode(D0, INPUT);
 80804de:	4608      	mov	r0, r1
  Serial.begin();
  Serial1.begin(9600);

  timer.start();
  pub.start();
  gettingFix = true;
 80804e0:	701c      	strb	r4, [r3, #0]

  pinMode(D0, INPUT);
 80804e2:	f003 fb4f 	bl	8083b84 <pinMode>
  pinMode(D1, INPUT);
 80804e6:	2100      	movs	r1, #0
 80804e8:	4620      	mov	r0, r4
 80804ea:	f003 fb4b 	bl	8083b84 <pinMode>
  pinMode(D2, INPUT);
 80804ee:	2100      	movs	r1, #0
 80804f0:	2002      	movs	r0, #2
 80804f2:	f003 fb47 	bl	8083b84 <pinMode>
  pinMode(D3, INPUT);
 80804f6:	2100      	movs	r1, #0
 80804f8:	2003      	movs	r0, #3
 80804fa:	f003 fb43 	bl	8083b84 <pinMode>
  pinMode(led1, OUTPUT);
 80804fe:	4b32      	ldr	r3, [pc, #200]	; (80805c8 <setup+0x124>)
 8080500:	4621      	mov	r1, r4
 8080502:	8818      	ldrh	r0, [r3, #0]
 8080504:	f003 fb3e 	bl	8083b84 <pinMode>

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
 8080508:	2308      	movs	r3, #8
 808050a:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.update = update_string_variable;
 808050e:	4b2f      	ldr	r3, [pc, #188]	; (80805cc <setup+0x128>)
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
 8080510:	2204      	movs	r2, #4
    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
 8080512:	9302      	str	r3, [sp, #8]
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
 8080514:	492e      	ldr	r1, [pc, #184]	; (80805d0 <setup+0x12c>)
 8080516:	ab01      	add	r3, sp, #4
 8080518:	482e      	ldr	r0, [pc, #184]	; (80805d4 <setup+0x130>)
 808051a:	f002 fadd 	bl	8082ad8 <spark_variable>

  Particle.variable("dataString", dataString);

  while (!Serial)
 808051e:	f003 f9c3 	bl	80838a8 <_Z16_fetch_usbserialv>
 8080522:	f003 f9a8 	bl	8083876 <_ZN9USBSerialcvbEv>
 8080526:	2800      	cmp	r0, #0
 8080528:	d0f9      	beq.n	808051e <setup+0x7a>
  {
    ;
  }
  delay(1000);
 808052a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808052e:	f002 fdd3 	bl	80830d8 <delay>
  Serial.print("Initializing SD Card...");
 8080532:	f003 f9b9 	bl	80838a8 <_Z16_fetch_usbserialv>
 8080536:	4928      	ldr	r1, [pc, #160]	; (80805d8 <setup+0x134>)
 8080538:	f002 fd1c 	bl	8082f74 <_ZN5Print5printEPKc>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
 808053c:	4b27      	ldr	r3, [pc, #156]	; (80805dc <setup+0x138>)
 808053e:	2400      	movs	r4, #0
 8080540:	9301      	str	r3, [sp, #4]
 8080542:	4b27      	ldr	r3, [pc, #156]	; (80805e0 <setup+0x13c>)
  if (!SD.begin(SD_CS_PIN))
 8080544:	aa01      	add	r2, sp, #4
 8080546:	9303      	str	r3, [sp, #12]
 8080548:	210c      	movs	r1, #12
 808054a:	2301      	movs	r3, #1
 808054c:	4825      	ldr	r0, [pc, #148]	; (80805e4 <setup+0x140>)
 808054e:	f88d 4008 	strb.w	r4, [sp, #8]
 8080552:	f88d 3010 	strb.w	r3, [sp, #16]
 8080556:	f88d 4011 	strb.w	r4, [sp, #17]
 808055a:	f7ff ff63 	bl	8080424 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
 808055e:	b928      	cbnz	r0, 808056c <setup+0xc8>
  {
    //SD.initErrorHalt();
    Serial.println("Initialization: Failed");
 8080560:	f003 f9a2 	bl	80838a8 <_Z16_fetch_usbserialv>
 8080564:	4920      	ldr	r1, [pc, #128]	; (80805e8 <setup+0x144>)
 8080566:	f002 fd18 	bl	8082f9a <_ZN5Print7printlnEPKc>
    return;
 808056a:	e025      	b.n	80805b8 <setup+0x114>
  }
  else
  {
    Serial.println("Initialization: Completed");
 808056c:	f003 f99c 	bl	80838a8 <_Z16_fetch_usbserialv>
 8080570:	491e      	ldr	r1, [pc, #120]	; (80805ec <setup+0x148>)
 8080572:	f002 fd12 	bl	8082f9a <_ZN5Print7printlnEPKc>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8080576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 808057a:	4e1d      	ldr	r6, [pc, #116]	; (80805f0 <setup+0x14c>)
 808057c:	9303      	str	r3, [sp, #12]
 public:
  File() {}
 808057e:	4b1d      	ldr	r3, [pc, #116]	; (80805f4 <setup+0x150>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8080580:	f88d 4014 	strb.w	r4, [sp, #20]
 8080584:	f88d 4015 	strb.w	r4, [sp, #21]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8080588:	9402      	str	r4, [sp, #8]
 808058a:	9301      	str	r3, [sp, #4]
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
 808058c:	4a1a      	ldr	r2, [pc, #104]	; (80805f8 <setup+0x154>)
 808058e:	f244 2302 	movw	r3, #16898	; 0x4202
 8080592:	491a      	ldr	r1, [pc, #104]	; (80805fc <setup+0x158>)
 8080594:	a805      	add	r0, sp, #20
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 8080596:	f106 0510 	add.w	r5, r6, #16
 808059a:	ac05      	add	r4, sp, #20
 808059c:	f001 f825 	bl	80815ea <_ZN7FatFile4openEPS_PKci>
 80805a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80805a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80805a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80805a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80805a8:	6823      	ldr	r3, [r4, #0]
 80805aa:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
 80805ac:	9b02      	ldr	r3, [sp, #8]
 80805ae:	6073      	str	r3, [r6, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
 80805b0:	9b03      	ldr	r3, [sp, #12]
 80805b2:	60b3      	str	r3, [r6, #8]
 80805b4:	9b04      	ldr	r3, [sp, #16]
 80805b6:	60f3      	str	r3, [r6, #12]
    myFile = SD.open("dataLog.txt", FILE_WRITE);
  }
}
 80805b8:	b00e      	add	sp, #56	; 0x38
 80805ba:	bd70      	pop	{r4, r5, r6, pc}
 80805bc:	20000a38 	.word	0x20000a38
 80805c0:	20000c8c 	.word	0x20000c8c
 80805c4:	20000aad 	.word	0x20000aad
 80805c8:	20000400 	.word	0x20000400
 80805cc:	080800b3 	.word	0x080800b3
 80805d0:	20000918 	.word	0x20000918
 80805d4:	08084a35 	.word	0x08084a35
 80805d8:	08084a40 	.word	0x08084a40
 80805dc:	080849b0 	.word	0x080849b0
 80805e0:	02faf080 	.word	0x02faf080
 80805e4:	20000474 	.word	0x20000474
 80805e8:	08084a58 	.word	0x08084a58
 80805ec:	08084a6f 	.word	0x08084a6f
 80805f0:	20000a00 	.word	0x20000a00
 80805f4:	080849d0 	.word	0x080849d0
 80805f8:	08084a89 	.word	0x08084a89
 80805fc:	200008b0 	.word	0x200008b0

08080600 <_Z11displayInfov>:
    }
  }
}

void displayInfo()
{
 8080600:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 8080604:	b0a6      	sub	sp, #152	; 0x98
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8080606:	f002 f91b 	bl	8082840 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastSerial >= SERIAL_PERIOD)
 808060a:	4c21      	ldr	r4, [pc, #132]	; (8080690 <_Z11displayInfov+0x90>)
 808060c:	6823      	ldr	r3, [r4, #0]
 808060e:	1ac0      	subs	r0, r0, r3
 8080610:	4b20      	ldr	r3, [pc, #128]	; (8080694 <_Z11displayInfov+0x94>)
 8080612:	4298      	cmp	r0, r3
 8080614:	d938      	bls.n	8080688 <_Z11displayInfov+0x88>
 8080616:	f002 f913 	bl	8082840 <HAL_Timer_Get_Milli_Seconds>
  {
    lastSerial = millis();
 808061a:	6020      	str	r0, [r4, #0]
 808061c:	4c1e      	ldr	r4, [pc, #120]	; (8080698 <_Z11displayInfov+0x98>)

    char buf[128];
    if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS)
 808061e:	7823      	ldrb	r3, [r4, #0]
 8080620:	b36b      	cbz	r3, 808067e <_Z11displayInfov+0x7e>
 8080622:	f002 f90d 	bl	8082840 <HAL_Timer_Get_Milli_Seconds>
 8080626:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8080628:	1ac0      	subs	r0, r0, r3
 808062a:	f242 730f 	movw	r3, #9999	; 0x270f
 808062e:	4298      	cmp	r0, r3
 8080630:	d825      	bhi.n	808067e <_Z11displayInfov+0x7e>
    {
      snprintf(buf, sizeof(buf), "%f,%f,%f", gps.location.lat(), gps.location.lng(), gps.altitude.meters());
 8080632:	4620      	mov	r0, r4
 8080634:	f001 fe64 	bl	8082300 <_ZN15TinyGPSLocation3latEv>
 8080638:	4606      	mov	r6, r0
 808063a:	4620      	mov	r0, r4
 808063c:	460f      	mov	r7, r1
 808063e:	f001 fe7f 	bl	8082340 <_ZN15TinyGPSLocation3lngEv>
   friend class TinyGPSPlus;
public:
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }
 8080642:	2300      	movs	r3, #0
 8080644:	4680      	mov	r8, r0
 8080646:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
 808064a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 808064e:	4689      	mov	r9, r1
 8080650:	f003 fdf4 	bl	808423c <__aeabi_i2d>
 8080654:	2200      	movs	r2, #0
 8080656:	4b11      	ldr	r3, [pc, #68]	; (808069c <_Z11displayInfov+0x9c>)
 8080658:	f003 ff80 	bl	808455c <__aeabi_ddiv>
 808065c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8080660:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8080664:	e9cd 6700 	strd	r6, r7, [sp]
 8080668:	4a0d      	ldr	r2, [pc, #52]	; (80806a0 <_Z11displayInfov+0xa0>)
 808066a:	2180      	movs	r1, #128	; 0x80
 808066c:	a806      	add	r0, sp, #24
 808066e:	f002 fa73 	bl	8082b58 <snprintf>
    else
    {
      strcpy(buf, "no location");
    }

    Serial.println(buf);
 8080672:	f003 f919 	bl	80838a8 <_Z16_fetch_usbserialv>
 8080676:	a906      	add	r1, sp, #24
 8080678:	f002 fc8f 	bl	8082f9a <_ZN5Print7printlnEPKc>
  }
}
 808067c:	e004      	b.n	8080688 <_Z11displayInfov+0x88>
    {
      snprintf(buf, sizeof(buf), "%f,%f,%f", gps.location.lat(), gps.location.lng(), gps.altitude.meters());
    }
    else
    {
      strcpy(buf, "no location");
 808067e:	4909      	ldr	r1, [pc, #36]	; (80806a4 <_Z11displayInfov+0xa4>)
 8080680:	a806      	add	r0, sp, #24
 8080682:	f004 f8b9 	bl	80847f8 <strcpy>
 8080686:	e7f4      	b.n	8080672 <_Z11displayInfov+0x72>
    }

    Serial.println(buf);
  }
}
 8080688:	b026      	add	sp, #152	; 0x98
 808068a:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 808068e:	bf00      	nop
 8080690:	20000a64 	.word	0x20000a64
 8080694:	000dbb9f 	.word	0x000dbb9f
 8080698:	20000928 	.word	0x20000928
 808069c:	40590000 	.word	0x40590000
 80806a0:	08084a95 	.word	0x08084a95
 80806a4:	08084a9e 	.word	0x08084a9e

080806a8 <loop>:
    myFile = SD.open("dataLog.txt", FILE_WRITE);
  }
}

void loop()
{
 80806a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  //data = String::format("{\"lat\":%d, \"lon\":%d, \"digaverage1\":%d, \"anaverage1\":%d}", lat, lon, digaverage1, anaverage1);

  if (averfunc == true)
 80806aa:	4ba2      	ldr	r3, [pc, #648]	; (8080934 <loop+0x28c>)
    myFile = SD.open("dataLog.txt", FILE_WRITE);
  }
}

void loop()
{
 80806ac:	b095      	sub	sp, #84	; 0x54
  //data = String::format("{\"lat\":%d, \"lon\":%d, \"digaverage1\":%d, \"anaverage1\":%d}", lat, lon, digaverage1, anaverage1);

  if (averfunc == true)
 80806ae:	781a      	ldrb	r2, [r3, #0]
 80806b0:	461f      	mov	r7, r3
 80806b2:	2a00      	cmp	r2, #0
 80806b4:	d04f      	beq.n	8080756 <loop+0xae>
  {
    sprintf(data, "{\"lat\":%d, \"lon\":%d, \"digaverage1\":%d, \"anaverage1\":%d}", lat, lon, digaverage1, anaverage1);
 80806b6:	4ba0      	ldr	r3, [pc, #640]	; (8080938 <loop+0x290>)
 80806b8:	49a0      	ldr	r1, [pc, #640]	; (808093c <loop+0x294>)
 80806ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80806be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80806c2:	4b9f      	ldr	r3, [pc, #636]	; (8080940 <loop+0x298>)
 80806c4:	489f      	ldr	r0, [pc, #636]	; (8080944 <loop+0x29c>)
 80806c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80806ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80806ce:	4b9e      	ldr	r3, [pc, #632]	; (8080948 <loop+0x2a0>)
 80806d0:	4e9e      	ldr	r6, [pc, #632]	; (808094c <loop+0x2a4>)
 80806d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80806d6:	e9cd 2300 	strd	r2, r3, [sp]
 80806da:	4b9d      	ldr	r3, [pc, #628]	; (8080950 <loop+0x2a8>)
 80806dc:	f106 0510 	add.w	r5, r6, #16
 80806e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80806e4:	f002 fa30 	bl	8082b48 <sprintf>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80806e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80806ec:	9209      	str	r2, [sp, #36]	; 0x24
 public:
  File() {}
 80806ee:	4a99      	ldr	r2, [pc, #612]	; (8080954 <loop+0x2ac>)
 80806f0:	2300      	movs	r3, #0
 80806f2:	9207      	str	r2, [sp, #28]
 80806f4:	4998      	ldr	r1, [pc, #608]	; (8080958 <loop+0x2b0>)
 80806f6:	4a99      	ldr	r2, [pc, #612]	; (808095c <loop+0x2b4>)
 80806f8:	a80b      	add	r0, sp, #44	; 0x2c
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 80806fa:	ac0b      	add	r4, sp, #44	; 0x2c
 80806fc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8080700:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8080704:	9308      	str	r3, [sp, #32]
 8080706:	f000 ff70 	bl	80815ea <_ZN7FatFile4openEPS_PKci>
 808070a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808070c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808070e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8080710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8080712:	6823      	ldr	r3, [r4, #0]
 8080714:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
 8080716:	9b08      	ldr	r3, [sp, #32]
 8080718:	6073      	str	r3, [r6, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
 808071a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808071c:	60b3      	str	r3, [r6, #8]
 808071e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8080720:	60f3      	str	r3, [r6, #12]

    //store data to internal memory or SD storage
    myFile = SD.open("datalog.txt");
    if (myFile)
 8080722:	7c33      	ldrb	r3, [r6, #16]
 8080724:	b183      	cbz	r3, 8080748 <loop+0xa0>
    {
      //write to SD card
      Serial.print("Writing to SD card...");
 8080726:	f003 f8bf 	bl	80838a8 <_Z16_fetch_usbserialv>
 808072a:	498d      	ldr	r1, [pc, #564]	; (8080960 <loop+0x2b8>)
 808072c:	f002 fc22 	bl	8082f74 <_ZN5Print5printEPKc>
      myFile.println(data);
 8080730:	4984      	ldr	r1, [pc, #528]	; (8080944 <loop+0x29c>)
 8080732:	4630      	mov	r0, r6
 8080734:	f002 fc31 	bl	8082f9a <_ZN5Print7printlnEPKc>
      //root.prettyPrintTo(myFile);
      myFile.close();
 8080738:	f1a5 0020 	sub.w	r0, r5, #32
 808073c:	f000 ff4e 	bl	80815dc <_ZN7FatFile5closeEv>
      Serial.println("Done writing to SD and closing file...");
 8080740:	f003 f8b2 	bl	80838a8 <_Z16_fetch_usbserialv>
 8080744:	4987      	ldr	r1, [pc, #540]	; (8080964 <loop+0x2bc>)
 8080746:	e002      	b.n	808074e <loop+0xa6>
    }
    else
    {
      Serial.println("ERROR opening file to write to...");
 8080748:	f003 f8ae 	bl	80838a8 <_Z16_fetch_usbserialv>
 808074c:	4986      	ldr	r1, [pc, #536]	; (8080968 <loop+0x2c0>)
 808074e:	f002 fc24 	bl	8082f9a <_ZN5Print7printlnEPKc>
    }
    // Particle.publish("Average 1: ", String(average1, 2), PRIVATE);
    // Particle.publish("Average 2: ", String(average2, 2), PRIVATE);
    averfunc = false;
 8080752:	2300      	movs	r3, #0
 8080754:	703b      	strb	r3, [r7, #0]
  }

  if (publishfunc == true)
 8080756:	4f85      	ldr	r7, [pc, #532]	; (808096c <loop+0x2c4>)
 8080758:	783b      	ldrb	r3, [r7, #0]
 808075a:	2b00      	cmp	r3, #0
 808075c:	d072      	beq.n	8080844 <loop+0x19c>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808075e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8080762:	4e7a      	ldr	r6, [pc, #488]	; (808094c <loop+0x2a4>)
 8080764:	9209      	str	r2, [sp, #36]	; 0x24
 public:
  File() {}
 8080766:	4a7b      	ldr	r2, [pc, #492]	; (8080954 <loop+0x2ac>)
 8080768:	2300      	movs	r3, #0
 808076a:	9207      	str	r2, [sp, #28]
 808076c:	497a      	ldr	r1, [pc, #488]	; (8080958 <loop+0x2b0>)
 808076e:	4a80      	ldr	r2, [pc, #512]	; (8080970 <loop+0x2c8>)
 8080770:	a80b      	add	r0, sp, #44	; 0x2c
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 8080772:	f106 0510 	add.w	r5, r6, #16
 8080776:	ac0b      	add	r4, sp, #44	; 0x2c
 8080778:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 808077c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8080780:	9308      	str	r3, [sp, #32]
 8080782:	f000 ff32 	bl	80815ea <_ZN7FatFile4openEPS_PKci>
 8080786:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8080788:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808078a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808078c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808078e:	6823      	ldr	r3, [r4, #0]
 8080790:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
 8080792:	9b08      	ldr	r3, [sp, #32]
 8080794:	6073      	str	r3, [r6, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
 8080796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8080798:	60b3      	str	r3, [r6, #8]
 808079a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808079c:	60f3      	str	r3, [r6, #12]
  {
    if (Particle.connected)
    {
      //re-open SD file to read
      myFile = SD.open("dataLog.txt");
      if (myFile)
 808079e:	7c33      	ldrb	r3, [r6, #16]
 80807a0:	2b00      	cmp	r3, #0
 80807a2:	d048      	beq.n	8080836 <loop+0x18e>
      {
        Serial.println("dataLog: ");
 80807a4:	f003 f880 	bl	80838a8 <_Z16_fetch_usbserialv>
 80807a8:	4972      	ldr	r1, [pc, #456]	; (8080974 <loop+0x2cc>)
 80807aa:	f002 fbf6 	bl	8082f9a <_ZN5Print7printlnEPKc>

        //read from file until there's nothing on SD
        while (myFile.available())
        {
          Serial.write(myFile.read());
          readCard = myFile.read();
 80807ae:	4d72      	ldr	r5, [pc, #456]	; (8080978 <loop+0x2d0>)
      if (myFile)
      {
        Serial.println("dataLog: ");

        //read from file until there's nothing on SD
        while (myFile.available())
 80807b0:	4866      	ldr	r0, [pc, #408]	; (808094c <loop+0x2a4>)
 80807b2:	f7ff fc80 	bl	80800b6 <_ZN4File9availableEv>
 80807b6:	b1f0      	cbz	r0, 80807f6 <loop+0x14e>
        {
          Serial.write(myFile.read());
 80807b8:	f003 f876 	bl	80838a8 <_Z16_fetch_usbserialv>
 80807bc:	6803      	ldr	r3, [r0, #0]
 80807be:	4604      	mov	r4, r0
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    return FatFile::read();
 80807c0:	486e      	ldr	r0, [pc, #440]	; (808097c <loop+0x2d4>)
 80807c2:	689e      	ldr	r6, [r3, #8]
 80807c4:	f7ff fe19 	bl	80803fa <_ZN7FatFile4readEv>
 80807c8:	b2c1      	uxtb	r1, r0
 80807ca:	4620      	mov	r0, r4
 80807cc:	47b0      	blx	r6
 80807ce:	486b      	ldr	r0, [pc, #428]	; (808097c <loop+0x2d4>)
 80807d0:	f7ff fe13 	bl	80803fa <_ZN7FatFile4readEv>
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
	StringSumHelper(char c) : String(c) {}
	StringSumHelper(unsigned char num) : String(num) {}
	StringSumHelper(int num) : String(num) {}
 80807d4:	220a      	movs	r2, #10
 80807d6:	4601      	mov	r1, r0
 80807d8:	a807      	add	r0, sp, #28
 80807da:	f002 fba2 	bl	8082f22 <_ZN6StringC1Eih>
          readCard = myFile.read();
 80807de:	a907      	add	r1, sp, #28
 80807e0:	4865      	ldr	r0, [pc, #404]	; (8080978 <loop+0x2d0>)
 80807e2:	f002 fb85 	bl	8082ef0 <_ZN6StringaSEO15StringSumHelper>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80807e6:	a807      	add	r0, sp, #28
 80807e8:	f002 fb0b 	bl	8082e02 <_ZN6StringD1Ev>
          sprintf(publishString, readCard);
 80807ec:	6829      	ldr	r1, [r5, #0]
 80807ee:	4864      	ldr	r0, [pc, #400]	; (8080980 <loop+0x2d8>)
 80807f0:	f002 f9aa 	bl	8082b48 <sprintf>
      if (myFile)
      {
        Serial.println("dataLog: ");

        //read from file until there's nothing on SD
        while (myFile.available())
 80807f4:	e7dc      	b.n	80807b0 <loop+0x108>
 80807f6:	4b63      	ldr	r3, [pc, #396]	; (8080984 <loop+0x2dc>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80807f8:	4a61      	ldr	r2, [pc, #388]	; (8080980 <loop+0x2d8>)
 80807fa:	781b      	ldrb	r3, [r3, #0]
 80807fc:	4962      	ldr	r1, [pc, #392]	; (8080988 <loop+0x2e0>)
 80807fe:	f88d 3000 	strb.w	r3, [sp]
 8080802:	a807      	add	r0, sp, #28
 8080804:	233c      	movs	r3, #60	; 0x3c
 8080806:	f002 fe55 	bl	80834b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 808080a:	9c08      	ldr	r4, [sp, #32]
 808080c:	b17c      	cbz	r4, 808082e <loop+0x186>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 808080e:	6863      	ldr	r3, [r4, #4]
 8080810:	3b01      	subs	r3, #1
 8080812:	6063      	str	r3, [r4, #4]
 8080814:	b95b      	cbnz	r3, 808082e <loop+0x186>
        {
          _M_dispose();
 8080816:	6823      	ldr	r3, [r4, #0]
 8080818:	4620      	mov	r0, r4
 808081a:	689b      	ldr	r3, [r3, #8]
 808081c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 808081e:	68a3      	ldr	r3, [r4, #8]
 8080820:	3b01      	subs	r3, #1
 8080822:	60a3      	str	r3, [r4, #8]
 8080824:	b91b      	cbnz	r3, 808082e <loop+0x186>
            _M_destroy();
 8080826:	6823      	ldr	r3, [r4, #0]
 8080828:	4620      	mov	r0, r4
 808082a:	68db      	ldr	r3, [r3, #12]
 808082c:	4798      	blx	r3
          readCard = myFile.read();
          sprintf(publishString, readCard);
        }

        Particle.publish("Collected Data: ", publishString);
        myFile.close();
 808082e:	4853      	ldr	r0, [pc, #332]	; (808097c <loop+0x2d4>)
 8080830:	f000 fed4 	bl	80815dc <_ZN7FatFile5closeEv>
 8080834:	e004      	b.n	8080840 <loop+0x198>
      }
      else
      {
        Serial.println("ERROR opening file to read...");
 8080836:	f003 f837 	bl	80838a8 <_Z16_fetch_usbserialv>
 808083a:	4954      	ldr	r1, [pc, #336]	; (808098c <loop+0x2e4>)
 808083c:	f002 fbad 	bl	8082f9a <_ZN5Print7printlnEPKc>
    }
    else
    {
      Serial.println("NOT CONNECTED to Cloud, continuing to write to SD...");
    }
    publishfunc = false;
 8080840:	2300      	movs	r3, #0
 8080842:	703b      	strb	r3, [r7, #0]
  }

  while (Serial1.available() > 0)
 8080844:	f003 f900 	bl	8083a48 <_Z22__fetch_global_Serial1v>
 8080848:	6803      	ldr	r3, [r0, #0]
 808084a:	691b      	ldr	r3, [r3, #16]
 808084c:	4798      	blx	r3
 808084e:	2800      	cmp	r0, #0
 8080850:	dd0f      	ble.n	8080872 <loop+0x1ca>
  {
    displayInfo();
 8080852:	f7ff fed5 	bl	8080600 <_Z11displayInfov>
    if (gps.encode(Serial1.read()))
 8080856:	f003 f8f7 	bl	8083a48 <_Z22__fetch_global_Serial1v>
 808085a:	6803      	ldr	r3, [r0, #0]
 808085c:	695b      	ldr	r3, [r3, #20]
 808085e:	4798      	blx	r3
 8080860:	b2c1      	uxtb	r1, r0
 8080862:	484b      	ldr	r0, [pc, #300]	; (8080990 <loop+0x2e8>)
 8080864:	f001 ff0a 	bl	808267c <_ZN11TinyGPSPlus6encodeEc>
 8080868:	2800      	cmp	r0, #0
 808086a:	d0eb      	beq.n	8080844 <loop+0x19c>
    {
      //Serial.print("displayInfo conditional pass");
      displayInfo();
 808086c:	f7ff fec8 	bl	8080600 <_Z11displayInfov>
 8080870:	e7e8      	b.n	8080844 <loop+0x19c>
 8080872:	f001 ffe5 	bl	8082840 <HAL_Timer_Get_Milli_Seconds>
    }
  }

  if (millis() - xtime > 100)
 8080876:	4d47      	ldr	r5, [pc, #284]	; (8080994 <loop+0x2ec>)
 8080878:	682b      	ldr	r3, [r5, #0]
 808087a:	1ac0      	subs	r0, r0, r3
 808087c:	2864      	cmp	r0, #100	; 0x64
 808087e:	d957      	bls.n	8080930 <loop+0x288>
  {
    AnalogInput1 += analogRead(A1);
 8080880:	200b      	movs	r0, #11
 8080882:	f003 f9bc 	bl	8083bfe <analogRead>
 8080886:	4a44      	ldr	r2, [pc, #272]	; (8080998 <loop+0x2f0>)
    AnalogInput2 += analogRead(A0);
    AnalogInput3 += analogRead(B5);
    AnalogInput4 += analogRead(B4);
    BatteryVolt += analogRead(B3);

    DigitalInput[0] += digitalRead(D0);
 8080888:	4c44      	ldr	r4, [pc, #272]	; (808099c <loop+0x2f4>)
    }
  }

  if (millis() - xtime > 100)
  {
    AnalogInput1 += analogRead(A1);
 808088a:	6813      	ldr	r3, [r2, #0]
 808088c:	4418      	add	r0, r3
 808088e:	6010      	str	r0, [r2, #0]
    AnalogInput2 += analogRead(A0);
 8080890:	200a      	movs	r0, #10
 8080892:	f003 f9b4 	bl	8083bfe <analogRead>
 8080896:	4a42      	ldr	r2, [pc, #264]	; (80809a0 <loop+0x2f8>)
 8080898:	6813      	ldr	r3, [r2, #0]
 808089a:	4418      	add	r0, r3
 808089c:	6010      	str	r0, [r2, #0]
    AnalogInput3 += analogRead(B5);
 808089e:	201d      	movs	r0, #29
 80808a0:	f003 f9ad 	bl	8083bfe <analogRead>
 80808a4:	4a3f      	ldr	r2, [pc, #252]	; (80809a4 <loop+0x2fc>)
 80808a6:	6813      	ldr	r3, [r2, #0]
 80808a8:	4418      	add	r0, r3
 80808aa:	6010      	str	r0, [r2, #0]
    AnalogInput4 += analogRead(B4);
 80808ac:	201c      	movs	r0, #28
 80808ae:	f003 f9a6 	bl	8083bfe <analogRead>
 80808b2:	4a3d      	ldr	r2, [pc, #244]	; (80809a8 <loop+0x300>)
 80808b4:	6813      	ldr	r3, [r2, #0]
 80808b6:	4418      	add	r0, r3
 80808b8:	6010      	str	r0, [r2, #0]
    BatteryVolt += analogRead(B3);
 80808ba:	201b      	movs	r0, #27
 80808bc:	f003 f99f 	bl	8083bfe <analogRead>
 80808c0:	4a3a      	ldr	r2, [pc, #232]	; (80809ac <loop+0x304>)
 80808c2:	6813      	ldr	r3, [r2, #0]
 80808c4:	4418      	add	r0, r3
 80808c6:	6010      	str	r0, [r2, #0]

    DigitalInput[0] += digitalRead(D0);
 80808c8:	2000      	movs	r0, #0
 80808ca:	f003 f985 	bl	8083bd8 <digitalRead>
 80808ce:	6823      	ldr	r3, [r4, #0]
 80808d0:	4418      	add	r0, r3
 80808d2:	6020      	str	r0, [r4, #0]
    DigitalInput[1] += digitalRead(D1);
 80808d4:	2001      	movs	r0, #1
 80808d6:	f003 f97f 	bl	8083bd8 <digitalRead>
 80808da:	6863      	ldr	r3, [r4, #4]
 80808dc:	4418      	add	r0, r3
 80808de:	6060      	str	r0, [r4, #4]
    DigitalInput[2] += digitalRead(D2);
 80808e0:	2002      	movs	r0, #2
 80808e2:	f003 f979 	bl	8083bd8 <digitalRead>
 80808e6:	68a3      	ldr	r3, [r4, #8]
 80808e8:	4418      	add	r0, r3
 80808ea:	60a0      	str	r0, [r4, #8]
    DigitalInput[3] += digitalRead(D3);
 80808ec:	2003      	movs	r0, #3
 80808ee:	f003 f973 	bl	8083bd8 <digitalRead>
 80808f2:	68e3      	ldr	r3, [r4, #12]

    cnt++;
 80808f4:	4a2e      	ldr	r2, [pc, #184]	; (80809b0 <loop+0x308>)
    BatteryVolt += analogRead(B3);

    DigitalInput[0] += digitalRead(D0);
    DigitalInput[1] += digitalRead(D1);
    DigitalInput[2] += digitalRead(D2);
    DigitalInput[3] += digitalRead(D3);
 80808f6:	4418      	add	r0, r3

    cnt++;
 80808f8:	6813      	ldr	r3, [r2, #0]
    BatteryVolt += analogRead(B3);

    DigitalInput[0] += digitalRead(D0);
    DigitalInput[1] += digitalRead(D1);
    DigitalInput[2] += digitalRead(D2);
    DigitalInput[3] += digitalRead(D3);
 80808fa:	60e0      	str	r0, [r4, #12]

    cnt++;
 80808fc:	3301      	adds	r3, #1
 80808fe:	6013      	str	r3, [r2, #0]
 8080900:	f001 ff9e 	bl	8082840 <HAL_Timer_Get_Milli_Seconds>
    xtime = millis();
 8080904:	6028      	str	r0, [r5, #0]

    //For statement used to run through the 4 different digital inputs
    for (int i = 0; i < 4; i++)
    {
      //These if statements are used to check the state change of the digital inputs and record time pressed
      if (DigitalInput[i] != lastButtonState[i])
 8080906:	482b      	ldr	r0, [pc, #172]	; (80809b4 <loop+0x30c>)
      {
        digitalUse[i]++;
 8080908:	4d2b      	ldr	r5, [pc, #172]	; (80809b8 <loop+0x310>)
 808090a:	4607      	mov	r7, r0

    //Particle.publish("AnalogInput1: ", String(AnalogInput1, 2), PRIVATE);
    //Particle.publish("AnalogInput2: ", String(AnalogInput2, 2), PRIVATE);

    //For statement used to run through the 4 different digital inputs
    for (int i = 0; i < 4; i++)
 808090c:	2300      	movs	r3, #0
    {
      //These if statements are used to check the state change of the digital inputs and record time pressed
      if (DigitalInput[i] != lastButtonState[i])
 808090e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8080912:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8080916:	009e      	lsls	r6, r3, #2
 8080918:	4291      	cmp	r1, r2
      {
        digitalUse[i]++;
 808091a:	bf18      	it	ne
 808091c:	f855 2023 	ldrne.w	r2, [r5, r3, lsl #2]
      }
      lastButtonState[i] = DigitalInput[i];
 8080920:	51b9      	str	r1, [r7, r6]
    for (int i = 0; i < 4; i++)
    {
      //These if statements are used to check the state change of the digital inputs and record time pressed
      if (DigitalInput[i] != lastButtonState[i])
      {
        digitalUse[i]++;
 8080922:	bf1c      	itt	ne
 8080924:	3201      	addne	r2, #1
 8080926:	f845 2023 	strne.w	r2, [r5, r3, lsl #2]

    //Particle.publish("AnalogInput1: ", String(AnalogInput1, 2), PRIVATE);
    //Particle.publish("AnalogInput2: ", String(AnalogInput2, 2), PRIVATE);

    //For statement used to run through the 4 different digital inputs
    for (int i = 0; i < 4; i++)
 808092a:	3301      	adds	r3, #1
 808092c:	2b04      	cmp	r3, #4
 808092e:	d1ee      	bne.n	808090e <loop+0x266>
      lastButtonState[i] = DigitalInput[i];

      // Particle.publish("Time", String(timeHold, 2), PRIVATE);
    }
  }
}
 8080930:	b015      	add	sp, #84	; 0x54
 8080932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080934:	20000aac 	.word	0x20000aac
 8080938:	20000c60 	.word	0x20000c60
 808093c:	08084aaa 	.word	0x08084aaa
 8080940:	20000a88 	.word	0x20000a88
 8080944:	20000aae 	.word	0x20000aae
 8080948:	20000a68 	.word	0x20000a68
 808094c:	20000a00 	.word	0x20000a00
 8080950:	20000910 	.word	0x20000910
 8080954:	080849d0 	.word	0x080849d0
 8080958:	200008b0 	.word	0x200008b0
 808095c:	08084ae2 	.word	0x08084ae2
 8080960:	08084aee 	.word	0x08084aee
 8080964:	08084b04 	.word	0x08084b04
 8080968:	08084b2b 	.word	0x08084b2b
 808096c:	200008f8 	.word	0x200008f8
 8080970:	08084a89 	.word	0x08084a89
 8080974:	08084b4d 	.word	0x08084b4d
 8080978:	20000b88 	.word	0x20000b88
 808097c:	20000a10 	.word	0x20000a10
 8080980:	20000b98 	.word	0x20000b98
 8080984:	20000a80 	.word	0x20000a80
 8080988:	08084b57 	.word	0x08084b57
 808098c:	08084b68 	.word	0x08084b68
 8080990:	20000928 	.word	0x20000928
 8080994:	20000aa8 	.word	0x20000aa8
 8080998:	200008fc 	.word	0x200008fc
 808099c:	20000a54 	.word	0x20000a54
 80809a0:	20000900 	.word	0x20000900
 80809a4:	20000904 	.word	0x20000904
 80809a8:	20000908 	.word	0x20000908
 80809ac:	20000a34 	.word	0x20000a34
 80809b0:	20000c88 	.word	0x20000c88
 80809b4:	20000a70 	.word	0x20000a70
 80809b8:	20000b78 	.word	0x20000b78

080809bc <_GLOBAL__sub_I_SD>:
      strcpy(buf, "no location");
    }

    Serial.println(buf);
  }
}
 80809bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80809c0:	4b40      	ldr	r3, [pc, #256]	; (8080ac4 <_GLOBAL__sub_I_SD+0x108>)
 80809c2:	b085      	sub	sp, #20
 80809c4:	2400      	movs	r4, #0
 80809c6:	701c      	strb	r4, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80809c8:	f001 feb2 	bl	8082730 <HAL_Pin_Map>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 80809cc:	4b3e      	ldr	r3, [pc, #248]	; (8080ac8 <_GLOBAL__sub_I_SD+0x10c>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 80809ce:	2264      	movs	r2, #100	; 0x64
 80809d0:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
  }

  __SPISettings()
  {
 80809d4:	4a3d      	ldr	r2, [pc, #244]	; (8080acc <_GLOBAL__sub_I_SD+0x110>)
 80809d6:	483e      	ldr	r0, [pc, #248]	; (8080ad0 <_GLOBAL__sub_I_SD+0x114>)
 80809d8:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
 80809dc:	4a3d      	ldr	r2, [pc, #244]	; (8080ad4 <_GLOBAL__sub_I_SD+0x118>)
 80809de:	2601      	movs	r6, #1
#include <ArduinoJson.h>

//SD Card
SdFat SD;
#define SD_CS_PIN SS
File myFile;
 80809e0:	4d3d      	ldr	r5, [pc, #244]	; (8080ad8 <_GLOBAL__sub_I_SD+0x11c>)
 80809e2:	71dc      	strb	r4, [r3, #7]
 80809e4:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
 80809e8:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
 80809ec:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
 80809f0:	f883 6474 	strb.w	r6, [r3, #1140]	; 0x474
 80809f4:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
 80809f8:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
 80809fc:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
 8080a00:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8080a04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080a08:	6083      	str	r3, [r0, #8]
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
 8080a0a:	4b34      	ldr	r3, [pc, #208]	; (8080adc <_GLOBAL__sub_I_SD+0x120>)
 8080a0c:	462a      	mov	r2, r5
 8080a0e:	7404      	strb	r4, [r0, #16]
 8080a10:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8080a12:	6044      	str	r4, [r0, #4]
 8080a14:	4932      	ldr	r1, [pc, #200]	; (8080ae0 <_GLOBAL__sub_I_SD+0x124>)
 8080a16:	6003      	str	r3, [r0, #0]
 8080a18:	f003 f96e 	bl	8083cf8 <__aeabi_atexit>

//TinyGPS++ object
SYSTEM_THREAD(ENABLED);
 8080a1c:	4621      	mov	r1, r4
 8080a1e:	4630      	mov	r0, r6
 8080a20:	f002 f826 	bl	8082a70 <system_thread_set_state>
TinyGPSPlus gps;
 8080a24:	482f      	ldr	r0, [pc, #188]	; (8080ae4 <_GLOBAL__sub_I_SD+0x128>)
 8080a26:	f001 fb99 	bl	808215c <_ZN11TinyGPSPlusC1Ev>
 8080a2a:	f001 ff09 	bl	8082840 <HAL_Timer_Get_Milli_Seconds>
//this boolean allows the Particle.publish to execute since the function can not be used inside of the callback function aver_call
bool averfunc = false;
bool publishfunc = false;

//String data;
String dataString = "";
 8080a2e:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8080b10 <_GLOBAL__sub_I_SD+0x154>
// int endPress[4] = {0, 0, 0, 0};
// int timeHold[4] = {0, 0, 0, 0};
// int timeReleased[4] = {0, 0, 0, 0};
// int timeTotal[4] = {0, 0, 0, 0};

int xtime = millis();
 8080a32:	4b2d      	ldr	r3, [pc, #180]	; (8080ae8 <_GLOBAL__sub_I_SD+0x12c>)
//this boolean allows the Particle.publish to execute since the function can not be used inside of the callback function aver_call
bool averfunc = false;
bool publishfunc = false;

//String data;
String dataString = "";
 8080a34:	4e2d      	ldr	r6, [pc, #180]	; (8080aec <_GLOBAL__sub_I_SD+0x130>)
// int endPress[4] = {0, 0, 0, 0};
// int timeHold[4] = {0, 0, 0, 0};
// int timeReleased[4] = {0, 0, 0, 0};
// int timeTotal[4] = {0, 0, 0, 0};

int xtime = millis();
 8080a36:	6018      	str	r0, [r3, #0]
//this boolean allows the Particle.publish to execute since the function can not be used inside of the callback function aver_call
bool averfunc = false;
bool publishfunc = false;

//String data;
String dataString = "";
 8080a38:	4641      	mov	r1, r8
 8080a3a:	4f2d      	ldr	r7, [pc, #180]	; (8080af0 <_GLOBAL__sub_I_SD+0x134>)
 8080a3c:	4630      	mov	r0, r6
 8080a3e:	f002 fa27 	bl	8082e90 <_ZN6StringC1EPK19__FlashStringHelper>
 8080a42:	4630      	mov	r0, r6
int led1 = D7;
String readCard;
 8080a44:	4e2b      	ldr	r6, [pc, #172]	; (8080af4 <_GLOBAL__sub_I_SD+0x138>)
//this boolean allows the Particle.publish to execute since the function can not be used inside of the callback function aver_call
bool averfunc = false;
bool publishfunc = false;

//String data;
String dataString = "";
 8080a46:	462a      	mov	r2, r5
 8080a48:	4639      	mov	r1, r7
 8080a4a:	f003 f955 	bl	8083cf8 <__aeabi_atexit>
int led1 = D7;
String readCard;
 8080a4e:	4641      	mov	r1, r8
 8080a50:	4630      	mov	r0, r6
 8080a52:	f002 fa1d 	bl	8082e90 <_ZN6StringC1EPK19__FlashStringHelper>
 8080a56:	462a      	mov	r2, r5
 8080a58:	4639      	mov	r1, r7
 8080a5a:	4630      	mov	r0, r6
 8080a5c:	f003 f94c 	bl	8083cf8 <__aeabi_atexit>
{
  publishfunc = true;
}

//Software timer which calls aver_call every 1 mins, runs in the background and allows main loop to continue running
Timer timer(60000, aver_call);
 8080a60:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8080b14 <_GLOBAL__sub_I_SD+0x158>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8080a64:	4b24      	ldr	r3, [pc, #144]	; (8080af8 <_GLOBAL__sub_I_SD+0x13c>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080a66:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8080b18 <_GLOBAL__sub_I_SD+0x15c>
	    _M_manager = &_My_handler::_M_manager;
 8080a6a:	4e24      	ldr	r6, [pc, #144]	; (8080afc <_GLOBAL__sub_I_SD+0x140>)
 8080a6c:	466a      	mov	r2, sp
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8080a6e:	9300      	str	r3, [sp, #0]
 8080a70:	f64e 2160 	movw	r1, #60000	; 0xea60
 8080a74:	4623      	mov	r3, r4
 8080a76:	4f22      	ldr	r7, [pc, #136]	; (8080b00 <_GLOBAL__sub_I_SD+0x144>)
 8080a78:	4648      	mov	r0, r9

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
 8080a7a:	9602      	str	r6, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080a7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8080a80:	f7ff fc3a 	bl	80802f8 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080a84:	4668      	mov	r0, sp
 8080a86:	f7ff fc2e 	bl	80802e6 <_ZNSt14_Function_baseD1Ev>
 8080a8a:	462a      	mov	r2, r5
 8080a8c:	4639      	mov	r1, r7
 8080a8e:	4648      	mov	r0, r9
 8080a90:	f003 f932 	bl	8083cf8 <__aeabi_atexit>

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
 8080a94:	9602      	str	r6, [sp, #8]
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8080a96:	4b1b      	ldr	r3, [pc, #108]	; (8080b04 <_GLOBAL__sub_I_SD+0x148>)
Timer pub(180000, publish_call);
 8080a98:	4e1b      	ldr	r6, [pc, #108]	; (8080b08 <_GLOBAL__sub_I_SD+0x14c>)
 8080a9a:	466a      	mov	r2, sp
 8080a9c:	9300      	str	r3, [sp, #0]
 8080a9e:	491b      	ldr	r1, [pc, #108]	; (8080b0c <_GLOBAL__sub_I_SD+0x150>)
 8080aa0:	4623      	mov	r3, r4
 8080aa2:	4630      	mov	r0, r6
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080aa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8080aa8:	f7ff fc26 	bl	80802f8 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080aac:	4668      	mov	r0, sp
 8080aae:	f7ff fc1a 	bl	80802e6 <_ZNSt14_Function_baseD1Ev>
 8080ab2:	462a      	mov	r2, r5
 8080ab4:	4639      	mov	r1, r7
 8080ab6:	4630      	mov	r0, r6
 8080ab8:	f003 f91e 	bl	8083cf8 <__aeabi_atexit>
      strcpy(buf, "no location");
    }

    Serial.println(buf);
  }
}
 8080abc:	b005      	add	sp, #20
 8080abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8080ac2:	bf00      	nop
 8080ac4:	20000a80 	.word	0x20000a80
 8080ac8:	20000474 	.word	0x20000474
 8080acc:	080849b0 	.word	0x080849b0
 8080ad0:	20000a00 	.word	0x20000a00
 8080ad4:	20001190 	.word	0x20001190
 8080ad8:	20000470 	.word	0x20000470
 8080adc:	080849d0 	.word	0x080849d0
 8080ae0:	0808021d 	.word	0x0808021d
 8080ae4:	20000928 	.word	0x20000928
 8080ae8:	20000aa8 	.word	0x20000aa8
 8080aec:	20000918 	.word	0x20000918
 8080af0:	08082e03 	.word	0x08082e03
 8080af4:	20000b88 	.word	0x20000b88
 8080af8:	080800d5 	.word	0x080800d5
 8080afc:	08080205 	.word	0x08080205
 8080b00:	080803a9 	.word	0x080803a9
 8080b04:	080801f5 	.word	0x080801f5
 8080b08:	20000c8c 	.word	0x20000c8c
 8080b0c:	0002bf20 	.word	0x0002bf20
 8080b10:	08084be4 	.word	0x08084be4
 8080b14:	20000a38 	.word	0x20000a38
 8080b18:	08080201 	.word	0x08080201

08080b1c <_GLOBAL__sub_I_MinimumSerial.cpp>:
 8080b1c:	f001 be08 	b.w	8082730 <HAL_Pin_Map>

08080b20 <_GLOBAL__sub_I__ZN7istream3getEv>:
 8080b20:	f001 be06 	b.w	8082730 <HAL_Pin_Map>

08080b24 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 8080b24:	b510      	push	{r4, lr}
 8080b26:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 8080b28:	3024      	adds	r0, #36	; 0x24
 8080b2a:	f000 fe8d 	bl	8081848 <_ZN8FatCache4syncEv>
 8080b2e:	b128      	cbz	r0, 8080b3c <_ZN9FatVolume9cacheSyncEv+0x18>
 8080b30:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
 8080b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 8080b38:	f000 be86 	b.w	8081848 <_ZN8FatCache4syncEv>
  }
 8080b3c:	bd10      	pop	{r4, pc}

08080b3e <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
 8080b3e:	1e41      	subs	r1, r0, #1
 8080b40:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
 8080b44:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8080b46:	0843      	lsrs	r3, r0, #1
 8080b48:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 8080b4c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8080b50:	4418      	add	r0, r3
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 8080b52:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8080b54:	f000 00ff 	and.w	r0, r0, #255	; 0xff
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 8080b58:	d1f5      	bne.n	8080b46 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
 8080b5a:	4770      	bx	lr

08080b5c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 8080b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 8080b60:	7803      	ldrb	r3, [r0, #0]
 8080b62:	1c44      	adds	r4, r0, #1
 8080b64:	2b20      	cmp	r3, #32
 8080b66:	d101      	bne.n	8080b6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x10>
 8080b68:	4620      	mov	r0, r4
 8080b6a:	e7f9      	b.n	8080b60 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;
 8080b6c:	4605      	mov	r5, r0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8080b6e:	4f70      	ldr	r7, [pc, #448]	; (8080d30 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
 8080b70:	6088      	str	r0, [r1, #8]
 8080b72:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
 8080b74:	462e      	mov	r6, r5
 8080b76:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
 8080b7a:	b30b      	cbz	r3, 8080bc0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 8080b7c:	2b2f      	cmp	r3, #47	; 0x2f
 8080b7e:	d101      	bne.n	8080b84 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x28>
 8080b80:	1903      	adds	r3, r0, r4
 8080b82:	e017      	b.n	8080bb4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8080b84:	2b5c      	cmp	r3, #92	; 0x5c
 8080b86:	d102      	bne.n	8080b8e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x32>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 8080b88:	2000      	movs	r0, #0
 8080b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8080b8e:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
 8080b92:	b2e4      	uxtb	r4, r4
 8080b94:	2c1d      	cmp	r4, #29
 8080b96:	d803      	bhi.n	8080ba0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x44>
 8080b98:	fa27 f404 	lsr.w	r4, r7, r4
 8080b9c:	07e4      	lsls	r4, r4, #31
 8080b9e:	d4f3      	bmi.n	8080b88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 8080ba0:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
 8080ba4:	2c3c      	cmp	r4, #60	; 0x3c
 8080ba6:	d0ef      	beq.n	8080b88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
 8080ba8:	3b20      	subs	r3, #32
 8080baa:	2b5e      	cmp	r3, #94	; 0x5e
 8080bac:	d9e1      	bls.n	8080b72 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16>
 8080bae:	e7eb      	b.n	8080b88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 8080bb0:	2d2f      	cmp	r5, #47	; 0x2f
 8080bb2:	d105      	bne.n	8080bc0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 8080bb4:	461e      	mov	r6, r3
 8080bb6:	f813 5b01 	ldrb.w	r5, [r3], #1
 8080bba:	2d20      	cmp	r5, #32
 8080bbc:	d1f8      	bne.n	8080bb0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x54>
 8080bbe:	e7f9      	b.n	8080bb4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  *ptr = &path[end];
 8080bc0:	6016      	str	r6, [r2, #0]
 8080bc2:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
 8080bc4:	4298      	cmp	r0, r3
 8080bc6:	ebc0 0803 	rsb	r8, r0, r3
 8080bca:	d009      	beq.n	8080be0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x84>
    c = path[len - 1];
 8080bcc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 8080bd0:	2a2e      	cmp	r2, #46	; 0x2e
 8080bd2:	d0f7      	beq.n	8080bc4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
 8080bd4:	2a20      	cmp	r2, #32
 8080bd6:	d0f5      	beq.n	8080bc4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
 8080bd8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8080bdc:	dcd4      	bgt.n	8080b88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 8080bde:	e001      	b.n	8080be4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
 8080be0:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
 8080be4:	f8c1 8004 	str.w	r8, [r1, #4]
 8080be8:	f101 030c 	add.w	r3, r1, #12
 8080bec:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 8080bf0:	2420      	movs	r4, #32
 8080bf2:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
 8080bf6:	4293      	cmp	r3, r2
 8080bf8:	d1fb      	bne.n	8080bf2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x96>
 8080bfa:	4603      	mov	r3, r0
 8080bfc:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 8080bfe:	f813 4b01 	ldrb.w	r4, [r3], #1
 8080c02:	2c2e      	cmp	r4, #46	; 0x2e
 8080c04:	d0fa      	beq.n	8080bfc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
 8080c06:	2c20      	cmp	r4, #32
 8080c08:	d0f8      	beq.n	8080bfc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
 8080c0a:	fab2 f482 	clz	r4, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8080c0e:	f108 36ff 	add.w	r6, r8, #4294967295
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
 8080c12:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8080c14:	1c73      	adds	r3, r6, #1
 8080c16:	d107      	bne.n	8080c28 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xcc>
 8080c18:	2700      	movs	r7, #0
 8080c1a:	f04f 0e07 	mov.w	lr, #7
 8080c1e:	463d      	mov	r5, r7
 8080c20:	46ba      	mov	sl, r7
 8080c22:	f04f 0908 	mov.w	r9, #8
 8080c26:	e009      	b.n	8080c3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
 8080c28:	5d83      	ldrb	r3, [r0, r6]
 8080c2a:	2b2e      	cmp	r3, #46	; 0x2e
 8080c2c:	d0f4      	beq.n	8080c18 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbc>
 8080c2e:	3e01      	subs	r6, #1
 8080c30:	e7f0      	b.n	8080c14 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb8>
  for (; si < len; si++) {
    c = path[si];
 8080c32:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
 8080c34:	2b20      	cmp	r3, #32
 8080c36:	d104      	bne.n	8080c42 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe6>
      is83 = false;
 8080c38:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
 8080c3a:	3201      	adds	r2, #1
 8080c3c:	4542      	cmp	r2, r8
 8080c3e:	dbf8      	blt.n	8080c32 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
 8080c40:	e04b      	b.n	8080cda <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
 8080c42:	2b2e      	cmp	r3, #46	; 0x2e
 8080c44:	d102      	bne.n	8080c4c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 8080c46:	42b2      	cmp	r2, r6
 8080c48:	d1f6      	bne.n	8080c38 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
 8080c4a:	e003      	b.n	8080c54 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
 8080c4c:	2b22      	cmp	r3, #34	; 0x22
 8080c4e:	d017      	beq.n	8080c80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 8080c50:	2b7c      	cmp	r3, #124	; 0x7c
 8080c52:	d015      	beq.n	8080c80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 8080c54:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 8080c58:	f1bc 0f05 	cmp.w	ip, #5
 8080c5c:	d801      	bhi.n	8080c62 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x106>
 8080c5e:	2b2d      	cmp	r3, #45	; 0x2d
 8080c60:	d10e      	bne.n	8080c80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
 8080c62:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 8080c66:	f1bc 0f05 	cmp.w	ip, #5
 8080c6a:	d909      	bls.n	8080c80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
 8080c6c:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 8080c70:	f1bc 0f02 	cmp.w	ip, #2
 8080c74:	d904      	bls.n	8080c80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
 8080c76:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 8080c7a:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 8080c7e:	d902      	bls.n	8080c86 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12a>
 8080c80:	42b2      	cmp	r2, r6
 8080c82:	d10e      	bne.n	8080ca2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x146>
 8080c84:	e049      	b.n	8080d1a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 8080c86:	42b2      	cmp	r2, r6
 8080c88:	d047      	beq.n	8080d1a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
 8080c8a:	4575      	cmp	r5, lr
 8080c8c:	d821      	bhi.n	8080cd2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
 8080c8e:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8080c92:	f1bc 0f19 	cmp.w	ip, #25
 8080c96:	d808      	bhi.n	8080caa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14e>
        c += 'A' - 'a';
 8080c98:	3b20      	subs	r3, #32
 8080c9a:	b2db      	uxtb	r3, r3
        lc |= bit;
 8080c9c:	ea49 0707 	orr.w	r7, r9, r7
 8080ca0:	e00a      	b.n	8080cb8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15c>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 8080ca2:	4575      	cmp	r5, lr
 8080ca4:	d815      	bhi.n	8080cd2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
 8080ca6:	2400      	movs	r4, #0
      c = '_';
 8080ca8:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
 8080caa:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 8080cae:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 8080cb2:	bf98      	it	ls
 8080cb4:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
 8080cb8:	f105 0c01 	add.w	ip, r5, #1
 8080cbc:	fa5f fc8c 	uxtb.w	ip, ip
 8080cc0:	440d      	add	r5, r1
      if (i < 7) {
 8080cc2:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 8080cc6:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
 8080cc8:	d801      	bhi.n	8080cce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x172>
        fname->seqPos = i;
 8080cca:	f881 c00c 	strb.w	ip, [r1, #12]
 8080cce:	4665      	mov	r5, ip
 8080cd0:	e7b3      	b.n	8080c3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 8080cd2:	f1be 0f0a 	cmp.w	lr, #10
 8080cd6:	d117      	bne.n	8080d08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
 8080cd8:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 8080cda:	7b4b      	ldrb	r3, [r1, #13]
 8080cdc:	2b20      	cmp	r3, #32
 8080cde:	f43f af53 	beq.w	8080b88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
    return false;
  }

  if (is83) {
 8080ce2:	b13c      	cbz	r4, 8080cf4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x198>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 8080ce4:	ea1a 0f07 	tst.w	sl, r7
 8080ce8:	bf18      	it	ne
 8080cea:	2702      	movne	r7, #2
 8080cec:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
 8080cee:	2001      	movs	r0, #1
 8080cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
 8080cf4:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
 8080cf6:	2001      	movs	r0, #1
 8080cf8:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 8080cfa:	4419      	add	r1, r3
 8080cfc:	237e      	movs	r3, #126	; 0x7e
 8080cfe:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 8080d00:	2331      	movs	r3, #49	; 0x31
 8080d02:	738b      	strb	r3, [r1, #14]
 8080d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
 8080d08:	42b2      	cmp	r2, r6
 8080d0a:	dce5      	bgt.n	8080cd8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8080d0c:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 8080d0e:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 8080d12:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8080d14:	f04f 0910 	mov.w	r9, #16
 8080d18:	e78e      	b.n	8080c38 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 8080d1a:	f1be 0f0a 	cmp.w	lr, #10
 8080d1e:	d0db      	beq.n	8080cd8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8080d20:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 8080d22:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 8080d26:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8080d28:	f04f 0910 	mov.w	r9, #16
 8080d2c:	e785      	b.n	8080c3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 8080d2e:	bf00      	nop
 8080d30:	31000101 	.word	0x31000101

08080d34 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 8080d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8080d38:	4606      	mov	r6, r0
 8080d3a:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 8080d3c:	f891 900c 	ldrb.w	r9, [r1, #12]
 8080d40:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 8080d42:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8080d44:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 8080d48:	6869      	ldr	r1, [r5, #4]
 8080d4a:	68aa      	ldr	r2, [r5, #8]
 8080d4c:	1863      	adds	r3, r4, r1
 8080d4e:	b29b      	uxth	r3, r3
 8080d50:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
 8080d52:	4291      	cmp	r1, r2
 8080d54:	d006      	beq.n	8080d64 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
 8080d56:	f812 0b01 	ldrb.w	r0, [r2], #1
 8080d5a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 8080d5e:	4043      	eors	r3, r0
 8080d60:	b29b      	uxth	r3, r3
 8080d62:	e7f6      	b.n	8080d52 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
 8080d64:	f1b9 0f03 	cmp.w	r9, #3
 8080d68:	bf28      	it	cs
 8080d6a:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8080d6e:	f109 0204 	add.w	r2, r9, #4
 8080d72:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 8080d74:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8080d78:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8080d7a:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8080d7c:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8080d7e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8080d80:	bf94      	ite	ls
 8080d82:	3130      	addls	r1, #48	; 0x30
 8080d84:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8080d86:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8080d88:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 8080d8a:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8080d8e:	d3f1      	bcc.n	8080d74 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 8080d90:	eb05 0309 	add.w	r3, r5, r9
 8080d94:	735f      	strb	r7, [r3, #13]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
 8080d96:	2100      	movs	r1, #0
 8080d98:	4630      	mov	r0, r6
 8080d9a:	f000 fb31 	bl	8081400 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
 8080d9e:	2101      	movs	r1, #1
 8080da0:	4630      	mov	r0, r6
 8080da2:	f000 fb10 	bl	80813c6 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 8080da6:	4601      	mov	r1, r0
 8080da8:	b928      	cbnz	r0, 8080db6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 8080daa:	7870      	ldrb	r0, [r6, #1]
 8080dac:	fab0 f080 	clz	r0, r0
 8080db0:	0940      	lsrs	r0, r0, #5
 8080db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 8080db6:	7803      	ldrb	r3, [r0, #0]
 8080db8:	b14b      	cbz	r3, 8080dce <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8080dba:	7ac3      	ldrb	r3, [r0, #11]
 8080dbc:	071b      	lsls	r3, r3, #28
 8080dbe:	d4ee      	bmi.n	8080d9e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8080dc0:	220b      	movs	r2, #11
 8080dc2:	4640      	mov	r0, r8
 8080dc4:	f003 fcc4 	bl	8084750 <memcmp>
 8080dc8:	2800      	cmp	r0, #0
 8080dca:	d1e8      	bne.n	8080d9e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8080dcc:	e002      	b.n	8080dd4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
 8080dce:	2001      	movs	r0, #1
 8080dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8080dd4:	3401      	adds	r4, #1
 8080dd6:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
 8080dd8:	2c64      	cmp	r4, #100	; 0x64
 8080dda:	d1b5      	bne.n	8080d48 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
 8080ddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08080de0 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 8080de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080de4:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8080de6:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 8080de8:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8080dea:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 8080dee:	9005      	str	r0, [sp, #20]
 8080df0:	460e      	mov	r6, r1
 8080df2:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8080df4:	d101      	bne.n	8080dfa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
 8080df6:	2000      	movs	r0, #0
 8080df8:	e1a0      	b.n	808113c <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8080dfa:	9b05      	ldr	r3, [sp, #20]
 8080dfc:	781b      	ldrb	r3, [r3, #0]
 8080dfe:	2b00      	cmp	r3, #0
 8080e00:	d1f9      	bne.n	8080df6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
 8080e02:	6853      	ldr	r3, [r2, #4]
 8080e04:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8080e06:	7813      	ldrb	r3, [r2, #0]
 8080e08:	079b      	lsls	r3, r3, #30
 8080e0a:	f000 818d 	beq.w	8081128 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
 8080e0e:	9b02      	ldr	r3, [sp, #8]
 8080e10:	270d      	movs	r7, #13
 8080e12:	330c      	adds	r3, #12
 8080e14:	fbb3 f7f7 	udiv	r7, r3, r7
 8080e18:	3701      	adds	r7, #1
 8080e1a:	b2ff      	uxtb	r7, r7
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
 8080e1c:	f04f 0800 	mov.w	r8, #0
 8080e20:	2100      	movs	r1, #0
 8080e22:	4630      	mov	r0, r6
 8080e24:	f000 faec 	bl	8081400 <_ZN7FatFile7seekSetEm>
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
 8080e28:	4644      	mov	r4, r8
  uint8_t ord = 0;
 8080e2a:	4643      	mov	r3, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
 8080e2c:	4645      	mov	r5, r8
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8080e2e:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
 8080e32:	f8cd 800c 	str.w	r8, [sp, #12]
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
 8080e36:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8080e3a:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8080e3c:	6972      	ldr	r2, [r6, #20]
    dir = dirFile->readDirCache(true);
 8080e3e:	2101      	movs	r1, #1
 8080e40:	4630      	mov	r0, r6
 8080e42:	9307      	str	r3, [sp, #28]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8080e44:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
 8080e48:	f000 fabd 	bl	80813c6 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8080e4c:	9b07      	ldr	r3, [sp, #28]
 8080e4e:	b920      	cbnz	r0, 8080e5a <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
 8080e50:	7873      	ldrb	r3, [r6, #1]
 8080e52:	2b00      	cmp	r3, #0
 8080e54:	f000 8090 	beq.w	8080f78 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
 8080e58:	e7cd      	b.n	8080df6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 8080e5a:	7802      	ldrb	r2, [r0, #0]
 8080e5c:	2ae5      	cmp	r2, #229	; 0xe5
 8080e5e:	d000      	beq.n	8080e62 <_ZN7FatFile4openEPS_P7fname_ti+0x82>
 8080e60:	b942      	cbnz	r2, 8080e74 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8080e62:	2c00      	cmp	r4, #0
 8080e64:	bf08      	it	eq
 8080e66:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
 8080e68:	42bc      	cmp	r4, r7
        freeFound++;
 8080e6a:	bf3c      	itt	cc
 8080e6c:	3401      	addcc	r4, #1
 8080e6e:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 8080e70:	b922      	cbnz	r2, 8080e7c <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
 8080e72:	e081      	b.n	8080f78 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
 8080e74:	42bc      	cmp	r4, r7
 8080e76:	bf38      	it	cc
 8080e78:	2400      	movcc	r4, #0
 8080e7a:	e003      	b.n	8080e84 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8080e7c:	2ae5      	cmp	r2, #229	; 0xe5
 8080e7e:	d101      	bne.n	8080e84 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
 8080e80:	2500      	movs	r5, #0
 8080e82:	e7db      	b.n	8080e3c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8080e84:	2a2e      	cmp	r2, #46	; 0x2e
 8080e86:	d0fb      	beq.n	8080e80 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8080e88:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
 8080e8a:	290f      	cmp	r1, #15
 8080e8c:	d152      	bne.n	8080f34 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
 8080e8e:	b93d      	cbnz	r5, 8080ea0 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 8080e90:	0651      	lsls	r1, r2, #25
 8080e92:	d5d3      	bpl.n	8080e3c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
 8080e94:	7b43      	ldrb	r3, [r0, #13]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 8080e96:	f002 051f 	and.w	r5, r2, #31
        chksum = ldir->chksum;
 8080e9a:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 8080e9c:	462b      	mov	r3, r5
 8080e9e:	e007      	b.n	8080eb0 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 8080ea0:	3b01      	subs	r3, #1
 8080ea2:	b2db      	uxtb	r3, r3
 8080ea4:	429a      	cmp	r2, r3
 8080ea6:	d1eb      	bne.n	8080e80 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8080ea8:	7b42      	ldrb	r2, [r0, #13]
 8080eaa:	9903      	ldr	r1, [sp, #12]
 8080eac:	4291      	cmp	r1, r2
 8080eae:	d1e7      	bne.n	8080e80 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
 8080eb0:	1e5a      	subs	r2, r3, #1
 8080eb2:	f04f 0c0d 	mov.w	ip, #13
 8080eb6:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
 8080eba:	9a02      	ldr	r2, [sp, #8]
 8080ebc:	4562      	cmp	r2, ip
 8080ebe:	d9df      	bls.n	8080e80 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8080ec0:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 8080ec4:	f1be 0f04 	cmp.w	lr, #4
 8080ec8:	fa5f f28e 	uxtb.w	r2, lr
 8080ecc:	d804      	bhi.n	8080ed8 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
 8080ece:	eb00 024e 	add.w	r2, r0, lr, lsl #1
 8080ed2:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8080ed6:	e00c      	b.n	8080ef2 <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8080ed8:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 8080eda:	bf95      	itete	ls
 8080edc:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8080ee0:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8080ee4:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8080ee8:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8080eec:	bf94      	ite	ls
 8080eee:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8080ef0:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
 8080ef2:	9902      	ldr	r1, [sp, #8]
 8080ef4:	4561      	cmp	r1, ip
 8080ef6:	d103      	bne.n	8080f00 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
 8080ef8:	2a00      	cmp	r2, #0
 8080efa:	bf18      	it	ne
 8080efc:	2500      	movne	r5, #0
 8080efe:	e79d      	b.n	8080e3c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8080f00:	2aff      	cmp	r2, #255	; 0xff
 8080f02:	d8bd      	bhi.n	8080e80 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8080f04:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8080f06:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8080f0a:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8080f0c:	f8d9 1008 	ldr.w	r1, [r9, #8]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8080f10:	bf98      	it	ls
 8080f12:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8080f14:	f811 100c 	ldrb.w	r1, [r1, ip]
 8080f18:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8080f1c:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 8080f20:	bf98      	it	ls
 8080f22:	b2d2      	uxtbls	r2, r2
 8080f24:	f1bc 0f19 	cmp.w	ip, #25
 8080f28:	bf9c      	itt	ls
 8080f2a:	3120      	addls	r1, #32
 8080f2c:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8080f2e:	4291      	cmp	r1, r2
 8080f30:	d1a6      	bne.n	8080e80 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8080f32:	e0fb      	b.n	808112c <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 8080f34:	0709      	lsls	r1, r1, #28
 8080f36:	d4a3      	bmi.n	8080e80 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
 8080f38:	b14d      	cbz	r5, 8080f4e <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 8080f3a:	2b01      	cmp	r3, #1
 8080f3c:	f47f af5b 	bne.w	8080df6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8080f40:	f7ff fdfd 	bl	8080b3e <_ZN7FatFile11lfnChecksumEPh>
 8080f44:	9b03      	ldr	r3, [sp, #12]
 8080f46:	4283      	cmp	r3, r0
 8080f48:	f47f af55 	bne.w	8080df6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8080f4c:	e00f      	b.n	8080f6e <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8080f4e:	220b      	movs	r2, #11
 8080f50:	9906      	ldr	r1, [sp, #24]
 8080f52:	9307      	str	r3, [sp, #28]
 8080f54:	f003 fbfc 	bl	8084750 <memcmp>
 8080f58:	9b07      	ldr	r3, [sp, #28]
 8080f5a:	2800      	cmp	r0, #0
 8080f5c:	f47f af6e 	bne.w	8080e3c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 8080f60:	f899 2000 	ldrb.w	r2, [r9]
 8080f64:	07d2      	lsls	r2, r2, #31
 8080f66:	d502      	bpl.n	8080f6e <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
 8080f68:	2201      	movs	r2, #1
 8080f6a:	9204      	str	r2, [sp, #16]
 8080f6c:	e766      	b.n	8080e3c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
 8080f6e:	f41b 6f00 	tst.w	fp, #2048	; 0x800
 8080f72:	f000 80d1 	beq.w	8081118 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
 8080f76:	e73e      	b.n	8080df6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
 8080f78:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8080f7c:	f43f af3b 	beq.w	8080df6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8080f80:	f00b 0303 	and.w	r3, fp, #3
 8080f84:	3b01      	subs	r3, #1
 8080f86:	2b01      	cmp	r3, #1
 8080f88:	f63f af35 	bhi.w	8080df6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
 8080f8c:	2c00      	cmp	r4, #0
 8080f8e:	bf08      	it	eq
 8080f90:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 8080f92:	42bc      	cmp	r4, r7
 8080f94:	d302      	bcc.n	8080f9c <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
 8080f96:	9b04      	ldr	r3, [sp, #16]
 8080f98:	b9cb      	cbnz	r3, 8080fce <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
 8080f9a:	e01f      	b.n	8080fdc <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
 8080f9c:	2100      	movs	r1, #0
 8080f9e:	4630      	mov	r0, r6
 8080fa0:	f000 fa11 	bl	80813c6 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8080fa4:	b910      	cbnz	r0, 8080fac <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
 8080fa6:	7873      	ldrb	r3, [r6, #1]
 8080fa8:	b15b      	cbz	r3, 8080fc2 <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
 8080faa:	e724      	b.n	8080df6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
 8080fac:	3401      	adds	r4, #1
 8080fae:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 8080fb0:	e7ef      	b.n	8080f92 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
 8080fb2:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 8080fb4:	791b      	ldrb	r3, [r3, #4]
 8080fb6:	2b01      	cmp	r3, #1
 8080fb8:	d8ed      	bhi.n	8080f96 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
 8080fba:	3410      	adds	r4, #16
 8080fbc:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
 8080fbe:	42a7      	cmp	r7, r4
 8080fc0:	d9e9      	bls.n	8080f96 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
 8080fc2:	4630      	mov	r0, r6
 8080fc4:	f000 f8d2 	bl	808116c <_ZN7FatFile13addDirClusterEv>
 8080fc8:	2800      	cmp	r0, #0
 8080fca:	d1f2      	bne.n	8080fb2 <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
 8080fcc:	e713      	b.n	8080df6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
 8080fce:	4649      	mov	r1, r9
 8080fd0:	4630      	mov	r0, r6
 8080fd2:	f7ff feaf 	bl	8080d34 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 8080fd6:	2800      	cmp	r0, #0
 8080fd8:	f43f af0d 	beq.w	8080df6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
 8080fdc:	ea4f 1148 	mov.w	r1, r8, lsl #5
 8080fe0:	4630      	mov	r0, r6
 8080fe2:	f000 fa0d 	bl	8081400 <_ZN7FatFile7seekSetEm>
 8080fe6:	2800      	cmp	r0, #0
 8080fe8:	f43f af05 	beq.w	8080df6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
 8080fec:	1e7d      	subs	r5, r7, #1
 8080fee:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8080ff0:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8080ff2:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
 8080ff6:	f04f 080f 	mov.w	r8, #15
 8080ffa:	e041      	b.n	8081080 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8080ffc:	2100      	movs	r1, #0
 8080ffe:	4630      	mov	r0, r6
 8081000:	f000 f9e1 	bl	80813c6 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 8081004:	4607      	mov	r7, r0
 8081006:	2800      	cmp	r0, #0
 8081008:	f43f aef5 	beq.w	8080df6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
 808100c:	68b2      	ldr	r2, [r6, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 808100e:	42ac      	cmp	r4, r5
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
 8081010:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8081014:	f043 0301 	orr.w	r3, r3, #1
 8081018:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 808101c:	bf14      	ite	ne
 808101e:	4622      	movne	r2, r4
 8081020:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
 8081024:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
 8081026:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 808102a:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 808102e:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8081032:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8081034:	f7ff fd83 	bl	8080b3e <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8081038:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 808103a:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
 808103c:	f887 a01a 	strb.w	sl, [r7, #26]
 8081040:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8081044:	f002 021f 	and.w	r2, r2, #31
 8081048:	230d      	movs	r3, #13
 808104a:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
 808104c:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8081050:	435a      	muls	r2, r3
 8081052:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8081054:	9902      	ldr	r1, [sp, #8]
 8081056:	4291      	cmp	r1, r2
 8081058:	d915      	bls.n	8081086 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
 808105a:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
 808105e:	2b04      	cmp	r3, #4
 8081060:	fa5f fc83 	uxtb.w	ip, r3
 8081064:	f103 0001 	add.w	r0, r3, #1
 8081068:	d813      	bhi.n	8081092 <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
 808106a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 808106e:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
 8081072:	280d      	cmp	r0, #13
 8081074:	f102 0201 	add.w	r2, r2, #1
 8081078:	4603      	mov	r3, r0
 808107a:	d1eb      	bne.n	8081054 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 808107c:	3c01      	subs	r4, #1
 808107e:	b2e4      	uxtb	r4, r4
 8081080:	2c00      	cmp	r4, #0
 8081082:	d1bb      	bne.n	8080ffc <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
 8081084:	e00e      	b.n	80810a4 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8081086:	bf14      	ite	ne
 8081088:	f04f 31ff 	movne.w	r1, #4294967295
 808108c:	2100      	moveq	r1, #0
 808108e:	b289      	uxth	r1, r1
 8081090:	e7e5      	b.n	808105e <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8081092:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 8081096:	bf94      	ite	ls
 8081098:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 808109c:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
 80810a0:	8099      	strh	r1, [r3, #4]
 80810a2:	e7e6      	b.n	8081072 <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 80810a4:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
 80810a6:	4621      	mov	r1, r4
 80810a8:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 80810aa:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
 80810ae:	f000 f98a 	bl	80813c6 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 80810b2:	4607      	mov	r7, r0
 80810b4:	2800      	cmp	r0, #0
 80810b6:	f43f ae9e 	beq.w	8080df6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
 80810ba:	2220      	movs	r2, #32
 80810bc:	4621      	mov	r1, r4
 80810be:	f003 fb61 	bl	8084784 <memset>
  memcpy(dir->name, fname->sfn, 11);
 80810c2:	464b      	mov	r3, r9
 80810c4:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 80810c8:	603a      	str	r2, [r7, #0]
 80810ca:	685a      	ldr	r2, [r3, #4]
 80810cc:	607a      	str	r2, [r7, #4]
 80810ce:	891a      	ldrh	r2, [r3, #8]
 80810d0:	813a      	strh	r2, [r7, #8]
 80810d2:	7a9b      	ldrb	r3, [r3, #10]
 80810d4:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 80810d6:	f899 3000 	ldrb.w	r3, [r9]
 80810da:	f003 0318 	and.w	r3, r3, #24
 80810de:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
 80810e0:	4b18      	ldr	r3, [pc, #96]	; (8081144 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
 80810e2:	681b      	ldr	r3, [r3, #0]
 80810e4:	b12b      	cbz	r3, 80810f2 <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
 80810e6:	f107 010e 	add.w	r1, r7, #14
 80810ea:	f107 0010 	add.w	r0, r7, #16
 80810ee:	4798      	blx	r3
 80810f0:	e006      	b.n	8081100 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
 80810f2:	2321      	movs	r3, #33	; 0x21
 80810f4:	743b      	strb	r3, [r7, #16]
 80810f6:	2328      	movs	r3, #40	; 0x28
 80810f8:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 80810fa:	2308      	movs	r3, #8
 80810fc:	73bc      	strb	r4, [r7, #14]
 80810fe:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
 8081100:	8a3b      	ldrh	r3, [r7, #16]
 8081102:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
 8081104:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
 8081106:	89fb      	ldrh	r3, [r7, #14]
 8081108:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
 808110a:	68b2      	ldr	r2, [r6, #8]
 808110c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8081110:	f043 0301 	orr.w	r3, r3, #1
 8081114:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8081118:	9500      	str	r5, [sp, #0]
 808111a:	465b      	mov	r3, fp
 808111c:	4652      	mov	r2, sl
 808111e:	4631      	mov	r1, r6
 8081120:	9805      	ldr	r0, [sp, #20]
 8081122:	f000 f9b6 	bl	8081492 <_ZN7FatFile15openCachedEntryEPS_tih>
 8081126:	e009      	b.n	808113c <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8081128:	2701      	movs	r7, #1
 808112a:	e677      	b.n	8080e1c <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
 808112c:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
 8081130:	f1be 0f0d 	cmp.w	lr, #13
 8081134:	f43f ae82 	beq.w	8080e3c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8081138:	46d4      	mov	ip, sl
 808113a:	e6c3      	b.n	8080ec4 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
 808113c:	b009      	add	sp, #36	; 0x24
 808113e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081142:	bf00      	nop
 8081144:	20000cac 	.word	0x20000cac

08081148 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 8081148:	f001 baf2 	b.w	8082730 <HAL_Pin_Map>

0808114c <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 808114c:	f001 baf0 	b.w	8082730 <HAL_Pin_Map>

08081150 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 8081150:	f001 baee 	b.w	8082730 <HAL_Pin_Map>

08081154 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 8081154:	f001 baec 	b.w	8082730 <HAL_Pin_Map>

08081158 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8081158:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 808115a:	f100 0210 	add.w	r2, r0, #16
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 808115e:	f043 0304 	orr.w	r3, r3, #4
 8081162:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8081164:	6901      	ldr	r1, [r0, #16]
 8081166:	6880      	ldr	r0, [r0, #8]
 8081168:	f000 bc24 	b.w	80819b4 <_ZN9FatVolume15allocateClusterEmPm>

0808116c <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 808116c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8081170:	7803      	ldrb	r3, [r0, #0]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8081172:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8081174:	f003 0320 	and.w	r3, r3, #32
 8081178:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 808117c:	b10b      	cbz	r3, 8081182 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 808117e:	2600      	movs	r6, #0
 8081180:	e02e      	b.n	80811e0 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
 8081182:	6942      	ldr	r2, [r0, #20]
 8081184:	4b18      	ldr	r3, [pc, #96]	; (80811e8 <_ZN7FatFile13addDirClusterEv+0x7c>)
 8081186:	429a      	cmp	r2, r3
 8081188:	d8f9      	bhi.n	808117e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
 808118a:	f7ff ffe5 	bl	8081158 <_ZN7FatFile10addClusterEv>
 808118e:	4606      	mov	r6, r0
 8081190:	2800      	cmp	r0, #0
 8081192:	d0f4      	beq.n	808117e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
 8081194:	6921      	ldr	r1, [r4, #16]
 8081196:	68a0      	ldr	r0, [r4, #8]
 8081198:	f000 fba1 	bl	80818de <_ZNK9FatVolume17clusterFirstBlockEm>
 808119c:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 808119e:	68a0      	ldr	r0, [r4, #8]
 80811a0:	2205      	movs	r2, #5
 80811a2:	4639      	mov	r1, r7
 80811a4:	3024      	adds	r0, #36	; 0x24
 80811a6:	f000 fb76 	bl	8081896 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
 80811aa:	4680      	mov	r8, r0
 80811ac:	2800      	cmp	r0, #0
 80811ae:	d0e6      	beq.n	808117e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
 80811b0:	4629      	mov	r1, r5
 80811b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80811b6:	f003 fae5 	bl	8084784 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80811ba:	2501      	movs	r5, #1
 80811bc:	68a3      	ldr	r3, [r4, #8]
 80811be:	791a      	ldrb	r2, [r3, #4]
 80811c0:	42aa      	cmp	r2, r5
 80811c2:	d909      	bls.n	80811d8 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 80811c4:	4642      	mov	r2, r8
 80811c6:	19e9      	adds	r1, r5, r7
 80811c8:	6818      	ldr	r0, [r3, #0]
 80811ca:	f000 fee1 	bl	8081f90 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 80811ce:	2800      	cmp	r0, #0
 80811d0:	d0d5      	beq.n	808117e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80811d2:	3501      	adds	r5, #1
 80811d4:	b2ed      	uxtb	r5, r5
 80811d6:	e7f1      	b.n	80811bc <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 80811d8:	6963      	ldr	r3, [r4, #20]
 80811da:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 80811de:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
 80811e0:	4630      	mov	r0, r6
 80811e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80811e6:	bf00      	nop
 80811e8:	001ffdff 	.word	0x001ffdff

080811ec <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 80811ec:	b510      	push	{r4, lr}
 80811ee:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80811f0:	6880      	ldr	r0, [r0, #8]
 80811f2:	460a      	mov	r2, r1
 80811f4:	3024      	adds	r0, #36	; 0x24
 80811f6:	69a1      	ldr	r1, [r4, #24]
 80811f8:	f000 fb4d 	bl	8081896 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 80811fc:	b120      	cbz	r0, 8081208 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 80811fe:	88a3      	ldrh	r3, [r4, #4]
 8081200:	f003 030f 	and.w	r3, r3, #15
 8081204:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 8081208:	bd10      	pop	{r4, pc}

0808120a <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 808120a:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 808120c:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 808120e:	4605      	mov	r5, r0
 8081210:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
 8081212:	b984      	cbnz	r4, 8081236 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 8081214:	2224      	movs	r2, #36	; 0x24
 8081216:	4621      	mov	r1, r4
 8081218:	f003 fab4 	bl	8084784 <memset>

  m_vol = vol;
 808121c:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 808121e:	79f3      	ldrb	r3, [r6, #7]
 8081220:	2b10      	cmp	r3, #16
 8081222:	d003      	beq.n	808122c <_ZN7FatFile8openRootEP9FatVolume+0x22>
 8081224:	2b20      	cmp	r3, #32
 8081226:	d106      	bne.n	8081236 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8081228:	2340      	movs	r3, #64	; 0x40
 808122a:	e000      	b.n	808122e <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
 808122c:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
 808122e:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8081230:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
 8081232:	70a8      	strb	r0, [r5, #2]
 8081234:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
 8081236:	2000      	movs	r0, #0
 8081238:	bd70      	pop	{r4, r5, r6, pc}

0808123a <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 808123a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808123e:	7803      	ldrb	r3, [r0, #0]
 8081240:	4604      	mov	r4, r0
 8081242:	4689      	mov	r9, r1
 8081244:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
 8081246:	b14b      	cbz	r3, 808125c <_ZN7FatFile4readEPvj+0x22>
 8081248:	7882      	ldrb	r2, [r0, #2]
 808124a:	07d1      	lsls	r1, r2, #31
 808124c:	d506      	bpl.n	808125c <_ZN7FatFile4readEPvj+0x22>
 808124e:	e00c      	b.n	808126a <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8081250:	465a      	mov	r2, fp
 8081252:	6921      	ldr	r1, [r4, #16]
 8081254:	f000 fb49 	bl	80818ea <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 8081258:	2800      	cmp	r0, #0
 808125a:	da3d      	bge.n	80812d8 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 808125c:	7863      	ldrb	r3, [r4, #1]
  return -1;
 808125e:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8081262:	f043 0302 	orr.w	r3, r3, #2
 8081266:	7063      	strb	r3, [r4, #1]
  return -1;
 8081268:	e097      	b.n	808139a <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 808126a:	071a      	lsls	r2, r3, #28
 808126c:	d503      	bpl.n	8081276 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 808126e:	69e3      	ldr	r3, [r4, #28]
 8081270:	6962      	ldr	r2, [r4, #20]
 8081272:	1a9b      	subs	r3, r3, r2
 8081274:	e007      	b.n	8081286 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
 8081276:	069a      	lsls	r2, r3, #26
 8081278:	d508      	bpl.n	808128c <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 808127a:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
 808127c:	891a      	ldrh	r2, [r3, #8]
 808127e:	6963      	ldr	r3, [r4, #20]
 8081280:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 8081284:	b29b      	uxth	r3, r3
 8081286:	429d      	cmp	r5, r3
 8081288:	bf28      	it	cs
 808128a:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 808128c:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
 808128e:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8081292:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 8081296:	2e00      	cmp	r6, #0
 8081298:	d035      	beq.n	8081306 <_ZN7FatFile4readEPvj+0xcc>
 808129a:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 808129c:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 808129e:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 80812a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80812a6:	68a0      	ldr	r0, [r4, #8]
 80812a8:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 80812ac:	d002      	beq.n	80812b4 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 80812ae:	6a03      	ldr	r3, [r0, #32]
 80812b0:	4419      	add	r1, r3
 80812b2:	e01d      	b.n	80812f0 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 80812b4:	f890 8005 	ldrb.w	r8, [r0, #5]
 80812b8:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
 80812bc:	f1ba 0f00 	cmp.w	sl, #0
 80812c0:	d110      	bne.n	80812e4 <_ZN7FatFile4readEPvj+0xaa>
 80812c2:	f1b8 0f00 	cmp.w	r8, #0
 80812c6:	d10d      	bne.n	80812e4 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
 80812c8:	2b00      	cmp	r3, #0
 80812ca:	d1c1      	bne.n	8081250 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 80812cc:	0653      	lsls	r3, r2, #25
 80812ce:	bf4c      	ite	mi
 80812d0:	6a03      	ldrmi	r3, [r0, #32]
 80812d2:	6a23      	ldrpl	r3, [r4, #32]
 80812d4:	6123      	str	r3, [r4, #16]
 80812d6:	e005      	b.n	80812e4 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
 80812d8:	d104      	bne.n	80812e4 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
 80812da:	7823      	ldrb	r3, [r4, #0]
 80812dc:	f013 0f70 	tst.w	r3, #112	; 0x70
 80812e0:	d111      	bne.n	8081306 <_ZN7FatFile4readEPvj+0xcc>
 80812e2:	e7bb      	b.n	808125c <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 80812e4:	6921      	ldr	r1, [r4, #16]
 80812e6:	68a0      	ldr	r0, [r4, #8]
 80812e8:	f000 faf9 	bl	80818de <_ZNK9FatVolume17clusterFirstBlockEm>
 80812ec:	eb08 0100 	add.w	r1, r8, r0
 80812f0:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 80812f2:	f1ba 0f00 	cmp.w	sl, #0
 80812f6:	d135      	bne.n	8081364 <_ZN7FatFile4readEPvj+0x12a>
 80812f8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80812fc:	d332      	bcc.n	8081364 <_ZN7FatFile4readEPvj+0x12a>
 80812fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8081300:	4299      	cmp	r1, r3
 8081302:	d102      	bne.n	808130a <_ZN7FatFile4readEPvj+0xd0>
 8081304:	e02e      	b.n	8081364 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
 8081306:	1ba8      	subs	r0, r5, r6
 8081308:	e047      	b.n	808139a <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 808130a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 808130e:	d31b      	bcc.n	8081348 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
 8081310:	7822      	ldrb	r2, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
 8081312:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
 8081316:	0697      	lsls	r7, r2, #26
 8081318:	d406      	bmi.n	8081328 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
 808131a:	7902      	ldrb	r2, [r0, #4]
 808131c:	ebc8 0202 	rsb	r2, r8, r2
 8081320:	b2d2      	uxtb	r2, r2
 8081322:	4592      	cmp	sl, r2
 8081324:	bf28      	it	cs
 8081326:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8081328:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
 808132a:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 808132e:	d207      	bcs.n	8081340 <_ZN7FatFile4readEPvj+0x106>
 8081330:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
 8081332:	4653      	mov	r3, sl
 8081334:	464a      	mov	r2, r9
 8081336:	6800      	ldr	r0, [r0, #0]
 8081338:	f000 fde8 	bl	8081f0c <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
 808133c:	b960      	cbnz	r0, 8081358 <_ZN7FatFile4readEPvj+0x11e>
 808133e:	e78d      	b.n	808125c <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8081340:	4453      	add	r3, sl
 8081342:	4299      	cmp	r1, r3
 8081344:	d321      	bcc.n	808138a <_ZN7FatFile4readEPvj+0x150>
 8081346:	e7f3      	b.n	8081330 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
 8081348:	464a      	mov	r2, r9
 808134a:	6800      	ldr	r0, [r0, #0]
 808134c:	f000 fd96 	bl	8081e7c <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 8081350:	2800      	cmp	r0, #0
 8081352:	d083      	beq.n	808125c <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
 8081354:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
 8081358:	6963      	ldr	r3, [r4, #20]
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
 808135a:	44b9      	add	r9, r7
    m_curPosition += n;
 808135c:	443b      	add	r3, r7
 808135e:	6163      	str	r3, [r4, #20]
    toRead -= n;
 8081360:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 8081362:	e798      	b.n	8081296 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8081364:	2200      	movs	r2, #0
 8081366:	3024      	adds	r0, #36	; 0x24
 8081368:	f000 fa95 	bl	8081896 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
 808136c:	2800      	cmp	r0, #0
 808136e:	f43f af75 	beq.w	808125c <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
 8081372:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 8081376:	42b7      	cmp	r7, r6
 8081378:	bf28      	it	cs
 808137a:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
 808137c:	eb00 010a 	add.w	r1, r0, sl
 8081380:	463a      	mov	r2, r7
 8081382:	4648      	mov	r0, r9
 8081384:	f003 f9f3 	bl	808476e <memcpy>
 8081388:	e7e6      	b.n	8081358 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 808138a:	3024      	adds	r0, #36	; 0x24
 808138c:	9101      	str	r1, [sp, #4]
 808138e:	f000 fa5b 	bl	8081848 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
 8081392:	9901      	ldr	r1, [sp, #4]
 8081394:	2800      	cmp	r0, #0
 8081396:	d1cb      	bne.n	8081330 <_ZN7FatFile4readEPvj+0xf6>
 8081398:	e760      	b.n	808125c <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
 808139a:	b003      	add	sp, #12
 808139c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080813a0 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
 80813a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 80813a2:	2201      	movs	r2, #1
 80813a4:	f10d 0107 	add.w	r1, sp, #7
 80813a8:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
 80813aa:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
 80813ac:	6905      	ldr	r5, [r0, #16]
 80813ae:	f7ff ff44 	bl	808123a <_ZN7FatFile4readEPvj>
 80813b2:	2801      	cmp	r0, #1
 80813b4:	bf09      	itett	eq
 80813b6:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 80813ba:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
 80813be:	6166      	streq	r6, [r4, #20]
  m_curCluster = pos->cluster;
 80813c0:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
 80813c2:	b002      	add	sp, #8
 80813c4:	bd70      	pop	{r4, r5, r6, pc}

080813c6 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80813c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80813c8:	6943      	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80813ca:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80813cc:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
 80813d0:	b105      	cbz	r5, 80813d4 <_ZN7FatFile12readDirCacheEb+0xe>
 80813d2:	b969      	cbnz	r1, 80813f0 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
 80813d4:	2201      	movs	r2, #1
 80813d6:	f10d 0107 	add.w	r1, sp, #7
 80813da:	4620      	mov	r0, r4
 80813dc:	f7ff ff2d 	bl	808123a <_ZN7FatFile4readEPvj>
 80813e0:	b240      	sxtb	r0, r0
    if  (n != 1) {
 80813e2:	2801      	cmp	r0, #1
 80813e4:	d001      	beq.n	80813ea <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
 80813e6:	2000      	movs	r0, #0
 80813e8:	e008      	b.n	80813fc <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
 80813ea:	6963      	ldr	r3, [r4, #20]
 80813ec:	331f      	adds	r3, #31
 80813ee:	e000      	b.n	80813f2 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
 80813f0:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 80813f2:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
 80813f4:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 80813f6:	3030      	adds	r0, #48	; 0x30
 80813f8:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
 80813fc:	b003      	add	sp, #12
 80813fe:	bd30      	pop	{r4, r5, pc}

08081400 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 8081400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081404:	460e      	mov	r6, r1
 8081406:	7801      	ldrb	r1, [r0, #0]
 8081408:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 808140a:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 808140c:	2900      	cmp	r1, #0
 808140e:	d039      	beq.n	8081484 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 8081410:	6945      	ldr	r5, [r0, #20]
 8081412:	42b5      	cmp	r5, r6
 8081414:	d03a      	beq.n	808148c <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
 8081416:	b90e      	cbnz	r6, 808141c <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
 8081418:	6106      	str	r6, [r0, #16]
    goto done;
 808141a:	e031      	b.n	8081480 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
 808141c:	070b      	lsls	r3, r1, #28
 808141e:	d503      	bpl.n	8081428 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
 8081420:	69c3      	ldr	r3, [r0, #28]
 8081422:	429e      	cmp	r6, r3
 8081424:	d82e      	bhi.n	8081484 <_ZN7FatFile7seekSetEm+0x84>
 8081426:	e007      	b.n	8081438 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
 8081428:	0688      	lsls	r0, r1, #26
 808142a:	d505      	bpl.n	8081438 <_ZN7FatFile7seekSetEm+0x38>
 808142c:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 808142e:	891b      	ldrh	r3, [r3, #8]
 8081430:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 8081434:	d826      	bhi.n	8081484 <_ZN7FatFile7seekSetEm+0x84>
 8081436:	e023      	b.n	8081480 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8081438:	f8d4 e008 	ldr.w	lr, [r4, #8]
 808143c:	1e6a      	subs	r2, r5, #1
 808143e:	f89e 3006 	ldrb.w	r3, [lr, #6]
 8081442:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8081446:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8081448:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 808144a:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
 808144c:	429a      	cmp	r2, r3
 808144e:	d800      	bhi.n	8081452 <_ZN7FatFile7seekSetEm+0x52>
 8081450:	b94d      	cbnz	r5, 8081466 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8081452:	064a      	lsls	r2, r1, #25
 8081454:	bf4c      	ite	mi
 8081456:	f8de 2020 	ldrmi.w	r2, [lr, #32]
 808145a:	6a22      	ldrpl	r2, [r4, #32]
 808145c:	6122      	str	r2, [r4, #16]
 808145e:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8081460:	f104 0810 	add.w	r8, r4, #16
 8081464:	e00a      	b.n	808147c <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
 8081466:	1a9b      	subs	r3, r3, r2
 8081468:	e7f9      	b.n	808145e <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 808146a:	4642      	mov	r2, r8
 808146c:	6921      	ldr	r1, [r4, #16]
 808146e:	68a0      	ldr	r0, [r4, #8]
 8081470:	f000 fa3b 	bl	80818ea <_ZN9FatVolume6fatGetEmPm>
 8081474:	2800      	cmp	r0, #0
 8081476:	f105 35ff 	add.w	r5, r5, #4294967295
 808147a:	dd03      	ble.n	8081484 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
 808147c:	2d00      	cmp	r5, #0
 808147e:	d1f4      	bne.n	808146a <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 8081480:	6166      	str	r6, [r4, #20]
 8081482:	e003      	b.n	808148c <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
 8081484:	6127      	str	r7, [r4, #16]
  return false;
 8081486:	2000      	movs	r0, #0
 8081488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
 808148c:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
 808148e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081492 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
 8081492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081494:	460f      	mov	r7, r1
 8081496:	4604      	mov	r4, r0
 8081498:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 808149a:	2100      	movs	r1, #0
 808149c:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
 808149e:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 80814a0:	f003 f970 	bl	8084784 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
 80814a4:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 80814a6:	80a5      	strh	r5, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
 80814a8:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 80814aa:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 80814ac:	f005 020f 	and.w	r2, r5, #15
 80814b0:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80814b4:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 80814b6:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 80814b8:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 80814ba:	7acb      	ldrb	r3, [r1, #11]
 80814bc:	071d      	lsls	r5, r3, #28
 80814be:	d44c      	bmi.n	808155a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
 80814c0:	1883      	adds	r3, r0, r2
 80814c2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80814c6:	f003 0317 	and.w	r3, r3, #23
 80814ca:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 80814cc:	7ac9      	ldrb	r1, [r1, #11]
 80814ce:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
 80814d2:	bf04      	itt	eq
 80814d4:	f043 0308 	orreq.w	r3, r3, #8
 80814d8:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
 80814da:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80814de:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
 80814e0:	f006 0303 	and.w	r3, r6, #3
 80814e4:	2b01      	cmp	r3, #1
 80814e6:	d009      	beq.n	80814fc <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
 80814e8:	2b02      	cmp	r3, #2
 80814ea:	d005      	beq.n	80814f8 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
 80814ec:	2b00      	cmp	r3, #0
 80814ee:	d134      	bne.n	808155a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
 80814f0:	0571      	lsls	r1, r6, #21
 80814f2:	d432      	bmi.n	808155a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
 80814f4:	2301      	movs	r3, #1
 80814f6:	e002      	b.n	80814fe <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
 80814f8:	2303      	movs	r3, #3
 80814fa:	e000      	b.n	80814fe <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
 80814fc:	2302      	movs	r3, #2
 80814fe:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
 8081500:	78a1      	ldrb	r1, [r4, #2]
 8081502:	078b      	lsls	r3, r1, #30
 8081504:	d503      	bpl.n	808150e <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
 8081506:	7823      	ldrb	r3, [r4, #0]
 8081508:	f013 0f11 	tst.w	r3, #17
 808150c:	d125      	bne.n	808155a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
 808150e:	b24b      	sxtb	r3, r1
 8081510:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8081514:	f006 0108 	and.w	r1, r6, #8
 8081518:	bf14      	ite	ne
 808151a:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
 808151e:	2700      	moveq	r7, #0
 8081520:	4319      	orrs	r1, r3
 8081522:	4339      	orrs	r1, r7
 8081524:	70a1      	strb	r1, [r4, #2]
 8081526:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8081528:	4402      	add	r2, r0
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);

  m_dirBlock = m_vol->cacheBlockNumber();
 808152a:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 808152c:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
 8081530:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a

  if (oflag & O_TRUNC) {
 8081534:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 8081536:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
 808153a:	d504      	bpl.n	8081546 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 808153c:	b181      	cbz	r1, 8081560 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
 808153e:	f000 fa74 	bl	8081a2a <_ZN9FatVolume9freeChainEm>
 8081542:	b968      	cbnz	r0, 8081560 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
 8081544:	e009      	b.n	808155a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
 8081546:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 8081548:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 808154a:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 808154c:	0473      	lsls	r3, r6, #17
 808154e:	d50c      	bpl.n	808156a <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
 8081550:	69e1      	ldr	r1, [r4, #28]
 8081552:	4620      	mov	r0, r4
 8081554:	f7ff ff54 	bl	8081400 <_ZN7FatFile7seekSetEm>
 8081558:	b938      	cbnz	r0, 808156a <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
 808155a:	2000      	movs	r0, #0
 808155c:	7020      	strb	r0, [r4, #0]
  return false;
 808155e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
 8081560:	78a3      	ldrb	r3, [r4, #2]
 8081562:	f043 0304 	orr.w	r3, r3, #4
 8081566:	70a3      	strb	r3, [r4, #2]
 8081568:	e7f0      	b.n	808154c <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
 808156a:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
 808156c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08081570 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8081570:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 8081572:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8081574:	4604      	mov	r4, r0
  if (!isOpen()) {
 8081576:	b90b      	cbnz	r3, 808157c <_ZN7FatFile4syncEv+0xc>
    return true;
 8081578:	2001      	movs	r0, #1
 808157a:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
 808157c:	7883      	ldrb	r3, [r0, #2]
 808157e:	075a      	lsls	r2, r3, #29
 8081580:	d523      	bpl.n	80815ca <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 8081582:	2101      	movs	r1, #1
 8081584:	f7ff fe32 	bl	80811ec <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8081588:	4605      	mov	r5, r0
 808158a:	b928      	cbnz	r0, 8081598 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 808158c:	7863      	ldrb	r3, [r4, #1]
  return false;
 808158e:	2000      	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 8081590:	f043 0301 	orr.w	r3, r3, #1
 8081594:	7063      	strb	r3, [r4, #1]
 8081596:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8081598:	7803      	ldrb	r3, [r0, #0]
 808159a:	2be5      	cmp	r3, #229	; 0xe5
 808159c:	d0f6      	beq.n	808158c <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
 808159e:	7823      	ldrb	r3, [r4, #0]
 80815a0:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 80815a2:	bf44      	itt	mi
 80815a4:	69e3      	ldrmi	r3, [r4, #28]
 80815a6:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 80815a8:	8c23      	ldrh	r3, [r4, #32]
 80815aa:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 80815ac:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80815ae:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
 80815b0:	4b09      	ldr	r3, [pc, #36]	; (80815d8 <_ZN7FatFile4syncEv+0x68>)
 80815b2:	681b      	ldr	r3, [r3, #0]
 80815b4:	b12b      	cbz	r3, 80815c2 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 80815b6:	f100 0116 	add.w	r1, r0, #22
 80815ba:	3018      	adds	r0, #24
 80815bc:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 80815be:	8b2b      	ldrh	r3, [r5, #24]
 80815c0:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
 80815c2:	78a3      	ldrb	r3, [r4, #2]
 80815c4:	f023 0304 	bic.w	r3, r3, #4
 80815c8:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
 80815ca:	68a0      	ldr	r0, [r4, #8]
 80815cc:	f7ff faaa 	bl	8080b24 <_ZN9FatVolume9cacheSyncEv>
 80815d0:	2800      	cmp	r0, #0
 80815d2:	d0db      	beq.n	808158c <_ZN7FatFile4syncEv+0x1c>
 80815d4:	e7d0      	b.n	8081578 <_ZN7FatFile4syncEv+0x8>
 80815d6:	bf00      	nop
 80815d8:	20000cac 	.word	0x20000cac

080815dc <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
 80815dc:	b510      	push	{r4, lr}
 80815de:	4604      	mov	r4, r0
  bool rtn = sync();
 80815e0:	f7ff ffc6 	bl	8081570 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 80815e4:	2300      	movs	r3, #0
 80815e6:	7023      	strb	r3, [r4, #0]
  return rtn;
}
 80815e8:	bd10      	pop	{r4, pc}

080815ea <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 80815ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80815ec:	461f      	mov	r7, r3
 80815ee:	b093      	sub	sp, #76	; 0x4c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80815f0:	2300      	movs	r3, #0
 80815f2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80815f6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 80815fa:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 80815fc:	4606      	mov	r6, r0
 80815fe:	460c      	mov	r4, r1
 8081600:	9201      	str	r2, [sp, #4]
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8081602:	b10b      	cbz	r3, 8081608 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
 8081604:	2000      	movs	r0, #0
 8081606:	e03d      	b.n	8081684 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8081608:	780b      	ldrb	r3, [r1, #0]
 808160a:	f013 0f70 	tst.w	r3, #112	; 0x70
 808160e:	d0f9      	beq.n	8081604 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
 8081610:	7813      	ldrb	r3, [r2, #0]
 8081612:	2b2f      	cmp	r3, #47	; 0x2f
 8081614:	d112      	bne.n	808163c <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
 8081616:	9b01      	ldr	r3, [sp, #4]
 8081618:	781a      	ldrb	r2, [r3, #0]
 808161a:	2a2f      	cmp	r2, #47	; 0x2f
 808161c:	d102      	bne.n	8081624 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
 808161e:	3301      	adds	r3, #1
 8081620:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
 8081622:	e7f8      	b.n	8081616 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
 8081624:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
 8081626:	b91a      	cbnz	r2, 8081630 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
 8081628:	4630      	mov	r0, r6
 808162a:	f7ff fdee 	bl	808120a <_ZN7FatFile8openRootEP9FatVolume>
 808162e:	e029      	b.n	8081684 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 8081630:	a809      	add	r0, sp, #36	; 0x24
 8081632:	f7ff fdea 	bl	808120a <_ZN7FatFile8openRootEP9FatVolume>
 8081636:	2800      	cmp	r0, #0
 8081638:	d0e4      	beq.n	8081604 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
 808163a:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
 808163c:	aa01      	add	r2, sp, #4
 808163e:	a903      	add	r1, sp, #12
 8081640:	9801      	ldr	r0, [sp, #4]
 8081642:	f7ff fa8b 	bl	8080b5c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 8081646:	2800      	cmp	r0, #0
 8081648:	d0dc      	beq.n	8081604 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
 808164a:	9b01      	ldr	r3, [sp, #4]
 808164c:	781b      	ldrb	r3, [r3, #0]
 808164e:	b19b      	cbz	r3, 8081678 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
 8081650:	2300      	movs	r3, #0
 8081652:	aa03      	add	r2, sp, #12
 8081654:	4621      	mov	r1, r4
 8081656:	4630      	mov	r0, r6
 8081658:	f7ff fbc2 	bl	8080de0 <_ZN7FatFile4openEPS_P7fname_ti>
 808165c:	2800      	cmp	r0, #0
 808165e:	d0d1      	beq.n	8081604 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 8081660:	4635      	mov	r5, r6
 8081662:	ac09      	add	r4, sp, #36	; 0x24
 8081664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8081666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8081668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808166a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808166c:	682b      	ldr	r3, [r5, #0]
    dirFile = &tmpDir;
    close();
 808166e:	4630      	mov	r0, r6
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 8081670:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
 8081672:	f7ff ffb3 	bl	80815dc <_ZN7FatFile5closeEv>
 8081676:	e7e0      	b.n	808163a <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
 8081678:	463b      	mov	r3, r7
 808167a:	aa03      	add	r2, sp, #12
 808167c:	4621      	mov	r1, r4
 808167e:	4630      	mov	r0, r6
 8081680:	f7ff fbae 	bl	8080de0 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
 8081684:	b013      	add	sp, #76	; 0x4c
 8081686:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081688 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8081688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 808168c:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 808168e:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 8081690:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8081692:	4604      	mov	r4, r0
 8081694:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 8081696:	d508      	bpl.n	80816aa <_ZN7FatFile5writeEPKvj+0x22>
 8081698:	7883      	ldrb	r3, [r0, #2]
 808169a:	079a      	lsls	r2, r3, #30
 808169c:	d505      	bpl.n	80816aa <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
 808169e:	071b      	lsls	r3, r3, #28
 80816a0:	d50b      	bpl.n	80816ba <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
 80816a2:	69e1      	ldr	r1, [r4, #28]
 80816a4:	f7ff feac 	bl	8081400 <_ZN7FatFile7seekSetEm>
 80816a8:	b938      	cbnz	r0, 80816ba <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 80816aa:	7863      	ldrb	r3, [r4, #1]
  return -1;
 80816ac:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 80816b0:	f043 0301 	orr.w	r3, r3, #1
 80816b4:	7063      	strb	r3, [r4, #1]
  return -1;
 80816b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 80816ba:	6963      	ldr	r3, [r4, #20]
 80816bc:	43db      	mvns	r3, r3
 80816be:	4598      	cmp	r8, r3
 80816c0:	d8f3      	bhi.n	80816aa <_ZN7FatFile5writeEPKvj+0x22>
 80816c2:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80816c4:	f04f 0a00 	mov.w	sl, #0
 80816c8:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 80816ca:	2e00      	cmp	r6, #0
 80816cc:	d07f      	beq.n	80817ce <_ZN7FatFile5writeEPKvj+0x146>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 80816ce:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 80816d0:	f3c3 0708 	ubfx	r7, r3, #0, #9
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 80816d4:	7942      	ldrb	r2, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 80816d6:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
 80816da:	d11c      	bne.n	8081716 <_ZN7FatFile5writeEPKvj+0x8e>
 80816dc:	b9df      	cbnz	r7, 8081716 <_ZN7FatFile5writeEPKvj+0x8e>
      // start of new cluster
      if (m_curCluster != 0) {
 80816de:	6921      	ldr	r1, [r4, #16]
 80816e0:	b171      	cbz	r1, 8081700 <_ZN7FatFile5writeEPKvj+0x78>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80816e2:	f104 0210 	add.w	r2, r4, #16
 80816e6:	f000 f900 	bl	80818ea <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 80816ea:	2800      	cmp	r0, #0
 80816ec:	dbdd      	blt.n	80816aa <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 80816ee:	f040 808d 	bne.w	808180c <_ZN7FatFile5writeEPKvj+0x184>
          // add cluster if at end of chain
          if (!addCluster()) {
 80816f2:	4620      	mov	r0, r4
 80816f4:	f7ff fd30 	bl	8081158 <_ZN7FatFile10addClusterEv>
 80816f8:	2800      	cmp	r0, #0
 80816fa:	f040 8087 	bne.w	808180c <_ZN7FatFile5writeEPKvj+0x184>
 80816fe:	e7d4      	b.n	80816aa <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
 8081700:	6a23      	ldr	r3, [r4, #32]
 8081702:	b93b      	cbnz	r3, 8081714 <_ZN7FatFile5writeEPKvj+0x8c>
          // allocate first cluster of file
          if (!addCluster()) {
 8081704:	4620      	mov	r0, r4
 8081706:	f7ff fd27 	bl	8081158 <_ZN7FatFile10addClusterEv>
 808170a:	2800      	cmp	r0, #0
 808170c:	d0cd      	beq.n	80816aa <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
 808170e:	6923      	ldr	r3, [r4, #16]
 8081710:	6223      	str	r3, [r4, #32]
 8081712:	e000      	b.n	8081716 <_ZN7FatFile5writeEPKvj+0x8e>
        } else {
          m_curCluster = m_firstCluster;
 8081714:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 8081716:	6921      	ldr	r1, [r4, #16]
 8081718:	68a0      	ldr	r0, [r4, #8]
 808171a:	f000 f8e0 	bl	80818de <_ZNK9FatVolume17clusterFirstBlockEm>
 808171e:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
 8081720:	b917      	cbnz	r7, 8081728 <_ZN7FatFile5writeEPKvj+0xa0>
 8081722:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8081726:	d221      	bcs.n	808176c <_ZN7FatFile5writeEPKvj+0xe4>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 8081728:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
 808172c:	42b5      	cmp	r5, r6
 808172e:	bf28      	it	cs
 8081730:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 8081732:	b937      	cbnz	r7, 8081742 <_ZN7FatFile5writeEPKvj+0xba>
 8081734:	6963      	ldr	r3, [r4, #20]
 8081736:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 8081738:	4293      	cmp	r3, r2
 808173a:	bf34      	ite	cc
 808173c:	2201      	movcc	r2, #1
 808173e:	2205      	movcs	r2, #5
 8081740:	e000      	b.n	8081744 <_ZN7FatFile5writeEPKvj+0xbc>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
 8081742:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8081744:	68a0      	ldr	r0, [r4, #8]
 8081746:	3024      	adds	r0, #36	; 0x24
 8081748:	f000 f8a5 	bl	8081896 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 808174c:	2800      	cmp	r0, #0
 808174e:	d0ac      	beq.n	80816aa <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8081750:	4438      	add	r0, r7
 8081752:	462a      	mov	r2, r5
 8081754:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 8081756:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8081758:	f003 f809 	bl	808476e <memcpy>
      if (512 == (n + blockOffset)) {
 808175c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8081760:	d12f      	bne.n	80817c2 <_ZN7FatFile5writeEPKvj+0x13a>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 8081762:	68a0      	ldr	r0, [r4, #8]
 8081764:	3024      	adds	r0, #36	; 0x24
 8081766:	f000 f86f 	bl	8081848 <_ZN8FatCache4syncEv>
 808176a:	e016      	b.n	808179a <_ZN7FatFile5writeEPKvj+0x112>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
 808176c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8081770:	68a0      	ldr	r0, [r4, #8]
 8081772:	d314      	bcc.n	808179e <_ZN7FatFile5writeEPKvj+0x116>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
 8081774:	7902      	ldrb	r2, [r0, #4]
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
 8081776:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
 8081778:	1b52      	subs	r2, r2, r5
 808177a:	b2d2      	uxtb	r2, r2
 808177c:	4293      	cmp	r3, r2
 808177e:	bf28      	it	cs
 8081780:	4613      	movcs	r3, r2
 8081782:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
 8081784:	025d      	lsls	r5, r3, #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8081786:	4291      	cmp	r1, r2
 8081788:	d302      	bcc.n	8081790 <_ZN7FatFile5writeEPKvj+0x108>
 808178a:	441a      	add	r2, r3
 808178c:	4291      	cmp	r1, r2
 808178e:	d337      	bcc.n	8081800 <_ZN7FatFile5writeEPKvj+0x178>
 8081790:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
 8081792:	464a      	mov	r2, r9
 8081794:	6838      	ldr	r0, [r7, #0]
 8081796:	f000 fc6d 	bl	8082074 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
 808179a:	b990      	cbnz	r0, 80817c2 <_ZN7FatFile5writeEPKvj+0x13a>
 808179c:	e785      	b.n	80816aa <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
 808179e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 80817a0:	464a      	mov	r2, r9
 80817a2:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 80817a4:	bf02      	ittt	eq
 80817a6:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80817aa:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 80817ae:	62c3      	streq	r3, [r0, #44]	; 0x2c
 80817b0:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 80817b2:	6818      	ldr	r0, [r3, #0]
 80817b4:	f000 fbec 	bl	8081f90 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
 80817b8:	2800      	cmp	r0, #0
 80817ba:	f43f af76 	beq.w	80816aa <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
 80817be:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 80817c2:	6963      	ldr	r3, [r4, #20]
    src += n;
 80817c4:	44a9      	add	r9, r5
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 80817c6:	442b      	add	r3, r5
 80817c8:	6163      	str	r3, [r4, #20]
    src += n;
    nToWrite -= n;
 80817ca:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 80817cc:	e77c      	b.n	80816c8 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
 80817ce:	69e2      	ldr	r2, [r4, #28]
 80817d0:	4293      	cmp	r3, r2
 80817d2:	d901      	bls.n	80817d8 <_ZN7FatFile5writeEPKvj+0x150>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
 80817d4:	61e3      	str	r3, [r4, #28]
 80817d6:	e002      	b.n	80817de <_ZN7FatFile5writeEPKvj+0x156>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
 80817d8:	4b0f      	ldr	r3, [pc, #60]	; (8081818 <_ZN7FatFile5writeEPKvj+0x190>)
 80817da:	681b      	ldr	r3, [r3, #0]
 80817dc:	b11b      	cbz	r3, 80817e6 <_ZN7FatFile5writeEPKvj+0x15e>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
 80817de:	78a3      	ldrb	r3, [r4, #2]
 80817e0:	f043 0304 	orr.w	r3, r3, #4
 80817e4:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
 80817e6:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80817ea:	2b00      	cmp	r3, #0
 80817ec:	db02      	blt.n	80817f4 <_ZN7FatFile5writeEPKvj+0x16c>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
 80817ee:	4640      	mov	r0, r8
 80817f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
 80817f4:	4620      	mov	r0, r4
 80817f6:	f7ff febb 	bl	8081570 <_ZN7FatFile4syncEv>
 80817fa:	2800      	cmp	r0, #0
 80817fc:	d1f7      	bne.n	80817ee <_ZN7FatFile5writeEPKvj+0x166>
 80817fe:	e754      	b.n	80816aa <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8081800:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8081804:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 8081808:	62c2      	str	r2, [r0, #44]	; 0x2c
 808180a:	e7c1      	b.n	8081790 <_ZN7FatFile5writeEPKvj+0x108>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 808180c:	6921      	ldr	r1, [r4, #16]
 808180e:	68a0      	ldr	r0, [r4, #8]
 8081810:	f000 f865 	bl	80818de <_ZNK9FatVolume17clusterFirstBlockEm>
 8081814:	4601      	mov	r1, r0
 8081816:	e784      	b.n	8081722 <_ZN7FatFile5writeEPKvj+0x9a>
 8081818:	20000cac 	.word	0x20000cac

0808181c <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 808181c:	f000 bf88 	b.w	8082730 <HAL_Pin_Map>

08081820 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8081820:	b570      	push	{r4, r5, r6, lr}
 8081822:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8081824:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8081826:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8081828:	b149      	cbz	r1, 808183e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 808182a:	f003 f808 	bl	808483e <strlen>
 808182e:	682b      	ldr	r3, [r5, #0]
 8081830:	4602      	mov	r2, r0
 8081832:	4621      	mov	r1, r4
 8081834:	4628      	mov	r0, r5
    }
 8081836:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 808183a:	68db      	ldr	r3, [r3, #12]
 808183c:	4718      	bx	r3
    }
 808183e:	bd70      	pop	{r4, r5, r6, pc}

08081840 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 8081840:	f000 bf76 	b.w	8082730 <HAL_Pin_Map>

08081844 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 8081844:	f000 bf74 	b.w	8082730 <HAL_Pin_Map>

08081848 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8081848:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 808184a:	7803      	ldrb	r3, [r0, #0]
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 808184c:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 808184e:	07da      	lsls	r2, r3, #31
 8081850:	d51e      	bpl.n	8081890 <_ZN8FatCache4syncEv+0x48>
 8081852:	6843      	ldr	r3, [r0, #4]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 8081854:	f100 060c 	add.w	r6, r0, #12
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 8081858:	6881      	ldr	r1, [r0, #8]
 808185a:	4632      	mov	r2, r6
 808185c:	6818      	ldr	r0, [r3, #0]
 808185e:	f000 fb97 	bl	8081f90 <_ZN9SdSpiCard10writeBlockEmPKh>
 8081862:	4605      	mov	r5, r0
 8081864:	b908      	cbnz	r0, 808186a <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 8081866:	2500      	movs	r5, #0
 8081868:	e013      	b.n	8081892 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 808186a:	7823      	ldrb	r3, [r4, #0]
 808186c:	079b      	lsls	r3, r3, #30
 808186e:	d404      	bmi.n	808187a <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
 8081870:	7823      	ldrb	r3, [r4, #0]
 8081872:	f023 0301 	bic.w	r3, r3, #1
 8081876:	7023      	strb	r3, [r4, #0]
 8081878:	e00b      	b.n	8081892 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 808187a:	6863      	ldr	r3, [r4, #4]
 808187c:	68a0      	ldr	r0, [r4, #8]
 808187e:	6919      	ldr	r1, [r3, #16]
 8081880:	4632      	mov	r2, r6
 8081882:	4401      	add	r1, r0
 8081884:	6818      	ldr	r0, [r3, #0]
 8081886:	f000 fb83 	bl	8081f90 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 808188a:	2800      	cmp	r0, #0
 808188c:	d1f0      	bne.n	8081870 <_ZN8FatCache4syncEv+0x28>
 808188e:	e7ea      	b.n	8081866 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
 8081890:	2501      	movs	r5, #1

fail:
  return false;
}
 8081892:	4628      	mov	r0, r5
 8081894:	bd70      	pop	{r4, r5, r6, pc}

08081896 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8081896:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 8081898:	6883      	ldr	r3, [r0, #8]
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 808189a:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 808189c:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 808189e:	460e      	mov	r6, r1
 80818a0:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 80818a2:	d014      	beq.n	80818ce <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
 80818a4:	f7ff ffd0 	bl	8081848 <_ZN8FatCache4syncEv>
 80818a8:	b908      	cbnz	r0, 80818ae <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
 80818aa:	2000      	movs	r0, #0
 80818ac:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
 80818ae:	076b      	lsls	r3, r5, #29
 80818b0:	d503      	bpl.n	80818ba <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
 80818b2:	2300      	movs	r3, #0
 80818b4:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
 80818b6:	60a6      	str	r6, [r4, #8]
 80818b8:	e009      	b.n	80818ce <_ZN8FatCache4readEmh+0x38>
 80818ba:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
 80818bc:	f104 020c 	add.w	r2, r4, #12
 80818c0:	4631      	mov	r1, r6
 80818c2:	6818      	ldr	r0, [r3, #0]
 80818c4:	f000 fada 	bl	8081e7c <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
 80818c8:	2800      	cmp	r0, #0
 80818ca:	d1f2      	bne.n	80818b2 <_ZN8FatCache4readEmh+0x1c>
 80818cc:	e7ed      	b.n	80818aa <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
 80818ce:	4620      	mov	r0, r4
 80818d0:	7823      	ldrb	r3, [r4, #0]
 80818d2:	f005 0503 	and.w	r5, r5, #3
 80818d6:	431d      	orrs	r5, r3
 80818d8:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
 80818dc:	bd70      	pop	{r4, r5, r6, pc}

080818de <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 80818de:	7983      	ldrb	r3, [r0, #6]
 80818e0:	3902      	subs	r1, #2
 80818e2:	6940      	ldr	r0, [r0, #20]
 80818e4:	4099      	lsls	r1, r3
}
 80818e6:	4408      	add	r0, r1
 80818e8:	4770      	bx	lr

080818ea <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80818ea:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 80818ec:	b570      	push	{r4, r5, r6, lr}
 80818ee:	4605      	mov	r5, r0
 80818f0:	460c      	mov	r4, r1
 80818f2:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80818f4:	d802      	bhi.n	80818fc <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
 80818f6:	f04f 30ff 	mov.w	r0, #4294967295
 80818fa:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80818fc:	69c3      	ldr	r3, [r0, #28]
 80818fe:	4299      	cmp	r1, r3
 8081900:	d8f9      	bhi.n	80818f6 <_ZN9FatVolume6fatGetEmPm+0xc>
 8081902:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
 8081904:	2b20      	cmp	r3, #32
 8081906:	d110      	bne.n	808192a <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
 8081908:	6981      	ldr	r1, [r0, #24]
 808190a:	2202      	movs	r2, #2
 808190c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8081910:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8081914:	f7ff ffbf 	bl	8081896 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8081918:	2800      	cmp	r0, #0
 808191a:	d0ec      	beq.n	80818f6 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 808191c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8081920:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8081924:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
 8081928:	e00f      	b.n	808194a <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
 808192a:	2b10      	cmp	r3, #16
 808192c:	d1e3      	bne.n	80818f6 <_ZN9FatVolume6fatGetEmPm+0xc>
 808192e:	6983      	ldr	r3, [r0, #24]
 8081930:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8081934:	2202      	movs	r2, #2
 8081936:	4419      	add	r1, r3
 8081938:	f500 700c 	add.w	r0, r0, #560	; 0x230
 808193c:	f7ff ffab 	bl	8081896 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8081940:	2800      	cmp	r0, #0
 8081942:	d0d8      	beq.n	80818f6 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
 8081944:	b2e4      	uxtb	r4, r4
 8081946:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
 808194a:	69ea      	ldr	r2, [r5, #28]
 808194c:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
 808194e:	bf9a      	itte	ls
 8081950:	6033      	strls	r3, [r6, #0]
  return 1;
 8081952:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
 8081954:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
 8081956:	bd70      	pop	{r4, r5, r6, pc}

08081958 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8081958:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 808195a:	b538      	push	{r3, r4, r5, lr}
 808195c:	460c      	mov	r4, r1
 808195e:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8081960:	d801      	bhi.n	8081966 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 8081962:	2000      	movs	r0, #0
 8081964:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8081966:	69c3      	ldr	r3, [r0, #28]
 8081968:	4299      	cmp	r1, r3
 808196a:	d8fa      	bhi.n	8081962 <_ZN9FatVolume6fatPutEmm+0xa>
 808196c:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
 808196e:	2b20      	cmp	r3, #32
 8081970:	d10e      	bne.n	8081990 <_ZN9FatVolume6fatPutEmm+0x38>
 8081972:	6981      	ldr	r1, [r0, #24]
 8081974:	2203      	movs	r2, #3
 8081976:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 808197a:	f500 700c 	add.w	r0, r0, #560	; 0x230
 808197e:	f7ff ff8a 	bl	8081896 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8081982:	2800      	cmp	r0, #0
 8081984:	d0ed      	beq.n	8081962 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
 8081986:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 808198a:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 808198e:	e00f      	b.n	80819b0 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
 8081990:	2b10      	cmp	r3, #16
 8081992:	d1e6      	bne.n	8081962 <_ZN9FatVolume6fatPutEmm+0xa>
 8081994:	6983      	ldr	r3, [r0, #24]
 8081996:	f3c1 2107 	ubfx	r1, r1, #8, #8
 808199a:	2203      	movs	r2, #3
 808199c:	4419      	add	r1, r3
 808199e:	f500 700c 	add.w	r0, r0, #560	; 0x230
 80819a2:	f7ff ff78 	bl	8081896 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 80819a6:	2800      	cmp	r0, #0
 80819a8:	d0db      	beq.n	8081962 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
 80819aa:	b2e4      	uxtb	r4, r4
 80819ac:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
 80819b0:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
 80819b2:	bd38      	pop	{r3, r4, r5, pc}

080819b4 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 80819b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 80819b8:	68c4      	ldr	r4, [r0, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 80819ba:	4605      	mov	r5, r0
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 80819bc:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 80819be:	460e      	mov	r6, r1
 80819c0:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 80819c2:	d207      	bcs.n	80819d4 <_ZN9FatVolume15allocateClusterEmPm+0x20>
 80819c4:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
 80819c6:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
 80819c8:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
 80819ca:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
 80819cc:	429c      	cmp	r4, r3
 80819ce:	d903      	bls.n	80819d8 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
 80819d0:	b9cf      	cbnz	r7, 8081a06 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
 80819d2:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
 80819d4:	2701      	movs	r7, #1
 80819d6:	e7f7      	b.n	80819c8 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
 80819d8:	42a6      	cmp	r6, r4
 80819da:	d014      	beq.n	8081a06 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
 80819dc:	aa01      	add	r2, sp, #4
 80819de:	4621      	mov	r1, r4
 80819e0:	4628      	mov	r0, r5
 80819e2:	f7ff ff82 	bl	80818ea <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 80819e6:	2800      	cmp	r0, #0
 80819e8:	db0d      	blt.n	8081a06 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
 80819ea:	d0ed      	beq.n	80819c8 <_ZN9FatVolume15allocateClusterEmPm+0x14>
 80819ec:	9b01      	ldr	r3, [sp, #4]
 80819ee:	2b00      	cmp	r3, #0
 80819f0:	d1ea      	bne.n	80819c8 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
 80819f2:	b107      	cbz	r7, 80819f6 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
 80819f4:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 80819f6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80819fa:	4621      	mov	r1, r4
 80819fc:	4628      	mov	r0, r5
 80819fe:	f7ff ffab 	bl	8081958 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
 8081a02:	4607      	mov	r7, r0
 8081a04:	b908      	cbnz	r0, 8081a0a <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
 8081a06:	2700      	movs	r7, #0
 8081a08:	e00b      	b.n	8081a22 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
 8081a0a:	b916      	cbnz	r6, 8081a12 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
 8081a0c:	f8c8 4000 	str.w	r4, [r8]
  return true;
 8081a10:	e007      	b.n	8081a22 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
 8081a12:	4622      	mov	r2, r4
 8081a14:	4631      	mov	r1, r6
 8081a16:	4628      	mov	r0, r5
 8081a18:	f7ff ff9e 	bl	8081958 <_ZN9FatVolume6fatPutEmm>
 8081a1c:	2800      	cmp	r0, #0
 8081a1e:	d1f5      	bne.n	8081a0c <_ZN9FatVolume15allocateClusterEmPm+0x58>
 8081a20:	e7f1      	b.n	8081a06 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
 8081a22:	4638      	mov	r0, r7
 8081a24:	b002      	add	sp, #8
 8081a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081a2a <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 8081a2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8081a2c:	4605      	mov	r5, r0
 8081a2e:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 8081a30:	aa01      	add	r2, sp, #4
 8081a32:	4621      	mov	r1, r4
 8081a34:	4628      	mov	r0, r5
 8081a36:	f7ff ff58 	bl	80818ea <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8081a3a:	1e06      	subs	r6, r0, #0
 8081a3c:	da01      	bge.n	8081a42 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
 8081a3e:	2000      	movs	r0, #0
 8081a40:	e00f      	b.n	8081a62 <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 8081a42:	2200      	movs	r2, #0
 8081a44:	4621      	mov	r1, r4
 8081a46:	4628      	mov	r0, r5
 8081a48:	f7ff ff86 	bl	8081958 <_ZN9FatVolume6fatPutEmm>
 8081a4c:	2800      	cmp	r0, #0
 8081a4e:	d0f6      	beq.n	8081a3e <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
 8081a50:	68eb      	ldr	r3, [r5, #12]
 8081a52:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
 8081a54:	bf9c      	itt	ls
 8081a56:	f104 34ff 	addls.w	r4, r4, #4294967295
 8081a5a:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
 8081a5c:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
 8081a5e:	2e00      	cmp	r6, #0
 8081a60:	d1e6      	bne.n	8081a30 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 8081a62:	b002      	add	sp, #8
 8081a64:	bd70      	pop	{r4, r5, r6, pc}

08081a66 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
 8081a66:	b570      	push	{r4, r5, r6, lr}
 8081a68:	4604      	mov	r4, r0
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 8081a6a:	2301      	movs	r3, #1
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 8081a6c:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 8081a6e:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8081a70:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 8081a74:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 8081a76:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 8081a78:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8081a7a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 8081a7e:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 8081a80:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8081a84:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
 8081a88:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
 8081a8c:	b1a1      	cbz	r1, 8081ab8 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
 8081a8e:	2904      	cmp	r1, #4
 8081a90:	d85d      	bhi.n	8081b4e <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8081a92:	4611      	mov	r1, r2
 8081a94:	3024      	adds	r0, #36	; 0x24
 8081a96:	f7ff fefe 	bl	8081896 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8081a9a:	2800      	cmp	r0, #0
 8081a9c:	d057      	beq.n	8081b4e <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 8081a9e:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 8081aa2:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8081aa6:	065b      	lsls	r3, r3, #25
 8081aa8:	d151      	bne.n	8081b4e <_ZN9FatVolume4initEh+0xe8>
 8081aaa:	351b      	adds	r5, #27
 8081aac:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 8081ab0:	f8d5 5006 	ldr.w	r5, [r5, #6]
 8081ab4:	2d00      	cmp	r5, #0
 8081ab6:	d04a      	beq.n	8081b4e <_ZN9FatVolume4initEh+0xe8>
 8081ab8:	2200      	movs	r2, #0
 8081aba:	4629      	mov	r1, r5
 8081abc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8081ac0:	f7ff fee9 	bl	8081896 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
 8081ac4:	2800      	cmp	r0, #0
 8081ac6:	d042      	beq.n	8081b4e <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
 8081ac8:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 8081acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8081ad0:	d13d      	bne.n	8081b4e <_ZN9FatVolume4initEh+0xe8>
 8081ad2:	7c03      	ldrb	r3, [r0, #16]
 8081ad4:	2b02      	cmp	r3, #2
 8081ad6:	d13a      	bne.n	8081b4e <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
 8081ad8:	89c3      	ldrh	r3, [r0, #14]
 8081ada:	2b00      	cmp	r3, #0
 8081adc:	d037      	beq.n	8081b4e <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8081ade:	7b41      	ldrb	r1, [r0, #13]
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 8081ae0:	2609      	movs	r6, #9
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
 8081ae2:	1e4b      	subs	r3, r1, #1
 8081ae4:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 8081ae6:	2300      	movs	r3, #0
 8081ae8:	71a3      	strb	r3, [r4, #6]
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8081aea:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8081aec:	2301      	movs	r3, #1
 8081aee:	428b      	cmp	r3, r1
 8081af0:	d007      	beq.n	8081b02 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
 8081af2:	3e01      	subs	r6, #1
 8081af4:	d02b      	beq.n	8081b4e <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8081af6:	79a2      	ldrb	r2, [r4, #6]
 8081af8:	005b      	lsls	r3, r3, #1
 8081afa:	3201      	adds	r2, #1
 8081afc:	b2db      	uxtb	r3, r3
 8081afe:	71a2      	strb	r2, [r4, #6]
 8081b00:	e7f5      	b.n	8081aee <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
 8081b02:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
 8081b04:	b902      	cbnz	r2, 8081b08 <_ZN9FatVolume4initEh+0xa2>
 8081b06:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8081b08:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 8081b0a:	89c6      	ldrh	r6, [r0, #14]
 8081b0c:	442e      	add	r6, r5
 8081b0e:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8081b10:	f8b0 3011 	ldrh.w	r3, [r0, #17]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8081b14:	eb06 0142 	add.w	r1, r6, r2, lsl #1
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8081b18:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8081b1a:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 8081b1c:	f8b0 2011 	ldrh.w	r2, [r0, #17]
 8081b20:	0152      	lsls	r2, r2, #5
 8081b22:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 8081b26:	eb01 2262 	add.w	r2, r1, r2, asr #9
 8081b2a:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
 8081b2c:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
 8081b30:	b903      	cbnz	r3, 8081b34 <_ZN9FatVolume4initEh+0xce>
 8081b32:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8081b34:	1aad      	subs	r5, r5, r2
 8081b36:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
 8081b38:	79a5      	ldrb	r5, [r4, #6]
 8081b3a:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
 8081b3e:	1c6b      	adds	r3, r5, #1
 8081b40:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
 8081b42:	f640 73f4 	movw	r3, #4084	; 0xff4
 8081b46:	429d      	cmp	r5, r3
 8081b48:	d803      	bhi.n	8081b52 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
 8081b4a:	230c      	movs	r3, #12
 8081b4c:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 8081b4e:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
 8081b50:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
 8081b52:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8081b56:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 8081b58:	bf89      	itett	hi
 8081b5a:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
 8081b5c:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 8081b5e:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 8081b60:	2320      	movhi	r3, #32
 8081b62:	71e3      	strb	r3, [r4, #7]
  }
  return true;
 8081b64:	2001      	movs	r0, #1

fail:
  return false;
}
 8081b66:	bd70      	pop	{r4, r5, r6, pc}

08081b68 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 8081b68:	f000 bde2 	b.w	8082730 <HAL_Pin_Map>

08081b6c <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
 8081b6c:	f000 bde0 	b.w	8082730 <HAL_Pin_Map>

08081b70 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
 8081b70:	f000 bdde 	b.w	8082730 <HAL_Pin_Map>

08081b74 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
 8081b74:	b570      	push	{r4, r5, r6, lr}
 8081b76:	460e      	mov	r6, r1
 8081b78:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 8081b7a:	f000 fe59 	bl	8082830 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
 8081b7e:	4c0c      	ldr	r4, [pc, #48]	; (8081bb0 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
 8081b80:	6823      	ldr	r3, [r4, #0]
 8081b82:	1ac0      	subs	r0, r0, r3
 8081b84:	4b0b      	ldr	r3, [pc, #44]	; (8081bb4 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
 8081b86:	4298      	cmp	r0, r3
 8081b88:	d908      	bls.n	8081b9c <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8081b8a:	f000 fe59 	bl	8082840 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8081b8e:	4b0a      	ldr	r3, [pc, #40]	; (8081bb8 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
 8081b90:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8081b92:	f000 ffa9 	bl	8082ae8 <spark_process>
 8081b96:	f000 fe4b 	bl	8082830 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
 8081b9a:	6020      	str	r0, [r4, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8081b9c:	f000 fe50 	bl	8082840 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
 8081ba0:	b280      	uxth	r0, r0
 8081ba2:	1b80      	subs	r0, r0, r6
}
 8081ba4:	42a8      	cmp	r0, r5
 8081ba6:	bfd4      	ite	le
 8081ba8:	2000      	movle	r0, #0
 8081baa:	2001      	movgt	r0, #1
 8081bac:	bd70      	pop	{r4, r5, r6, pc}
 8081bae:	bf00      	nop
 8081bb0:	20000cb0 	.word	0x20000cb0
 8081bb4:	000186a0 	.word	0x000186a0
 8081bb8:	200011c0 	.word	0x200011c0

08081bbc <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 8081bbc:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
 8081bbe:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 8081bc0:	4604      	mov	r4, r0
  if (!m_spiActive) {
 8081bc2:	b94d      	cbnz	r5, 8081bd8 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
 8081bc4:	6840      	ldr	r0, [r0, #4]
 8081bc6:	f000 fa7d 	bl	80820c4 <_ZN14SdSpiAltDriver8activateEv>
 8081bca:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
    digitalWrite(m_csPin, LOW);
 8081bcc:	4629      	mov	r1, r5
 8081bce:	7d18      	ldrb	r0, [r3, #20]
 8081bd0:	f001 ffe9 	bl	8083ba6 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
 8081bd4:	2301      	movs	r3, #1
 8081bd6:	7223      	strb	r3, [r4, #8]
 8081bd8:	bd38      	pop	{r3, r4, r5, pc}

08081bda <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 8081bda:	b510      	push	{r4, lr}
  if (m_spiActive) {
 8081bdc:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 8081bde:	4604      	mov	r4, r0
  if (m_spiActive) {
 8081be0:	b16b      	cbz	r3, 8081bfe <_ZN9SdSpiCard7spiStopEv+0x24>
 8081be2:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
 8081be4:	2101      	movs	r1, #1
 8081be6:	7d18      	ldrb	r0, [r3, #20]
 8081be8:	f001 ffdd 	bl	8083ba6 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8081bec:	21ff      	movs	r1, #255	; 0xff
 8081bee:	6860      	ldr	r0, [r4, #4]
 8081bf0:	f000 fa9a 	bl	8082128 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
 8081bf4:	6860      	ldr	r0, [r4, #4]
 8081bf6:	f000 fa79 	bl	80820ec <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
 8081bfa:	2300      	movs	r3, #0
 8081bfc:	7223      	strb	r3, [r4, #8]
 8081bfe:	bd10      	pop	{r4, pc}

08081c00 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 8081c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081c02:	4604      	mov	r4, r0
 8081c04:	460d      	mov	r5, r1
 8081c06:	4616      	mov	r6, r2
 8081c08:	f000 fe1a 	bl	8082840 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
 8081c0c:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8081c0e:	6860      	ldr	r0, [r4, #4]
 8081c10:	f000 fa6f 	bl	80820f2 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
 8081c14:	28ff      	cmp	r0, #255	; 0xff
 8081c16:	7260      	strb	r0, [r4, #9]
 8081c18:	d109      	bne.n	8081c2e <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
 8081c1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8081c1e:	4639      	mov	r1, r7
 8081c20:	4620      	mov	r0, r4
 8081c22:	f7ff ffa7 	bl	8081b74 <_ZN9SdSpiCard10isTimedOutEtt>
 8081c26:	2800      	cmp	r0, #0
 8081c28:	d0f1      	beq.n	8081c0e <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8081c2a:	2355      	movs	r3, #85	; 0x55
 8081c2c:	e00b      	b.n	8081c46 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
 8081c2e:	28fe      	cmp	r0, #254	; 0xfe
 8081c30:	d001      	beq.n	8081c36 <_ZN9SdSpiCard8readDataEPhj+0x36>
 8081c32:	2350      	movs	r3, #80	; 0x50
 8081c34:	e007      	b.n	8081c46 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
 8081c36:	4632      	mov	r2, r6
 8081c38:	4629      	mov	r1, r5
 8081c3a:	6860      	ldr	r0, [r4, #4]
 8081c3c:	f000 fa5e 	bl	80820fc <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
 8081c40:	7260      	strb	r0, [r4, #9]
 8081c42:	b130      	cbz	r0, 8081c52 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8081c44:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
 8081c46:	4620      	mov	r0, r4
 8081c48:	7023      	strb	r3, [r4, #0]
 8081c4a:	f7ff ffc6 	bl	8081bda <_ZN9SdSpiCard7spiStopEv>
  return false;
 8081c4e:	2000      	movs	r0, #0
}
 8081c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8081c52:	6860      	ldr	r0, [r4, #4]
 8081c54:	f000 fa4d 	bl	80820f2 <_ZN14SdSpiAltDriver7receiveEv>
 8081c58:	6860      	ldr	r0, [r4, #4]
 8081c5a:	f000 fa4a 	bl	80820f2 <_ZN14SdSpiAltDriver7receiveEv>
 8081c5e:	2001      	movs	r0, #1
 8081c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081c62 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
 8081c62:	b570      	push	{r4, r5, r6, lr}
 8081c64:	4604      	mov	r4, r0
 8081c66:	460e      	mov	r6, r1
 8081c68:	f000 fdea 	bl	8082840 <HAL_Timer_Get_Milli_Seconds>
 8081c6c:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
 8081c6e:	4632      	mov	r2, r6
 8081c70:	4629      	mov	r1, r5
 8081c72:	4620      	mov	r0, r4
 8081c74:	f7ff ff7e 	bl	8081b74 <_ZN9SdSpiCard10isTimedOutEtt>
 8081c78:	b930      	cbnz	r0, 8081c88 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
 8081c7a:	6860      	ldr	r0, [r4, #4]
 8081c7c:	f000 fa39 	bl	80820f2 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
 8081c80:	28ff      	cmp	r0, #255	; 0xff
 8081c82:	d1f4      	bne.n	8081c6e <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
 8081c84:	2001      	movs	r0, #1
 8081c86:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
 8081c88:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
 8081c8a:	bd70      	pop	{r4, r5, r6, pc}

08081c8c <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8081c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
 8081c8e:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8081c90:	4604      	mov	r4, r0
 8081c92:	460d      	mov	r5, r1
 8081c94:	9201      	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
 8081c96:	b90b      	cbnz	r3, 8081c9c <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
 8081c98:	f7ff ff90 	bl	8081bbc <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
 8081c9c:	b125      	cbz	r5, 8081ca8 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
 8081c9e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8081ca2:	4620      	mov	r0, r4
 8081ca4:	f7ff ffdd 	bl	8081c62 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8081ca8:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 8081cac:	6860      	ldr	r0, [r4, #4]
 8081cae:	f000 fa3b 	bl	8082128 <_ZN14SdSpiAltDriver4sendEh>
 8081cb2:	f10d 0607 	add.w	r6, sp, #7
 8081cb6:	f10d 0703 	add.w	r7, sp, #3
 8081cba:	f816 1901 	ldrb.w	r1, [r6], #-1
 8081cbe:	6860      	ldr	r0, [r4, #4]
 8081cc0:	f000 fa32 	bl	8082128 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
 8081cc4:	42be      	cmp	r6, r7
 8081cc6:	d1f8      	bne.n	8081cba <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8081cc8:	2d00      	cmp	r5, #0
 8081cca:	bf0c      	ite	eq
 8081ccc:	2195      	moveq	r1, #149	; 0x95
 8081cce:	2187      	movne	r1, #135	; 0x87
 8081cd0:	6860      	ldr	r0, [r4, #4]
 8081cd2:	f000 fa29 	bl	8082128 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8081cd6:	6860      	ldr	r0, [r4, #4]
 8081cd8:	f000 fa0b 	bl	80820f2 <_ZN14SdSpiAltDriver7receiveEv>
 8081cdc:	250b      	movs	r5, #11
 8081cde:	6860      	ldr	r0, [r4, #4]
 8081ce0:	f000 fa07 	bl	80820f2 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
 8081ce4:	0603      	lsls	r3, r0, #24
 8081ce6:	7260      	strb	r0, [r4, #9]
 8081ce8:	d503      	bpl.n	8081cf2 <_ZN9SdSpiCard11cardCommandEhm+0x66>
 8081cea:	3d01      	subs	r5, #1
 8081cec:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8081cf0:	d1f5      	bne.n	8081cde <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
 8081cf2:	b003      	add	sp, #12
 8081cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081cf6 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
 8081cf6:	b570      	push	{r4, r5, r6, lr}
 8081cf8:	4604      	mov	r4, r0
 8081cfa:	460d      	mov	r5, r1
 8081cfc:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
 8081cfe:	2137      	movs	r1, #55	; 0x37
 8081d00:	2200      	movs	r2, #0
 8081d02:	f7ff ffc3 	bl	8081c8c <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8081d06:	4632      	mov	r2, r6
 8081d08:	4629      	mov	r1, r5
 8081d0a:	4620      	mov	r0, r4
  }
 8081d0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
 8081d10:	f7ff bfbc 	b.w	8081c8c <_ZN9SdSpiCard11cardCommandEhm>

08081d14 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 8081d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
 8081d18:	2500      	movs	r5, #0
 8081d1a:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
 8081d1c:	7005      	strb	r5, [r0, #0]
  m_type = 0;
 8081d1e:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
 8081d20:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 8081d22:	4604      	mov	r4, r0
 8081d24:	4690      	mov	r8, r2
 8081d26:	461e      	mov	r6, r3
 8081d28:	f000 fd8a 	bl	8082840 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
 8081d2c:	4641      	mov	r1, r8
 8081d2e:	4607      	mov	r7, r0
 8081d30:	6860      	ldr	r0, [r4, #4]
 8081d32:	f000 f9cb 	bl	80820cc <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
 8081d36:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_CORE = 72*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
 8081d38:	4a4f      	ldr	r2, [pc, #316]	; (8081e78 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
 8081d3a:	f04f 0801 	mov.w	r8, #1
 8081d3e:	721d      	strb	r5, [r3, #8]
 8081d40:	60da      	str	r2, [r3, #12]
 8081d42:	745d      	strb	r5, [r3, #17]
 8081d44:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
 8081d48:	4620      	mov	r0, r4
 8081d4a:	f7ff ff37 	bl	8081bbc <_ZN9SdSpiCard8spiStartEv>
 8081d4e:	6863      	ldr	r3, [r4, #4]
 8081d50:	4641      	mov	r1, r8
 8081d52:	7d18      	ldrb	r0, [r3, #20]
 8081d54:	f001 ff27 	bl	8083ba6 <digitalWrite>
 8081d58:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8081d5a:	21ff      	movs	r1, #255	; 0xff
 8081d5c:	6860      	ldr	r0, [r4, #4]
 8081d5e:	3d01      	subs	r5, #1
 8081d60:	f000 f9e2 	bl	8082128 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
 8081d64:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8081d68:	d1f7      	bne.n	8081d5a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
 8081d6a:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
    digitalWrite(m_csPin, LOW);
 8081d6c:	4629      	mov	r1, r5
 8081d6e:	7d18      	ldrb	r0, [r3, #20]
 8081d70:	f001 ff19 	bl	8083ba6 <digitalWrite>
 8081d74:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
 8081d76:	2200      	movs	r2, #0
 8081d78:	4611      	mov	r1, r2
 8081d7a:	4620      	mov	r0, r4
 8081d7c:	f7ff ff86 	bl	8081c8c <_ZN9SdSpiCard11cardCommandEhm>
 8081d80:	2801      	cmp	r0, #1
 8081d82:	4680      	mov	r8, r0
 8081d84:	d012      	beq.n	8081dac <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
 8081d86:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
 8081d88:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8081d8c:	d101      	bne.n	8081d92 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8081d8e:	2320      	movs	r3, #32
 8081d90:	e057      	b.n	8081e42 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8081d92:	21fd      	movs	r1, #253	; 0xfd
 8081d94:	6860      	ldr	r0, [r4, #4]
 8081d96:	f000 f9c7 	bl	8082128 <_ZN14SdSpiAltDriver4sendEh>
 8081d9a:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8081d9e:	6860      	ldr	r0, [r4, #4]
 8081da0:	f000 f9a7 	bl	80820f2 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
 8081da4:	f1b8 0801 	subs.w	r8, r8, #1
 8081da8:	d1f9      	bne.n	8081d9e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
 8081daa:	e7e4      	b.n	8081d76 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 8081dac:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8081db0:	2108      	movs	r1, #8
 8081db2:	4620      	mov	r0, r4
 8081db4:	f7ff ff6a 	bl	8081c8c <_ZN9SdSpiCard11cardCommandEhm>
 8081db8:	2805      	cmp	r0, #5
 8081dba:	d102      	bne.n	8081dc2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 8081dbc:	f884 800a 	strb.w	r8, [r4, #10]
 8081dc0:	e00f      	b.n	8081de2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
 8081dc2:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8081dc4:	6860      	ldr	r0, [r4, #4]
 8081dc6:	f000 f994 	bl	80820f2 <_ZN14SdSpiAltDriver7receiveEv>
 8081dca:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
 8081dcc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
 8081dd0:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
 8081dd2:	d1f7      	bne.n	8081dc4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
 8081dd4:	28aa      	cmp	r0, #170	; 0xaa
 8081dd6:	d102      	bne.n	8081dde <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 8081dd8:	2302      	movs	r3, #2
 8081dda:	72a3      	strb	r3, [r4, #10]
 8081ddc:	e001      	b.n	8081de2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8081dde:	2325      	movs	r3, #37	; 0x25
 8081de0:	e02f      	b.n	8081e42 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8081de2:	7aa3      	ldrb	r3, [r4, #10]
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
 8081de4:	b2bf      	uxth	r7, r7
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8081de6:	2b02      	cmp	r3, #2
 8081de8:	bf0c      	ite	eq
 8081dea:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 8081dee:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 8081df0:	462a      	mov	r2, r5
 8081df2:	2129      	movs	r1, #41	; 0x29
 8081df4:	4620      	mov	r0, r4
 8081df6:	f7ff ff7e 	bl	8081cf6 <_ZN9SdSpiCard8cardAcmdEhm>
 8081dfa:	4602      	mov	r2, r0
 8081dfc:	b148      	cbz	r0, 8081e12 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
 8081dfe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8081e02:	4639      	mov	r1, r7
 8081e04:	4620      	mov	r0, r4
 8081e06:	f7ff feb5 	bl	8081b74 <_ZN9SdSpiCard10isTimedOutEtt>
 8081e0a:	2800      	cmp	r0, #0
 8081e0c:	d0f0      	beq.n	8081df0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
 8081e0e:	2343      	movs	r3, #67	; 0x43
 8081e10:	e017      	b.n	8081e42 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
 8081e12:	7aa3      	ldrb	r3, [r4, #10]
 8081e14:	2b02      	cmp	r3, #2
 8081e16:	d00e      	beq.n	8081e36 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
 8081e18:	4620      	mov	r0, r4
 8081e1a:	f7ff fede 	bl	8081bda <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
 8081e1e:	6863      	ldr	r3, [r4, #4]
 8081e20:	68b0      	ldr	r0, [r6, #8]
 8081e22:	7934      	ldrb	r4, [r6, #4]
 8081e24:	7b31      	ldrb	r1, [r6, #12]
 8081e26:	7b72      	ldrb	r2, [r6, #13]
 8081e28:	60d8      	str	r0, [r3, #12]
 8081e2a:	721c      	strb	r4, [r3, #8]
 8081e2c:	7419      	strb	r1, [r3, #16]
 8081e2e:	745a      	strb	r2, [r3, #17]
  return true;
 8081e30:	2001      	movs	r0, #1
 8081e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
 8081e36:	213a      	movs	r1, #58	; 0x3a
 8081e38:	4620      	mov	r0, r4
 8081e3a:	f7ff ff27 	bl	8081c8c <_ZN9SdSpiCard11cardCommandEhm>
 8081e3e:	b138      	cbz	r0, 8081e50 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
 8081e40:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
 8081e42:	4620      	mov	r0, r4
 8081e44:	7023      	strb	r3, [r4, #0]
 8081e46:	f7ff fec8 	bl	8081bda <_ZN9SdSpiCard7spiStopEv>
  return false;
 8081e4a:	2000      	movs	r0, #0
}
 8081e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8081e50:	6860      	ldr	r0, [r4, #4]
 8081e52:	f000 f94e 	bl	80820f2 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
 8081e56:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8081e5a:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 8081e5c:	bf04      	itt	eq
 8081e5e:	2303      	moveq	r3, #3
 8081e60:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8081e62:	6860      	ldr	r0, [r4, #4]
 8081e64:	f000 f945 	bl	80820f2 <_ZN14SdSpiAltDriver7receiveEv>
 8081e68:	6860      	ldr	r0, [r4, #4]
 8081e6a:	f000 f942 	bl	80820f2 <_ZN14SdSpiAltDriver7receiveEv>
 8081e6e:	6860      	ldr	r0, [r4, #4]
 8081e70:	f000 f93f 	bl	80820f2 <_ZN14SdSpiAltDriver7receiveEv>
 8081e74:	e7d0      	b.n	8081e18 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
 8081e76:	bf00      	nop
 8081e78:	0003d090 	.word	0x0003d090

08081e7c <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8081e7c:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8081e7e:	7a83      	ldrb	r3, [r0, #10]
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8081e80:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8081e82:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8081e84:	bf18      	it	ne
 8081e86:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD17, blockNumber)) {
 8081e88:	460a      	mov	r2, r1
 8081e8a:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8081e8c:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
 8081e8e:	f7ff fefd 	bl	8081c8c <_ZN9SdSpiCard11cardCommandEhm>
 8081e92:	b110      	cbz	r0, 8081e9a <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8081e94:	2330      	movs	r3, #48	; 0x30
 8081e96:	7023      	strb	r3, [r4, #0]
 8081e98:	e00b      	b.n	8081eb2 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
 8081e9a:	4629      	mov	r1, r5
 8081e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8081ea0:	4620      	mov	r0, r4
 8081ea2:	f7ff fead 	bl	8081c00 <_ZN9SdSpiCard8readDataEPhj>
 8081ea6:	4605      	mov	r5, r0
 8081ea8:	b118      	cbz	r0, 8081eb2 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
 8081eaa:	4620      	mov	r0, r4
 8081eac:	f7ff fe95 	bl	8081bda <_ZN9SdSpiCard7spiStopEv>
  return true;
 8081eb0:	e003      	b.n	8081eba <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
 8081eb2:	4620      	mov	r0, r4
 8081eb4:	f7ff fe91 	bl	8081bda <_ZN9SdSpiCard7spiStopEv>
  return false;
 8081eb8:	2500      	movs	r5, #0
}
 8081eba:	4628      	mov	r0, r5
 8081ebc:	bd38      	pop	{r3, r4, r5, pc}

08081ebe <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8081ebe:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8081ec0:	7a83      	ldrb	r3, [r0, #10]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8081ec2:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8081ec4:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8081ec6:	bf18      	it	ne
 8081ec8:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
 8081eca:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8081ecc:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
 8081ece:	f7ff fedd 	bl	8081c8c <_ZN9SdSpiCard11cardCommandEhm>
 8081ed2:	b130      	cbz	r0, 8081ee2 <_ZN9SdSpiCard9readStartEm+0x24>
 8081ed4:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
 8081ed6:	4620      	mov	r0, r4
 8081ed8:	7023      	strb	r3, [r4, #0]
 8081eda:	f7ff fe7e 	bl	8081bda <_ZN9SdSpiCard7spiStopEv>
  return false;
 8081ede:	2000      	movs	r0, #0
 8081ee0:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
 8081ee2:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 8081ee4:	bd10      	pop	{r4, pc}

08081ee6 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8081ee6:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 8081ee8:	2200      	movs	r2, #0
 8081eea:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8081eec:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 8081eee:	f7ff fecd 	bl	8081c8c <_ZN9SdSpiCard11cardCommandEhm>
 8081ef2:	b130      	cbz	r0, 8081f02 <_ZN9SdSpiCard8readStopEv+0x1c>
 8081ef4:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
 8081ef6:	4620      	mov	r0, r4
 8081ef8:	7023      	strb	r3, [r4, #0]
 8081efa:	f7ff fe6e 	bl	8081bda <_ZN9SdSpiCard7spiStopEv>
  return false;
 8081efe:	2000      	movs	r0, #0
 8081f00:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
 8081f02:	4620      	mov	r0, r4
 8081f04:	f7ff fe69 	bl	8081bda <_ZN9SdSpiCard7spiStopEv>
  return true;
 8081f08:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 8081f0a:	bd10      	pop	{r4, pc}

08081f0c <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 8081f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081f0e:	4605      	mov	r5, r0
 8081f10:	4616      	mov	r6, r2
 8081f12:	461f      	mov	r7, r3
  if (!readStart(block)) {
 8081f14:	f7ff ffd3 	bl	8081ebe <_ZN9SdSpiCard9readStartEm>
 8081f18:	b198      	cbz	r0, 8081f42 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 8081f1a:	2400      	movs	r4, #0
 8081f1c:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 8081f1e:	429f      	cmp	r7, r3
 8081f20:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 8081f24:	d908      	bls.n	8081f38 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
 8081f26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8081f2a:	4628      	mov	r0, r5
 8081f2c:	f7ff fe68 	bl	8081c00 <_ZN9SdSpiCard8readDataEPhj>
 8081f30:	3401      	adds	r4, #1
 8081f32:	2800      	cmp	r0, #0
 8081f34:	d1f2      	bne.n	8081f1c <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
 8081f36:	e004      	b.n	8081f42 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
 8081f38:	4628      	mov	r0, r5
}
 8081f3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
 8081f3e:	f7ff bfd2 	b.w	8081ee6 <_ZN9SdSpiCard8readStopEv>
}
 8081f42:	2000      	movs	r0, #0
 8081f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081f46 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 8081f46:	b538      	push	{r3, r4, r5, lr}
 8081f48:	4604      	mov	r4, r0
 8081f4a:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8081f4c:	6840      	ldr	r0, [r0, #4]
 8081f4e:	f000 f8eb 	bl	8082128 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
 8081f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8081f56:	4629      	mov	r1, r5
 8081f58:	6860      	ldr	r0, [r4, #4]
 8081f5a:	f000 f8e9 	bl	8082130 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8081f5e:	21ff      	movs	r1, #255	; 0xff
 8081f60:	6860      	ldr	r0, [r4, #4]
 8081f62:	f000 f8e1 	bl	8082128 <_ZN14SdSpiAltDriver4sendEh>
 8081f66:	21ff      	movs	r1, #255	; 0xff
 8081f68:	6860      	ldr	r0, [r4, #4]
 8081f6a:	f000 f8dd 	bl	8082128 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8081f6e:	6860      	ldr	r0, [r4, #4]
 8081f70:	f000 f8bf 	bl	80820f2 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
 8081f74:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 8081f76:	f000 001f 	and.w	r0, r0, #31
 8081f7a:	2805      	cmp	r0, #5
 8081f7c:	d006      	beq.n	8081f8c <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8081f7e:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
 8081f80:	4620      	mov	r0, r4
 8081f82:	7023      	strb	r3, [r4, #0]
 8081f84:	f7ff fe29 	bl	8081bda <_ZN9SdSpiCard7spiStopEv>
  return false;
 8081f88:	2000      	movs	r0, #0
 8081f8a:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
 8081f8c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 8081f8e:	bd38      	pop	{r3, r4, r5, pc}

08081f90 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8081f90:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8081f92:	7a83      	ldrb	r3, [r0, #10]
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8081f94:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8081f96:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8081f98:	bf18      	it	ne
 8081f9a:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, blockNumber)) {
 8081f9c:	460a      	mov	r2, r1
 8081f9e:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8081fa0:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
 8081fa2:	f7ff fe73 	bl	8081c8c <_ZN9SdSpiCard11cardCommandEhm>
 8081fa6:	4606      	mov	r6, r0
 8081fa8:	b108      	cbz	r0, 8081fae <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
 8081faa:	2332      	movs	r3, #50	; 0x32
 8081fac:	e01d      	b.n	8081fea <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
 8081fae:	462a      	mov	r2, r5
 8081fb0:	21fe      	movs	r1, #254	; 0xfe
 8081fb2:	4620      	mov	r0, r4
 8081fb4:	f7ff ffc7 	bl	8081f46 <_ZN9SdSpiCard9writeDataEhPKh>
 8081fb8:	b1c0      	cbz	r0, 8081fec <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8081fba:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8081fbe:	4620      	mov	r0, r4
 8081fc0:	f7ff fe4f 	bl	8081c62 <_ZN9SdSpiCard11waitNotBusyEt>
 8081fc4:	4605      	mov	r5, r0
 8081fc6:	b908      	cbnz	r0, 8081fcc <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
 8081fc8:	235a      	movs	r3, #90	; 0x5a
 8081fca:	e00e      	b.n	8081fea <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
 8081fcc:	4632      	mov	r2, r6
 8081fce:	210d      	movs	r1, #13
 8081fd0:	4620      	mov	r0, r4
 8081fd2:	f7ff fe5b 	bl	8081c8c <_ZN9SdSpiCard11cardCommandEhm>
 8081fd6:	b938      	cbnz	r0, 8081fe8 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8081fd8:	6860      	ldr	r0, [r4, #4]
 8081fda:	f000 f88a 	bl	80820f2 <_ZN14SdSpiAltDriver7receiveEv>
 8081fde:	b918      	cbnz	r0, 8081fe8 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
 8081fe0:	4620      	mov	r0, r4
 8081fe2:	f7ff fdfa 	bl	8081bda <_ZN9SdSpiCard7spiStopEv>
  return true;
 8081fe6:	e005      	b.n	8081ff4 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8081fe8:	2329      	movs	r3, #41	; 0x29
 8081fea:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
 8081fec:	4620      	mov	r0, r4
 8081fee:	f7ff fdf4 	bl	8081bda <_ZN9SdSpiCard7spiStopEv>
  return false;
 8081ff2:	2500      	movs	r5, #0
}
 8081ff4:	4628      	mov	r0, r5
 8081ff6:	bd70      	pop	{r4, r5, r6, pc}

08081ff8 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 8081ff8:	b538      	push	{r3, r4, r5, lr}
 8081ffa:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8081ffc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 8082000:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8082002:	f7ff fe2e 	bl	8081c62 <_ZN9SdSpiCard11waitNotBusyEt>
 8082006:	b910      	cbnz	r0, 808200e <_ZN9SdSpiCard9writeDataEPKh+0x16>
 8082008:	235b      	movs	r3, #91	; 0x5b
 808200a:	7023      	strb	r3, [r4, #0]
 808200c:	e005      	b.n	808201a <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 808200e:	462a      	mov	r2, r5
 8082010:	21fc      	movs	r1, #252	; 0xfc
 8082012:	4620      	mov	r0, r4
 8082014:	f7ff ff97 	bl	8081f46 <_ZN9SdSpiCard9writeDataEhPKh>
 8082018:	b918      	cbnz	r0, 8082022 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
 808201a:	4620      	mov	r0, r4
 808201c:	f7ff fddd 	bl	8081bda <_ZN9SdSpiCard7spiStopEv>
  return false;
 8082020:	2000      	movs	r0, #0
}
 8082022:	bd38      	pop	{r3, r4, r5, pc}

08082024 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 8082024:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8082026:	7a83      	ldrb	r3, [r0, #10]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 8082028:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 808202a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 808202c:	bf18      	it	ne
 808202e:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 8082030:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 8082032:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
 8082034:	f7ff fe2a 	bl	8081c8c <_ZN9SdSpiCard11cardCommandEhm>
 8082038:	b130      	cbz	r0, 8082048 <_ZN9SdSpiCard10writeStartEm+0x24>
 808203a:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
 808203c:	4620      	mov	r0, r4
 808203e:	7023      	strb	r3, [r4, #0]
 8082040:	f7ff fdcb 	bl	8081bda <_ZN9SdSpiCard7spiStopEv>
  return false;
 8082044:	2000      	movs	r0, #0
 8082046:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
 8082048:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 808204a:	bd10      	pop	{r4, pc}

0808204c <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 808204c:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 808204e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8082052:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8082054:	f7ff fe05 	bl	8081c62 <_ZN9SdSpiCard11waitNotBusyEt>
 8082058:	4605      	mov	r5, r0
 808205a:	b120      	cbz	r0, 8082066 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 808205c:	21fd      	movs	r1, #253	; 0xfd
 808205e:	6860      	ldr	r0, [r4, #4]
 8082060:	f000 f862 	bl	8082128 <_ZN14SdSpiAltDriver4sendEh>
 8082064:	e001      	b.n	808206a <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8082066:	2356      	movs	r3, #86	; 0x56
 8082068:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
 808206a:	4620      	mov	r0, r4
 808206c:	f7ff fdb5 	bl	8081bda <_ZN9SdSpiCard7spiStopEv>
  return false;
}
 8082070:	4628      	mov	r0, r5
 8082072:	bd38      	pop	{r3, r4, r5, pc}

08082074 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8082074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082076:	4605      	mov	r5, r0
 8082078:	4616      	mov	r6, r2
 808207a:	461f      	mov	r7, r3
  if (!writeStart(block)) {
 808207c:	f7ff ffd2 	bl	8082024 <_ZN9SdSpiCard10writeStartEm>
 8082080:	b170      	cbz	r0, 80820a0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
 8082082:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8082084:	42bc      	cmp	r4, r7
 8082086:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 808208a:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 808208c:	d004      	beq.n	8082098 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
 808208e:	f7ff ffb3 	bl	8081ff8 <_ZN9SdSpiCard9writeDataEPKh>
 8082092:	b128      	cbz	r0, 80820a0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8082094:	3401      	adds	r4, #1
 8082096:	e7f5      	b.n	8082084 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
 8082098:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 808209c:	f7ff bfd6 	b.w	808204c <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
 80820a0:	4628      	mov	r0, r5
 80820a2:	f7ff fd9a 	bl	8081bda <_ZN9SdSpiCard7spiStopEv>
  return false;
}
 80820a6:	2000      	movs	r0, #0
 80820a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080820aa <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
 80820aa:	f000 bb41 	b.w	8082730 <HAL_Pin_Map>

080820ae <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
 80820ae:	f000 bb3f 	b.w	8082730 <HAL_Pin_Map>

080820b2 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
 80820b2:	f000 bb3d 	b.w	8082730 <HAL_Pin_Map>
	...

080820b8 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 80820b8:	4b01      	ldr	r3, [pc, #4]	; (80820c0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 80820ba:	2201      	movs	r2, #1
 80820bc:	701a      	strb	r2, [r3, #0]
 80820be:	4770      	bx	lr
 80820c0:	20000cb4 	.word	0x20000cb4

080820c4 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
 80820c4:	1d01      	adds	r1, r0, #4
 80820c6:	6800      	ldr	r0, [r0, #0]
 80820c8:	f000 bda0 	b.w	8082c0c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

080820cc <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
 80820cc:	b510      	push	{r4, lr}
 80820ce:	4604      	mov	r4, r0
  m_csPin = csPin;
 80820d0:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
 80820d2:	6800      	ldr	r0, [r0, #0]
 80820d4:	f000 fd7c 	bl	8082bd0 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
 80820d8:	7d20      	ldrb	r0, [r4, #20]
 80820da:	2101      	movs	r1, #1
 80820dc:	f001 fd52 	bl	8083b84 <pinMode>
  digitalWrite(m_csPin, HIGH);
 80820e0:	7d20      	ldrb	r0, [r4, #20]
 80820e2:	2101      	movs	r1, #1
}
 80820e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
 80820e8:	f001 bd5d 	b.w	8083ba6 <digitalWrite>

080820ec <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
 80820ec:	6800      	ldr	r0, [r0, #0]
 80820ee:	f000 bd74 	b.w	8082bda <_ZN8SPIClass14endTransactionEv>

080820f2 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
 80820f2:	21ff      	movs	r1, #255	; 0xff
 80820f4:	6800      	ldr	r0, [r0, #0]
 80820f6:	f000 bdf9 	b.w	8082cec <_ZN8SPIClass8transferEh>
	...

080820fc <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
 80820fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80820fe:	4b08      	ldr	r3, [pc, #32]	; (8082120 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8082100:	2500      	movs	r5, #0
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8082102:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8082104:	4c07      	ldr	r4, [pc, #28]	; (8082124 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8082106:	4613      	mov	r3, r2
 8082108:	6800      	ldr	r0, [r0, #0]
 808210a:	460a      	mov	r2, r1
 808210c:	4629      	mov	r1, r5
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 808210e:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8082110:	f000 fdf2 	bl	8082cf8 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 8082114:	7823      	ldrb	r3, [r4, #0]
 8082116:	2b00      	cmp	r3, #0
 8082118:	d0fc      	beq.n	8082114 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
 808211a:	2000      	movs	r0, #0
 808211c:	b003      	add	sp, #12
 808211e:	bd30      	pop	{r4, r5, pc}
 8082120:	080820b9 	.word	0x080820b9
 8082124:	20000cb4 	.word	0x20000cb4

08082128 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
 8082128:	6800      	ldr	r0, [r0, #0]
 808212a:	f000 bddf 	b.w	8082cec <_ZN8SPIClass8transferEh>
	...

08082130 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
 8082130:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8082132:	4b07      	ldr	r3, [pc, #28]	; (8082150 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8082134:	2500      	movs	r5, #0

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8082136:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8082138:	4c06      	ldr	r4, [pc, #24]	; (8082154 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 808213a:	4613      	mov	r3, r2
 808213c:	6800      	ldr	r0, [r0, #0]
 808213e:	462a      	mov	r2, r5
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8082140:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8082142:	f000 fdd9 	bl	8082cf8 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
 8082146:	7823      	ldrb	r3, [r4, #0]
 8082148:	2b00      	cmp	r3, #0
 808214a:	d0fc      	beq.n	8082146 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
 808214c:	b003      	add	sp, #12
 808214e:	bd30      	pop	{r4, r5, pc}
 8082150:	080820b9 	.word	0x080820b9
 8082154:	20000cb4 	.word	0x20000cb4

08082158 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
 8082158:	f000 baea 	b.w	8082730 <HAL_Pin_Map>

0808215c <_ZN11TinyGPSPlusC1Ev>:
   const RawDegrees &rawLat()     { updated = false; return rawLatData; }
   const RawDegrees &rawLng()     { updated = false; return rawLngData; }
   double lat();
   double lng();

   TinyGPSLocation() : valid(false), updated(false)
 808215c:	2200      	movs	r2, #0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
 808215e:	2102      	movs	r1, #2
 8082160:	7002      	strb	r2, [r0, #0]
 8082162:	7042      	strb	r2, [r0, #1]
{
   uint16_t deg;
   uint32_t billionths;
   bool negative;
public:
   RawDegrees() : deg(0), billionths(0), negative(false)
 8082164:	8082      	strh	r2, [r0, #4]
 8082166:	6082      	str	r2, [r0, #8]
 8082168:	7302      	strb	r2, [r0, #12]
 808216a:	8202      	strh	r2, [r0, #16]
 808216c:	6142      	str	r2, [r0, #20]
 808216e:	7602      	strb	r2, [r0, #24]
 8082170:	8382      	strh	r2, [r0, #28]
 8082172:	6202      	str	r2, [r0, #32]
 8082174:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8082178:	8502      	strh	r2, [r0, #40]	; 0x28
 808217a:	62c2      	str	r2, [r0, #44]	; 0x2c
 808217c:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
   uint32_t value()           { updated = false; return date; }
   uint16_t year();
   uint8_t month();
   uint8_t day();

   TinyGPSDate() : valid(false), updated(false), date(0)
 8082180:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 8082184:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
 8082188:	63c2      	str	r2, [r0, #60]	; 0x3c
   uint8_t hour();
   uint8_t minute();
   uint8_t second();
   uint8_t centisecond();

   TinyGPSTime() : valid(false), updated(false), time(0)
 808218a:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
 808218e:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
 8082192:	64c2      	str	r2, [r0, #76]	; 0x4c
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }

   TinyGPSDecimal() : valid(false), updated(false), val(0)
 8082194:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
 8082198:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
 808219c:	6602      	str	r2, [r0, #96]	; 0x60
 808219e:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
 80821a2:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
 80821a6:	6702      	str	r2, [r0, #112]	; 0x70
 80821a8:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 80821ac:	f880 2079 	strb.w	r2, [r0, #121]	; 0x79
 80821b0:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   uint32_t value()        { updated = false; return val; }

   TinyGPSInteger() : valid(false), updated(false), val(0)
 80821b4:	f880 2088 	strb.w	r2, [r0, #136]	; 0x88
 80821b8:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
 80821bc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }

   TinyGPSDecimal() : valid(false), updated(false), val(0)
 80821c0:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
 80821c4:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
 80821c8:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
 80821cc:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
 80821d0:	f880 20a9 	strb.w	r2, [r0, #169]	; 0xa9
 80821d4:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
 80821d8:	f880 20ba 	strb.w	r2, [r0, #186]	; 0xba
 80821dc:	f880 20bb 	strb.w	r2, [r0, #187]	; 0xbb
 80821e0:	f880 20bc 	strb.w	r2, [r0, #188]	; 0xbc
 80821e4:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 80821e8:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
 80821ec:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
 80821f0:	f8c0 20cc 	str.w	r2, [r0, #204]	; 0xcc
 80821f4:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
 80821f8:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
{
  term[0] = '\0';
 80821fc:	f880 20aa 	strb.w	r2, [r0, #170]	; 0xaa
}
 8082200:	4770      	bx	lr

08082202 <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
 8082202:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 8082206:	2b05      	cmp	r3, #5
 8082208:	d802      	bhi.n	8082210 <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
 808220a:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
 808220e:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
 8082210:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8082214:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
 8082216:	bf94      	ite	ls
 8082218:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
 808221c:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
 8082220:	4770      	bx	lr

08082222 <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
 8082222:	b538      	push	{r3, r4, r5, lr}
 8082224:	4604      	mov	r4, r0
  bool negative = *term == '-';
 8082226:	7805      	ldrb	r5, [r0, #0]
  if (negative) ++term;
 8082228:	2d2d      	cmp	r5, #45	; 0x2d
 808222a:	bf08      	it	eq
 808222c:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
 808222e:	4620      	mov	r0, r4
 8082230:	f002 fa7c 	bl	808472c <atol>
 8082234:	2364      	movs	r3, #100	; 0x64
 8082236:	4358      	muls	r0, r3
 8082238:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
 808223a:	f814 3b01 	ldrb.w	r3, [r4], #1
 808223e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8082242:	2909      	cmp	r1, #9
 8082244:	d9f8      	bls.n	8082238 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
 8082246:	2b2e      	cmp	r3, #46	; 0x2e
 8082248:	d10b      	bne.n	8082262 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
 808224a:	7853      	ldrb	r3, [r2, #1]
 808224c:	3b30      	subs	r3, #48	; 0x30
 808224e:	2b09      	cmp	r3, #9
 8082250:	d807      	bhi.n	8082262 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
 8082252:	210a      	movs	r1, #10
 8082254:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
 8082258:	7893      	ldrb	r3, [r2, #2]
 808225a:	3b30      	subs	r3, #48	; 0x30
 808225c:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
 808225e:	bf98      	it	ls
 8082260:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
 8082262:	2d2d      	cmp	r5, #45	; 0x2d
 8082264:	bf08      	it	eq
 8082266:	4240      	negeq	r0, r0
}
 8082268:	bd38      	pop	{r3, r4, r5, pc}
	...

0808226c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
 808226c:	b538      	push	{r3, r4, r5, lr}
 808226e:	4604      	mov	r4, r0
 8082270:	460d      	mov	r5, r1
  uint32_t leftOfDecimal = (uint32_t)atol(term);
 8082272:	f002 fa5b 	bl	808472c <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
 8082276:	2364      	movs	r3, #100	; 0x64
 8082278:	fbb0 f2f3 	udiv	r2, r0, r3
 808227c:	fb03 0012 	mls	r0, r3, r2, r0
 8082280:	4b11      	ldr	r3, [pc, #68]	; (80822c8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)

  deg.deg = (int16_t)(leftOfDecimal / 100);
 8082282:	802a      	strh	r2, [r5, #0]
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
  uint32_t leftOfDecimal = (uint32_t)atol(term);
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
 8082284:	4343      	muls	r3, r0
 8082286:	4620      	mov	r0, r4

  deg.deg = (int16_t)(leftOfDecimal / 100);

  while (isdigit(*term))
 8082288:	7802      	ldrb	r2, [r0, #0]
 808228a:	4604      	mov	r4, r0
 808228c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8082290:	2909      	cmp	r1, #9
 8082292:	f100 0001 	add.w	r0, r0, #1
 8082296:	d9f7      	bls.n	8082288 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
 8082298:	2a2e      	cmp	r2, #46	; 0x2e
 808229a:	d10b      	bne.n	80822b4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
 808229c:	490a      	ldr	r1, [pc, #40]	; (80822c8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
 808229e:	200a      	movs	r0, #10

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
 80822a0:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 80822a4:	3a30      	subs	r2, #48	; 0x30
 80822a6:	2a09      	cmp	r2, #9
 80822a8:	d804      	bhi.n	80822b4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
    {
      multiplier /= 10;
 80822aa:	fbb1 f1f0 	udiv	r1, r1, r0
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
 80822ae:	fb01 3302 	mla	r3, r1, r2, r3

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
 80822b2:	e7f5      	b.n	80822a0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    {
      multiplier /= 10;
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
 80822b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80822b8:	3301      	adds	r3, #1
 80822ba:	2203      	movs	r2, #3
 80822bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80822c0:	606b      	str	r3, [r5, #4]
  deg.negative = false;
 80822c2:	2300      	movs	r3, #0
 80822c4:	722b      	strb	r3, [r5, #8]
 80822c6:	bd38      	pop	{r3, r4, r5, pc}
 80822c8:	00989680 	.word	0x00989680

080822cc <_ZN15TinyGPSLocation6commitEv>:
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   rawLatData = rawNewLatData;
 80822cc:	4603      	mov	r3, r0
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
 80822ce:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
 80822d0:	f853 2f1c 	ldr.w	r2, [r3, #28]!
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
 80822d4:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
 80822d6:	6042      	str	r2, [r0, #4]
 80822d8:	685a      	ldr	r2, [r3, #4]
 80822da:	6082      	str	r2, [r0, #8]
 80822dc:	7a1b      	ldrb	r3, [r3, #8]
 80822de:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
 80822e0:	4603      	mov	r3, r0
 80822e2:	f853 2f28 	ldr.w	r2, [r3, #40]!
 80822e6:	6102      	str	r2, [r0, #16]
 80822e8:	685a      	ldr	r2, [r3, #4]
 80822ea:	6142      	str	r2, [r0, #20]
 80822ec:	7a1b      	ldrb	r3, [r3, #8]
 80822ee:	7603      	strb	r3, [r0, #24]
 80822f0:	f000 faa6 	bl	8082840 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
 80822f4:	2301      	movs	r3, #1

void TinyGPSLocation::commit()
{
   rawLatData = rawNewLatData;
   rawLngData = rawNewLngData;
   lastCommitTime = millis();
 80822f6:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
 80822f8:	7063      	strb	r3, [r4, #1]
 80822fa:	7023      	strb	r3, [r4, #0]
 80822fc:	bd10      	pop	{r4, pc}
	...

08082300 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
 8082300:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
 8082302:	2300      	movs	r3, #0
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
 8082304:	4604      	mov	r4, r0
   updated = false;
 8082306:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
 8082308:	6880      	ldr	r0, [r0, #8]
 808230a:	f001 ff87 	bl	808421c <__aeabi_ui2d>
 808230e:	a30a      	add	r3, pc, #40	; (adr r3, 8082338 <_ZN15TinyGPSLocation3latEv+0x38>)
 8082310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082314:	f002 f922 	bl	808455c <__aeabi_ddiv>
 8082318:	4606      	mov	r6, r0
 808231a:	88a0      	ldrh	r0, [r4, #4]
 808231c:	460f      	mov	r7, r1
 808231e:	f001 ff8d 	bl	808423c <__aeabi_i2d>
 8082322:	460b      	mov	r3, r1
 8082324:	4602      	mov	r2, r0
 8082326:	4639      	mov	r1, r7
 8082328:	4630      	mov	r0, r6
 808232a:	f001 fe3b 	bl	8083fa4 <__adddf3>
   return rawLatData.negative ? -ret : ret;
 808232e:	7b23      	ldrb	r3, [r4, #12]
 8082330:	b10b      	cbz	r3, 8082336 <_ZN15TinyGPSLocation3latEv+0x36>
 8082332:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
}
 8082336:	bdd0      	pop	{r4, r6, r7, pc}
 8082338:	00000000 	.word	0x00000000
 808233c:	41cdcd65 	.word	0x41cdcd65

08082340 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
 8082340:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
 8082342:	2300      	movs	r3, #0
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   return rawLatData.negative ? -ret : ret;
}

double TinyGPSLocation::lng()
{
 8082344:	4604      	mov	r4, r0
   updated = false;
 8082346:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
 8082348:	6940      	ldr	r0, [r0, #20]
 808234a:	f001 ff67 	bl	808421c <__aeabi_ui2d>
 808234e:	a30a      	add	r3, pc, #40	; (adr r3, 8082378 <_ZN15TinyGPSLocation3lngEv+0x38>)
 8082350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082354:	f002 f902 	bl	808455c <__aeabi_ddiv>
 8082358:	4606      	mov	r6, r0
 808235a:	8a20      	ldrh	r0, [r4, #16]
 808235c:	460f      	mov	r7, r1
 808235e:	f001 ff6d 	bl	808423c <__aeabi_i2d>
 8082362:	460b      	mov	r3, r1
 8082364:	4602      	mov	r2, r0
 8082366:	4639      	mov	r1, r7
 8082368:	4630      	mov	r0, r6
 808236a:	f001 fe1b 	bl	8083fa4 <__adddf3>
   return rawLngData.negative ? -ret : ret;
 808236e:	7e23      	ldrb	r3, [r4, #24]
 8082370:	b10b      	cbz	r3, 8082376 <_ZN15TinyGPSLocation3lngEv+0x36>
 8082372:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
}
 8082376:	bdd0      	pop	{r4, r6, r7, pc}
 8082378:	00000000 	.word	0x00000000
 808237c:	41cdcd65 	.word	0x41cdcd65

08082380 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
 8082380:	b510      	push	{r4, lr}
   date = newDate;
 8082382:	6883      	ldr	r3, [r0, #8]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   return rawLngData.negative ? -ret : ret;
}

void TinyGPSDate::commit()
{
 8082384:	4604      	mov	r4, r0
   date = newDate;
 8082386:	6043      	str	r3, [r0, #4]
 8082388:	f000 fa5a 	bl	8082840 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
 808238c:	2301      	movs	r3, #1
}

void TinyGPSDate::commit()
{
   date = newDate;
   lastCommitTime = millis();
 808238e:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
 8082390:	7063      	strb	r3, [r4, #1]
 8082392:	7023      	strb	r3, [r4, #0]
 8082394:	bd10      	pop	{r4, pc}

08082396 <_ZN11TinyGPSTime6commitEv>:
}

void TinyGPSTime::commit()
{
 8082396:	b510      	push	{r4, lr}
   time = newTime;
 8082398:	6883      	ldr	r3, [r0, #8]
   lastCommitTime = millis();
   valid = updated = true;
}

void TinyGPSTime::commit()
{
 808239a:	4604      	mov	r4, r0
   time = newTime;
 808239c:	6043      	str	r3, [r0, #4]
 808239e:	f000 fa4f 	bl	8082840 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
 80823a2:	2301      	movs	r3, #1
}

void TinyGPSTime::commit()
{
   time = newTime;
   lastCommitTime = millis();
 80823a4:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
 80823a6:	7063      	strb	r3, [r4, #1]
 80823a8:	7023      	strb	r3, [r4, #0]
 80823aa:	bd10      	pop	{r4, pc}

080823ac <_ZN11TinyGPSTime7setTimeEPKc>:
}

void TinyGPSTime::setTime(const char *term)
{
 80823ac:	b510      	push	{r4, lr}
 80823ae:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
 80823b0:	4608      	mov	r0, r1
 80823b2:	f7ff ff36 	bl	8082222 <_ZN11TinyGPSPlus12parseDecimalEPKc>
 80823b6:	60a0      	str	r0, [r4, #8]
 80823b8:	bd10      	pop	{r4, pc}

080823ba <_ZN11TinyGPSDate7setDateEPKc>:
}

void TinyGPSDate::setDate(const char *term)
{
 80823ba:	b510      	push	{r4, lr}
 80823bc:	4604      	mov	r4, r0
   newDate = atol(term);
 80823be:	4608      	mov	r0, r1
 80823c0:	f002 f9b4 	bl	808472c <atol>
 80823c4:	60a0      	str	r0, [r4, #8]
 80823c6:	bd10      	pop	{r4, pc}

080823c8 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
 80823c8:	b510      	push	{r4, lr}
   val = newval;
 80823ca:	68c3      	ldr	r3, [r0, #12]
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
 80823cc:	4604      	mov	r4, r0
   val = newval;
 80823ce:	6083      	str	r3, [r0, #8]
 80823d0:	f000 fa36 	bl	8082840 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
 80823d4:	2301      	movs	r3, #1
}

void TinyGPSDecimal::commit()
{
   val = newval;
   lastCommitTime = millis();
 80823d6:	6060      	str	r0, [r4, #4]
   valid = updated = true;
 80823d8:	7063      	strb	r3, [r4, #1]
 80823da:	7023      	strb	r3, [r4, #0]
 80823dc:	bd10      	pop	{r4, pc}

080823de <_ZN14TinyGPSDecimal3setEPKc>:
}

void TinyGPSDecimal::set(const char *term)
{
 80823de:	b510      	push	{r4, lr}
 80823e0:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
 80823e2:	4608      	mov	r0, r1
 80823e4:	f7ff ff1d 	bl	8082222 <_ZN11TinyGPSPlus12parseDecimalEPKc>
 80823e8:	60e0      	str	r0, [r4, #12]
 80823ea:	bd10      	pop	{r4, pc}

080823ec <_ZN14TinyGPSInteger6commitEv>:
}

void TinyGPSInteger::commit()
{
 80823ec:	b510      	push	{r4, lr}
   val = newval;
 80823ee:	68c3      	ldr	r3, [r0, #12]
{
   newval = TinyGPSPlus::parseDecimal(term);
}

void TinyGPSInteger::commit()
{
 80823f0:	4604      	mov	r4, r0
   val = newval;
 80823f2:	6083      	str	r3, [r0, #8]
 80823f4:	f000 fa24 	bl	8082840 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
 80823f8:	2301      	movs	r3, #1
}

void TinyGPSInteger::commit()
{
   val = newval;
   lastCommitTime = millis();
 80823fa:	6060      	str	r0, [r4, #4]
   valid = updated = true;
 80823fc:	7063      	strb	r3, [r4, #1]
 80823fe:	7023      	strb	r3, [r4, #0]
 8082400:	bd10      	pop	{r4, pc}

08082402 <_ZN14TinyGPSInteger3setEPKc>:
}

void TinyGPSInteger::set(const char *term)
{
 8082402:	b510      	push	{r4, lr}
 8082404:	4604      	mov	r4, r0
   newval = atol(term);
 8082406:	4608      	mov	r0, r1
 8082408:	f002 f990 	bl	808472c <atol>
 808240c:	60e0      	str	r0, [r4, #12]
 808240e:	bd10      	pop	{r4, pc}

08082410 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
 8082410:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
 8082412:	4601      	mov	r1, r0
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
 8082414:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
 8082416:	3010      	adds	r0, #16
 8082418:	f002 f9ee 	bl	80847f8 <strcpy>
 808241c:	f000 fa10 	bl	8082840 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
 8082420:	2301      	movs	r3, #1
}

void TinyGPSCustom::commit()
{
   strcpy(this->buffer, this->stagingBuffer);
   lastCommitTime = millis();
 8082422:	6220      	str	r0, [r4, #32]
   valid = updated = true;
 8082424:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 8082428:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 808242c:	bd10      	pop	{r4, pc}

0808242e <_ZN13TinyGPSCustom3setEPKc>:
}

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
 808242e:	2210      	movs	r2, #16
 8082430:	f002 ba0d 	b.w	808484e <strncpy>

08082434 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
 8082434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
 8082436:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
 808243a:	4604      	mov	r4, r0
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
 808243c:	2d00      	cmp	r5, #0
 808243e:	d067      	beq.n	8082510 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xdc>
  {
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
 8082440:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
 8082444:	f7ff fedd 	bl	8082202 <_ZN11TinyGPSPlus7fromHexEc>
 8082448:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
 808244c:	4602      	mov	r2, r0
 808244e:	4620      	mov	r0, r4
 8082450:	f7ff fed7 	bl	8082202 <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
 8082454:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 8082458:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 808245c:	b2c0      	uxtb	r0, r0
 808245e:	4283      	cmp	r3, r0
 8082460:	d14f      	bne.n	8082502 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xce>
    {
      passedChecksumCount++;
 8082462:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8082466:	3301      	adds	r3, #1
 8082468:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
      if (sentenceHasFix)
 808246c:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 8082470:	b123      	cbz	r3, 808247c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x48>
        ++sentencesWithFixCount;
 8082472:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8082476:	3301      	adds	r3, #1
 8082478:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc

      switch(curSentenceType)
 808247c:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 8082480:	b1b3      	cbz	r3, 80824b0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7c>
 8082482:	2b01      	cmp	r3, #1
 8082484:	d12a      	bne.n	80824dc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa8>
      {
      case GPS_SENTENCE_GPRMC:
        date.commit();
 8082486:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808248a:	f7ff ff79 	bl	8082380 <_ZN11TinyGPSDate6commitEv>
        time.commit();
 808248e:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8082492:	f7ff ff80 	bl	8082396 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
 8082496:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 808249a:	b1fb      	cbz	r3, 80824dc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa8>
        {
           location.commit();
 808249c:	4620      	mov	r0, r4
 808249e:	f7ff ff15 	bl	80822cc <_ZN15TinyGPSLocation6commitEv>
           speed.commit();
 80824a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80824a6:	f7ff ff8f 	bl	80823c8 <_ZN14TinyGPSDecimal6commitEv>
           course.commit();
 80824aa:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80824ae:	e013      	b.n	80824d8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa4>
        }
        break;
      case GPS_SENTENCE_GPGGA:
        time.commit();
 80824b0:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80824b4:	f7ff ff6f 	bl	8082396 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
 80824b8:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 80824bc:	b133      	cbz	r3, 80824cc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x98>
        {
          location.commit();
 80824be:	4620      	mov	r0, r4
 80824c0:	f7ff ff04 	bl	80822cc <_ZN15TinyGPSLocation6commitEv>
          altitude.commit();
 80824c4:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80824c8:	f7ff ff7e 	bl	80823c8 <_ZN14TinyGPSDecimal6commitEv>
        }
        satellites.commit();
 80824cc:	f104 0088 	add.w	r0, r4, #136	; 0x88
 80824d0:	f7ff ff8c 	bl	80823ec <_ZN14TinyGPSInteger6commitEv>
        hdop.commit();
 80824d4:	f104 0098 	add.w	r0, r4, #152	; 0x98
 80824d8:	f7ff ff76 	bl	80823c8 <_ZN14TinyGPSDecimal6commitEv>
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
 80824dc:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
 80824e0:	2e00      	cmp	r6, #0
 80824e2:	f000 80c5 	beq.w	8082670 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
 80824e6:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80824ea:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 80824ec:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80824ee:	f002 f979 	bl	80847e4 <strcmp>
 80824f2:	2800      	cmp	r0, #0
 80824f4:	f040 80bc 	bne.w	8082670 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
         p->commit();
 80824f8:	4630      	mov	r0, r6
 80824fa:	f7ff ff89 	bl	8082410 <_ZN13TinyGPSCustom6commitEv>
        hdop.commit();
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
 80824fe:	6b36      	ldr	r6, [r6, #48]	; 0x30
 8082500:	e7ee      	b.n	80824e0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xac>
      return true;
    }

    else
    {
      ++failedChecksumCount;
 8082502:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    }

    return false;
 8082506:	2500      	movs	r5, #0
      return true;
    }

    else
    {
      ++failedChecksumCount;
 8082508:	3301      	adds	r3, #1
 808250a:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    }

    return false;
 808250e:	e0af      	b.n	8082670 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
  }

  // the first term determines the sentence type
  if (curTermNumber == 0)
 8082510:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
 8082514:	bb2a      	cbnz	r2, 8082562 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x12e>
  {
    if (!strcmp(term, _GPRMCterm))
 8082516:	f100 07aa 	add.w	r7, r0, #170	; 0xaa
 808251a:	4956      	ldr	r1, [pc, #344]	; (8082674 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>)
 808251c:	4638      	mov	r0, r7
 808251e:	f002 f961 	bl	80847e4 <strcmp>
 8082522:	b908      	cbnz	r0, 8082528 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf4>
      curSentenceType = GPS_SENTENCE_GPRMC;
 8082524:	2301      	movs	r3, #1
 8082526:	e008      	b.n	808253a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x106>
    else if (!strcmp(term, _GPGGAterm))
 8082528:	4953      	ldr	r1, [pc, #332]	; (8082678 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x244>)
 808252a:	4638      	mov	r0, r7
 808252c:	f002 f95a 	bl	80847e4 <strcmp>
 8082530:	b910      	cbnz	r0, 8082538 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x104>
      curSentenceType = GPS_SENTENCE_GPGGA;
 8082532:	f884 50b9 	strb.w	r5, [r4, #185]	; 0xb9
 8082536:	e002      	b.n	808253e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10a>
    else
      curSentenceType = GPS_SENTENCE_OTHER;
 8082538:	2302      	movs	r3, #2
 808253a:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
 808253e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8082542:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8082546:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
 808254a:	2e00      	cmp	r6, #0
 808254c:	f000 8090 	beq.w	8082670 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
 8082550:	4639      	mov	r1, r7
 8082552:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8082554:	f002 f946 	bl	80847e4 <strcmp>
 8082558:	2800      	cmp	r0, #0
 808255a:	f280 8085 	bge.w	8082668 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x234>
 808255e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8082560:	e7ef      	b.n	8082542 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10e>
       customCandidates = NULL;

    return false;
  }

  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
 8082562:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
 8082566:	2902      	cmp	r1, #2
 8082568:	d066      	beq.n	8082638 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
 808256a:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 808256e:	2b00      	cmp	r3, #0
 8082570:	d062      	beq.n	8082638 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    switch(COMBINE(curSentenceType, curTermNumber))
 8082572:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8082576:	3a01      	subs	r2, #1
 8082578:	2a28      	cmp	r2, #40	; 0x28
 808257a:	d85d      	bhi.n	8082638 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
 808257c:	e8df f002 	tbb	[pc, r2]
 8082580:	2a232015 	.word	0x2a232015
 8082584:	534d4631 	.word	0x534d4631
 8082588:	5c5c5c57 	.word	0x5c5c5c57
 808258c:	5c5c5c5c 	.word	0x5c5c5c5c
 8082590:	5c5c5c5c 	.word	0x5c5c5c5c
 8082594:	5c5c5c5c 	.word	0x5c5c5c5c
 8082598:	5c5c5c5c 	.word	0x5c5c5c5c
 808259c:	5c5c5c5c 	.word	0x5c5c5c5c
 80825a0:	23201b15 	.word	0x23201b15
 80825a4:	3c38312a 	.word	0x3c38312a
 80825a8:	40          	.byte	0x40
 80825a9:	00          	.byte	0x00
  {
    case COMBINE(GPS_SENTENCE_GPRMC, 1): // Time in both sentences
    case COMBINE(GPS_SENTENCE_GPGGA, 1):
      time.setTime(term);
 80825aa:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 80825ae:	3048      	adds	r0, #72	; 0x48
 80825b0:	f7ff fefc 	bl	80823ac <_ZN11TinyGPSTime7setTimeEPKc>
      break;
 80825b4:	e040      	b.n	8082638 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPRMC, 2): // GPRMC validity
      sentenceHasFix = term[0] == 'A';
 80825b6:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 80825ba:	4243      	negs	r3, r0
 80825bc:	4143      	adcs	r3, r0
 80825be:	e029      	b.n	8082614 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1e0>
   valid = updated = true;
}

void TinyGPSLocation::setLatitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
 80825c0:	f100 011c 	add.w	r1, r0, #28
 80825c4:	e008      	b.n	80825d8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1a4>
    case COMBINE(GPS_SENTENCE_GPGGA, 2):
      location.setLatitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 4): // N/S
    case COMBINE(GPS_SENTENCE_GPGGA, 3):
      location.rawNewLatData.negative = term[0] == 'S';
 80825c6:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
 80825ca:	424b      	negs	r3, r1
 80825cc:	414b      	adcs	r3, r1
 80825ce:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      break;
 80825d2:	e031      	b.n	8082638 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
}

void TinyGPSLocation::setLongitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
 80825d4:	f100 0128 	add.w	r1, r0, #40	; 0x28
 80825d8:	f104 00aa 	add.w	r0, r4, #170	; 0xaa
 80825dc:	f7ff fe46 	bl	808226c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
 80825e0:	e02a      	b.n	8082638 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 4):
      location.setLongitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 6): // E/W
    case COMBINE(GPS_SENTENCE_GPGGA, 5):
      location.rawNewLngData.negative = term[0] == 'W';
 80825e2:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
 80825e6:	4253      	negs	r3, r2
 80825e8:	4153      	adcs	r3, r2
 80825ea:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
      break;
 80825ee:	e023      	b.n	8082638 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
      speed.set(term);
 80825f0:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 80825f4:	3058      	adds	r0, #88	; 0x58
 80825f6:	e01d      	b.n	8082634 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
      course.set(term);
 80825f8:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 80825fc:	3068      	adds	r0, #104	; 0x68
 80825fe:	e019      	b.n	8082634 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
      date.setDate(term);
 8082600:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 8082604:	3038      	adds	r0, #56	; 0x38
 8082606:	f7ff fed8 	bl	80823ba <_ZN11TinyGPSDate7setDateEPKc>
      break;
 808260a:	e015      	b.n	8082638 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
      sentenceHasFix = term[0] > '0';
 808260c:	2b30      	cmp	r3, #48	; 0x30
 808260e:	bf94      	ite	ls
 8082610:	2300      	movls	r3, #0
 8082612:	2301      	movhi	r3, #1
 8082614:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
 8082618:	e00e      	b.n	8082638 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA)
      satellites.set(term);
 808261a:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 808261e:	3088      	adds	r0, #136	; 0x88
 8082620:	f7ff feef 	bl	8082402 <_ZN14TinyGPSInteger3setEPKc>
      break;
 8082624:	e008      	b.n	8082638 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 8): // HDOP
      hdop.set(term);
 8082626:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 808262a:	3098      	adds	r0, #152	; 0x98
 808262c:	e002      	b.n	8082634 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      break;
    case COMBINE(GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
      altitude.set(term);
 808262e:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 8082632:	3078      	adds	r0, #120	; 0x78
 8082634:	f7ff fed3 	bl	80823de <_ZN14TinyGPSDecimal3setEPKc>
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
 8082638:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
    if (p->termNumber == curTermNumber)
         p->set(term);
 808263c:	f104 07aa 	add.w	r7, r4, #170	; 0xaa
      altitude.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
 8082640:	b1b6      	cbz	r6, 8082670 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
 8082642:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8082646:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8082648:	6a99      	ldr	r1, [r3, #40]	; 0x28
 808264a:	f002 f8cb 	bl	80847e4 <strcmp>
 808264e:	b978      	cbnz	r0, 8082670 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
 8082650:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8082652:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
 8082656:	429a      	cmp	r2, r3
 8082658:	dc0a      	bgt.n	8082670 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
    if (p->termNumber == curTermNumber)
 808265a:	d103      	bne.n	8082664 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x230>
         p->set(term);
 808265c:	4639      	mov	r1, r7
 808265e:	4630      	mov	r0, r6
 8082660:	f7ff fee5 	bl	808242e <_ZN13TinyGPSCustom3setEPKc>
      altitude.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
 8082664:	6b36      	ldr	r6, [r6, #48]	; 0x30
 8082666:	e7eb      	b.n	8082640 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x20c>
    else
      curSentenceType = GPS_SENTENCE_OTHER;

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
 8082668:	d002      	beq.n	8082670 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
       customCandidates = NULL;
 808266a:	2300      	movs	r3, #0
 808266c:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
    if (p->termNumber == curTermNumber)
         p->set(term);

  return false;
}
 8082670:	4628      	mov	r0, r5
 8082672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8082674:	08084b86 	.word	0x08084b86
 8082678:	08084b8c 	.word	0x08084b8c

0808267c <_ZN11TinyGPSPlus6encodeEc>:
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
 808267c:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
 808267e:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8

  switch(c)
 8082682:	2924      	cmp	r1, #36	; 0x24
// public methods
//

bool TinyGPSPlus::encode(char c)
{
  ++encodedCharCount;
 8082684:	f103 0301 	add.w	r3, r3, #1
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
 8082688:	4604      	mov	r4, r0
 808268a:	460d      	mov	r5, r1
  ++encodedCharCount;
 808268c:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

  switch(c)
 8082690:	d02a      	beq.n	80826e8 <_ZN11TinyGPSPlus6encodeEc+0x6c>
 8082692:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
 8082696:	d804      	bhi.n	80826a2 <_ZN11TinyGPSPlus6encodeEc+0x26>
 8082698:	290a      	cmp	r1, #10
 808269a:	d00c      	beq.n	80826b6 <_ZN11TinyGPSPlus6encodeEc+0x3a>
 808269c:	290d      	cmp	r1, #13
 808269e:	d132      	bne.n	8082706 <_ZN11TinyGPSPlus6encodeEc+0x8a>
 80826a0:	e009      	b.n	80826b6 <_ZN11TinyGPSPlus6encodeEc+0x3a>
 80826a2:	292a      	cmp	r1, #42	; 0x2a
 80826a4:	d007      	beq.n	80826b6 <_ZN11TinyGPSPlus6encodeEc+0x3a>
 80826a6:	292c      	cmp	r1, #44	; 0x2c
 80826a8:	d12d      	bne.n	8082706 <_ZN11TinyGPSPlus6encodeEc+0x8a>
  {
  case ',': // term terminators
    parity ^= (uint8_t)c;
 80826aa:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
 80826ae:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
 80826b2:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
  case '\r':
  case '\n':
  case '*':
    {
      bool isValidSentence = false;
      if (curTermOffset < sizeof(term))
 80826b6:	2b0e      	cmp	r3, #14
 80826b8:	f04f 0000 	mov.w	r0, #0
 80826bc:	d805      	bhi.n	80826ca <_ZN11TinyGPSPlus6encodeEc+0x4e>
      {
        term[curTermOffset] = 0;
 80826be:	4423      	add	r3, r4
 80826c0:	f883 00aa 	strb.w	r0, [r3, #170]	; 0xaa
        isValidSentence = endOfTermHandler();
 80826c4:	4620      	mov	r0, r4
 80826c6:	f7ff feb5 	bl	8082434 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      }
      ++curTermNumber;
 80826ca:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
 80826ce:	3301      	adds	r3, #1
 80826d0:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
      curTermOffset = 0;
 80826d4:	2300      	movs	r3, #0
 80826d6:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
      isChecksumTerm = c == '*';
 80826da:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
 80826de:	425d      	negs	r5, r3
 80826e0:	415d      	adcs	r5, r3
 80826e2:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
      return isValidSentence;
 80826e6:	bd38      	pop	{r3, r4, r5, pc}
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
 80826e8:	2000      	movs	r0, #0
    parity = 0;
    curSentenceType = GPS_SENTENCE_OTHER;
 80826ea:	2302      	movs	r3, #2
      return isValidSentence;
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
 80826ec:	f884 00bb 	strb.w	r0, [r4, #187]	; 0xbb
 80826f0:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
    parity = 0;
 80826f4:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
    curSentenceType = GPS_SENTENCE_OTHER;
 80826f8:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    isChecksumTerm = false;
 80826fc:	f884 00a9 	strb.w	r0, [r4, #169]	; 0xa9
    sentenceHasFix = false;
 8082700:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    return false;
 8082704:	bd38      	pop	{r3, r4, r5, pc}

  default: // ordinary characters
    if (curTermOffset < sizeof(term) - 1)
 8082706:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
 8082708:	bf9f      	itttt	ls
 808270a:	1c5a      	addls	r2, r3, #1
 808270c:	191b      	addls	r3, r3, r4
 808270e:	f884 20bb 	strbls.w	r2, [r4, #187]	; 0xbb
 8082712:	f883 50aa 	strbls.w	r5, [r3, #170]	; 0xaa
    if (!isChecksumTerm)
 8082716:	f894 00a9 	ldrb.w	r0, [r4, #169]	; 0xa9
 808271a:	b928      	cbnz	r0, 8082728 <_ZN11TinyGPSPlus6encodeEc+0xac>
      parity ^= c;
 808271c:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
 8082720:	404d      	eors	r5, r1
 8082722:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
 8082726:	bd38      	pop	{r3, r4, r5, pc}
    return false;
 8082728:	2000      	movs	r0, #0
  }

  return false;
}
 808272a:	bd38      	pop	{r3, r4, r5, pc}

0808272c <_GLOBAL__sub_I__ZN11TinyGPSPlusC2Ev>:
 808272c:	f000 b800 	b.w	8082730 <HAL_Pin_Map>

08082730 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 8082730:	b508      	push	{r3, lr}
 8082732:	4b02      	ldr	r3, [pc, #8]	; (808273c <HAL_Pin_Map+0xc>)
 8082734:	681b      	ldr	r3, [r3, #0]
 8082736:	681b      	ldr	r3, [r3, #0]
 8082738:	9301      	str	r3, [sp, #4]
 808273a:	bd08      	pop	{r3, pc}
 808273c:	080401b0 	.word	0x080401b0

08082740 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8082740:	b508      	push	{r3, lr}
 8082742:	4b02      	ldr	r3, [pc, #8]	; (808274c <HAL_Validate_Pin_Function+0xc>)
 8082744:	681b      	ldr	r3, [r3, #0]
 8082746:	685b      	ldr	r3, [r3, #4]
 8082748:	9301      	str	r3, [sp, #4]
 808274a:	bd08      	pop	{r3, pc}
 808274c:	080401b0 	.word	0x080401b0

08082750 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8082750:	b508      	push	{r3, lr}
 8082752:	4b02      	ldr	r3, [pc, #8]	; (808275c <HAL_Pin_Mode+0xc>)
 8082754:	681b      	ldr	r3, [r3, #0]
 8082756:	689b      	ldr	r3, [r3, #8]
 8082758:	9301      	str	r3, [sp, #4]
 808275a:	bd08      	pop	{r3, pc}
 808275c:	080401b0 	.word	0x080401b0

08082760 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8082760:	b508      	push	{r3, lr}
 8082762:	4b02      	ldr	r3, [pc, #8]	; (808276c <HAL_Get_Pin_Mode+0xc>)
 8082764:	681b      	ldr	r3, [r3, #0]
 8082766:	68db      	ldr	r3, [r3, #12]
 8082768:	9301      	str	r3, [sp, #4]
 808276a:	bd08      	pop	{r3, pc}
 808276c:	080401b0 	.word	0x080401b0

08082770 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8082770:	b508      	push	{r3, lr}
 8082772:	4b02      	ldr	r3, [pc, #8]	; (808277c <HAL_GPIO_Write+0xc>)
 8082774:	681b      	ldr	r3, [r3, #0]
 8082776:	691b      	ldr	r3, [r3, #16]
 8082778:	9301      	str	r3, [sp, #4]
 808277a:	bd08      	pop	{r3, pc}
 808277c:	080401b0 	.word	0x080401b0

08082780 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 8082780:	b508      	push	{r3, lr}
 8082782:	4b02      	ldr	r3, [pc, #8]	; (808278c <HAL_GPIO_Read+0xc>)
 8082784:	681b      	ldr	r3, [r3, #0]
 8082786:	695b      	ldr	r3, [r3, #20]
 8082788:	9301      	str	r3, [sp, #4]
 808278a:	bd08      	pop	{r3, pc}
 808278c:	080401b0 	.word	0x080401b0

08082790 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 8082790:	b508      	push	{r3, lr}
 8082792:	4b02      	ldr	r3, [pc, #8]	; (808279c <HAL_ADC_Read+0xc>)
 8082794:	681b      	ldr	r3, [r3, #0]
 8082796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082798:	9301      	str	r3, [sp, #4]
 808279a:	bd08      	pop	{r3, pc}
 808279c:	080401b0 	.word	0x080401b0

080827a0 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80827a0:	b508      	push	{r3, lr}
 80827a2:	4b02      	ldr	r3, [pc, #8]	; (80827ac <HAL_SPI_Begin+0xc>)
 80827a4:	681b      	ldr	r3, [r3, #0]
 80827a6:	681b      	ldr	r3, [r3, #0]
 80827a8:	9301      	str	r3, [sp, #4]
 80827aa:	bd08      	pop	{r3, pc}
 80827ac:	080401b4 	.word	0x080401b4

080827b0 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80827b0:	b508      	push	{r3, lr}
 80827b2:	4b02      	ldr	r3, [pc, #8]	; (80827bc <HAL_SPI_Send_Receive_Data+0xc>)
 80827b4:	681b      	ldr	r3, [r3, #0]
 80827b6:	695b      	ldr	r3, [r3, #20]
 80827b8:	9301      	str	r3, [sp, #4]
 80827ba:	bd08      	pop	{r3, pc}
 80827bc:	080401b4 	.word	0x080401b4

080827c0 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80827c0:	b508      	push	{r3, lr}
 80827c2:	4b02      	ldr	r3, [pc, #8]	; (80827cc <HAL_SPI_Init+0xc>)
 80827c4:	681b      	ldr	r3, [r3, #0]
 80827c6:	69db      	ldr	r3, [r3, #28]
 80827c8:	9301      	str	r3, [sp, #4]
 80827ca:	bd08      	pop	{r3, pc}
 80827cc:	080401b4 	.word	0x080401b4

080827d0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80827d0:	b508      	push	{r3, lr}
 80827d2:	4b02      	ldr	r3, [pc, #8]	; (80827dc <HAL_SPI_Is_Enabled+0xc>)
 80827d4:	681b      	ldr	r3, [r3, #0]
 80827d6:	6a1b      	ldr	r3, [r3, #32]
 80827d8:	9301      	str	r3, [sp, #4]
 80827da:	bd08      	pop	{r3, pc}
 80827dc:	080401b4 	.word	0x080401b4

080827e0 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80827e0:	b508      	push	{r3, lr}
 80827e2:	4b02      	ldr	r3, [pc, #8]	; (80827ec <HAL_SPI_Info+0xc>)
 80827e4:	681b      	ldr	r3, [r3, #0]
 80827e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80827e8:	9301      	str	r3, [sp, #4]
 80827ea:	bd08      	pop	{r3, pc}
 80827ec:	080401b4 	.word	0x080401b4

080827f0 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 80827f0:	b508      	push	{r3, lr}
 80827f2:	4b02      	ldr	r3, [pc, #8]	; (80827fc <HAL_SPI_DMA_Transfer+0xc>)
 80827f4:	681b      	ldr	r3, [r3, #0]
 80827f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80827f8:	9301      	str	r3, [sp, #4]
 80827fa:	bd08      	pop	{r3, pc}
 80827fc:	080401b4 	.word	0x080401b4

08082800 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 8082800:	b508      	push	{r3, lr}
 8082802:	4b02      	ldr	r3, [pc, #8]	; (808280c <HAL_SPI_DMA_Transfer_Status+0xc>)
 8082804:	681b      	ldr	r3, [r3, #0]
 8082806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8082808:	9301      	str	r3, [sp, #4]
 808280a:	bd08      	pop	{r3, pc}
 808280c:	080401b4 	.word	0x080401b4

08082810 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 8082810:	b508      	push	{r3, lr}
 8082812:	4b02      	ldr	r3, [pc, #8]	; (808281c <HAL_SPI_Set_Settings+0xc>)
 8082814:	681b      	ldr	r3, [r3, #0]
 8082816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8082818:	9301      	str	r3, [sp, #4]
 808281a:	bd08      	pop	{r3, pc}
 808281c:	080401b4 	.word	0x080401b4

08082820 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8082820:	b508      	push	{r3, lr}
 8082822:	4b02      	ldr	r3, [pc, #8]	; (808282c <HAL_RNG_GetRandomNumber+0xc>)
 8082824:	681b      	ldr	r3, [r3, #0]
 8082826:	685b      	ldr	r3, [r3, #4]
 8082828:	9301      	str	r3, [sp, #4]
 808282a:	bd08      	pop	{r3, pc}
 808282c:	0804019c 	.word	0x0804019c

08082830 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 8082830:	b508      	push	{r3, lr}
 8082832:	4b02      	ldr	r3, [pc, #8]	; (808283c <HAL_Timer_Get_Micro_Seconds+0xc>)
 8082834:	681b      	ldr	r3, [r3, #0]
 8082836:	691b      	ldr	r3, [r3, #16]
 8082838:	9301      	str	r3, [sp, #4]
 808283a:	bd08      	pop	{r3, pc}
 808283c:	0804019c 	.word	0x0804019c

08082840 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8082840:	b508      	push	{r3, lr}
 8082842:	4b02      	ldr	r3, [pc, #8]	; (808284c <HAL_Timer_Get_Milli_Seconds+0xc>)
 8082844:	681b      	ldr	r3, [r3, #0]
 8082846:	695b      	ldr	r3, [r3, #20]
 8082848:	9301      	str	r3, [sp, #4]
 808284a:	bd08      	pop	{r3, pc}
 808284c:	0804019c 	.word	0x0804019c

08082850 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 8082850:	b508      	push	{r3, lr}
 8082852:	4b02      	ldr	r3, [pc, #8]	; (808285c <HAL_Core_Get_Last_Reset_Info+0xc>)
 8082854:	681b      	ldr	r3, [r3, #0]
 8082856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8082858:	9301      	str	r3, [sp, #4]
 808285a:	bd08      	pop	{r3, pc}
 808285c:	080401b8 	.word	0x080401b8

08082860 <os_timer_create>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 8082860:	b508      	push	{r3, lr}
 8082862:	4b02      	ldr	r3, [pc, #8]	; (808286c <os_timer_create+0xc>)
 8082864:	681b      	ldr	r3, [r3, #0]
 8082866:	6a1b      	ldr	r3, [r3, #32]
 8082868:	9301      	str	r3, [sp, #4]
 808286a:	bd08      	pop	{r3, pc}
 808286c:	080401d0 	.word	0x080401d0

08082870 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 8082870:	b508      	push	{r3, lr}
 8082872:	4b02      	ldr	r3, [pc, #8]	; (808287c <os_timer_destroy+0xc>)
 8082874:	681b      	ldr	r3, [r3, #0]
 8082876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8082878:	9301      	str	r3, [sp, #4]
 808287a:	bd08      	pop	{r3, pc}
 808287c:	080401d0 	.word	0x080401d0

08082880 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 8082880:	b508      	push	{r3, lr}
 8082882:	4b02      	ldr	r3, [pc, #8]	; (808288c <os_timer_get_id+0xc>)
 8082884:	681b      	ldr	r3, [r3, #0]
 8082886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8082888:	9301      	str	r3, [sp, #4]
 808288a:	bd08      	pop	{r3, pc}
 808288c:	080401d0 	.word	0x080401d0

08082890 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 8082890:	b508      	push	{r3, lr}
 8082892:	4b02      	ldr	r3, [pc, #8]	; (808289c <os_timer_change+0xc>)
 8082894:	681b      	ldr	r3, [r3, #0]
 8082896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082898:	9301      	str	r3, [sp, #4]
 808289a:	bd08      	pop	{r3, pc}
 808289c:	080401d0 	.word	0x080401d0

080828a0 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80828a0:	b508      	push	{r3, lr}
 80828a2:	4b02      	ldr	r3, [pc, #8]	; (80828ac <os_mutex_create+0xc>)
 80828a4:	681b      	ldr	r3, [r3, #0]
 80828a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80828a8:	9301      	str	r3, [sp, #4]
 80828aa:	bd08      	pop	{r3, pc}
 80828ac:	080401d0 	.word	0x080401d0

080828b0 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 80828b0:	b508      	push	{r3, lr}
 80828b2:	4b02      	ldr	r3, [pc, #8]	; (80828bc <os_mutex_lock+0xc>)
 80828b4:	681b      	ldr	r3, [r3, #0]
 80828b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80828b8:	9301      	str	r3, [sp, #4]
 80828ba:	bd08      	pop	{r3, pc}
 80828bc:	080401d0 	.word	0x080401d0

080828c0 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 80828c0:	b508      	push	{r3, lr}
 80828c2:	4b02      	ldr	r3, [pc, #8]	; (80828cc <os_mutex_unlock+0xc>)
 80828c4:	681b      	ldr	r3, [r3, #0]
 80828c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80828c8:	9301      	str	r3, [sp, #4]
 80828ca:	bd08      	pop	{r3, pc}
 80828cc:	080401d0 	.word	0x080401d0

080828d0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80828d0:	b508      	push	{r3, lr}
 80828d2:	4b02      	ldr	r3, [pc, #8]	; (80828dc <HAL_USART_Init+0xc>)
 80828d4:	681b      	ldr	r3, [r3, #0]
 80828d6:	699b      	ldr	r3, [r3, #24]
 80828d8:	9301      	str	r3, [sp, #4]
 80828da:	bd08      	pop	{r3, pc}
 80828dc:	080401c4 	.word	0x080401c4

080828e0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80828e0:	b508      	push	{r3, lr}
 80828e2:	4b02      	ldr	r3, [pc, #8]	; (80828ec <HAL_USART_Write_Data+0xc>)
 80828e4:	681b      	ldr	r3, [r3, #0]
 80828e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80828e8:	9301      	str	r3, [sp, #4]
 80828ea:	bd08      	pop	{r3, pc}
 80828ec:	080401c4 	.word	0x080401c4

080828f0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80828f0:	b508      	push	{r3, lr}
 80828f2:	4b02      	ldr	r3, [pc, #8]	; (80828fc <HAL_USART_Available_Data+0xc>)
 80828f4:	681b      	ldr	r3, [r3, #0]
 80828f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80828f8:	9301      	str	r3, [sp, #4]
 80828fa:	bd08      	pop	{r3, pc}
 80828fc:	080401c4 	.word	0x080401c4

08082900 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8082900:	b508      	push	{r3, lr}
 8082902:	4b02      	ldr	r3, [pc, #8]	; (808290c <HAL_USART_Read_Data+0xc>)
 8082904:	681b      	ldr	r3, [r3, #0]
 8082906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082908:	9301      	str	r3, [sp, #4]
 808290a:	bd08      	pop	{r3, pc}
 808290c:	080401c4 	.word	0x080401c4

08082910 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8082910:	b508      	push	{r3, lr}
 8082912:	4b02      	ldr	r3, [pc, #8]	; (808291c <HAL_USART_Peek_Data+0xc>)
 8082914:	681b      	ldr	r3, [r3, #0]
 8082916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082918:	9301      	str	r3, [sp, #4]
 808291a:	bd08      	pop	{r3, pc}
 808291c:	080401c4 	.word	0x080401c4

08082920 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8082920:	b508      	push	{r3, lr}
 8082922:	4b02      	ldr	r3, [pc, #8]	; (808292c <HAL_USART_Flush_Data+0xc>)
 8082924:	681b      	ldr	r3, [r3, #0]
 8082926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8082928:	9301      	str	r3, [sp, #4]
 808292a:	bd08      	pop	{r3, pc}
 808292c:	080401c4 	.word	0x080401c4

08082930 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8082930:	b508      	push	{r3, lr}
 8082932:	4b02      	ldr	r3, [pc, #8]	; (808293c <HAL_USART_Is_Enabled+0xc>)
 8082934:	681b      	ldr	r3, [r3, #0]
 8082936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8082938:	9301      	str	r3, [sp, #4]
 808293a:	bd08      	pop	{r3, pc}
 808293c:	080401c4 	.word	0x080401c4

08082940 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8082940:	b508      	push	{r3, lr}
 8082942:	4b02      	ldr	r3, [pc, #8]	; (808294c <HAL_USART_Available_Data_For_Write+0xc>)
 8082944:	681b      	ldr	r3, [r3, #0]
 8082946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082948:	9301      	str	r3, [sp, #4]
 808294a:	bd08      	pop	{r3, pc}
 808294c:	080401c4 	.word	0x080401c4

08082950 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 8082950:	b508      	push	{r3, lr}
 8082952:	4b02      	ldr	r3, [pc, #8]	; (808295c <HAL_USART_BeginConfig+0xc>)
 8082954:	681b      	ldr	r3, [r3, #0]
 8082956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8082958:	9301      	str	r3, [sp, #4]
 808295a:	bd08      	pop	{r3, pc}
 808295c:	080401c4 	.word	0x080401c4

08082960 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8082960:	b508      	push	{r3, lr}
 8082962:	4b02      	ldr	r3, [pc, #8]	; (808296c <HAL_I2C_Write_Data+0xc>)
 8082964:	681b      	ldr	r3, [r3, #0]
 8082966:	6a1b      	ldr	r3, [r3, #32]
 8082968:	9301      	str	r3, [sp, #4]
 808296a:	bd08      	pop	{r3, pc}
 808296c:	080401ac 	.word	0x080401ac

08082970 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8082970:	b508      	push	{r3, lr}
 8082972:	4b02      	ldr	r3, [pc, #8]	; (808297c <HAL_I2C_Available_Data+0xc>)
 8082974:	681b      	ldr	r3, [r3, #0]
 8082976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8082978:	9301      	str	r3, [sp, #4]
 808297a:	bd08      	pop	{r3, pc}
 808297c:	080401ac 	.word	0x080401ac

08082980 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8082980:	b508      	push	{r3, lr}
 8082982:	4b02      	ldr	r3, [pc, #8]	; (808298c <HAL_I2C_Read_Data+0xc>)
 8082984:	681b      	ldr	r3, [r3, #0]
 8082986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8082988:	9301      	str	r3, [sp, #4]
 808298a:	bd08      	pop	{r3, pc}
 808298c:	080401ac 	.word	0x080401ac

08082990 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8082990:	b508      	push	{r3, lr}
 8082992:	4b02      	ldr	r3, [pc, #8]	; (808299c <HAL_I2C_Peek_Data+0xc>)
 8082994:	681b      	ldr	r3, [r3, #0]
 8082996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082998:	9301      	str	r3, [sp, #4]
 808299a:	bd08      	pop	{r3, pc}
 808299c:	080401ac 	.word	0x080401ac

080829a0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80829a0:	b508      	push	{r3, lr}
 80829a2:	4b02      	ldr	r3, [pc, #8]	; (80829ac <HAL_I2C_Flush_Data+0xc>)
 80829a4:	681b      	ldr	r3, [r3, #0]
 80829a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80829a8:	9301      	str	r3, [sp, #4]
 80829aa:	bd08      	pop	{r3, pc}
 80829ac:	080401ac 	.word	0x080401ac

080829b0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80829b0:	b508      	push	{r3, lr}
 80829b2:	4b02      	ldr	r3, [pc, #8]	; (80829bc <HAL_I2C_Is_Enabled+0xc>)
 80829b4:	681b      	ldr	r3, [r3, #0]
 80829b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80829b8:	9301      	str	r3, [sp, #4]
 80829ba:	bd08      	pop	{r3, pc}
 80829bc:	080401ac 	.word	0x080401ac

080829c0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80829c0:	b508      	push	{r3, lr}
 80829c2:	4b02      	ldr	r3, [pc, #8]	; (80829cc <HAL_I2C_Init+0xc>)
 80829c4:	681b      	ldr	r3, [r3, #0]
 80829c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80829c8:	9301      	str	r3, [sp, #4]
 80829ca:	bd08      	pop	{r3, pc}
 80829cc:	080401ac 	.word	0x080401ac

080829d0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80829d0:	b508      	push	{r3, lr}
 80829d2:	4b02      	ldr	r3, [pc, #8]	; (80829dc <HAL_USB_USART_Init+0xc>)
 80829d4:	681b      	ldr	r3, [r3, #0]
 80829d6:	681b      	ldr	r3, [r3, #0]
 80829d8:	9301      	str	r3, [sp, #4]
 80829da:	bd08      	pop	{r3, pc}
 80829dc:	0806001c 	.word	0x0806001c

080829e0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80829e0:	b508      	push	{r3, lr}
 80829e2:	4b02      	ldr	r3, [pc, #8]	; (80829ec <HAL_USB_USART_Begin+0xc>)
 80829e4:	681b      	ldr	r3, [r3, #0]
 80829e6:	685b      	ldr	r3, [r3, #4]
 80829e8:	9301      	str	r3, [sp, #4]
 80829ea:	bd08      	pop	{r3, pc}
 80829ec:	0806001c 	.word	0x0806001c

080829f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80829f0:	b508      	push	{r3, lr}
 80829f2:	4b02      	ldr	r3, [pc, #8]	; (80829fc <HAL_USB_USART_Available_Data+0xc>)
 80829f4:	681b      	ldr	r3, [r3, #0]
 80829f6:	691b      	ldr	r3, [r3, #16]
 80829f8:	9301      	str	r3, [sp, #4]
 80829fa:	bd08      	pop	{r3, pc}
 80829fc:	0806001c 	.word	0x0806001c

08082a00 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8082a00:	b508      	push	{r3, lr}
 8082a02:	4b02      	ldr	r3, [pc, #8]	; (8082a0c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8082a04:	681b      	ldr	r3, [r3, #0]
 8082a06:	695b      	ldr	r3, [r3, #20]
 8082a08:	9301      	str	r3, [sp, #4]
 8082a0a:	bd08      	pop	{r3, pc}
 8082a0c:	0806001c 	.word	0x0806001c

08082a10 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8082a10:	b508      	push	{r3, lr}
 8082a12:	4b02      	ldr	r3, [pc, #8]	; (8082a1c <HAL_USB_USART_Receive_Data+0xc>)
 8082a14:	681b      	ldr	r3, [r3, #0]
 8082a16:	699b      	ldr	r3, [r3, #24]
 8082a18:	9301      	str	r3, [sp, #4]
 8082a1a:	bd08      	pop	{r3, pc}
 8082a1c:	0806001c 	.word	0x0806001c

08082a20 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8082a20:	b508      	push	{r3, lr}
 8082a22:	4b02      	ldr	r3, [pc, #8]	; (8082a2c <HAL_USB_USART_Send_Data+0xc>)
 8082a24:	681b      	ldr	r3, [r3, #0]
 8082a26:	69db      	ldr	r3, [r3, #28]
 8082a28:	9301      	str	r3, [sp, #4]
 8082a2a:	bd08      	pop	{r3, pc}
 8082a2c:	0806001c 	.word	0x0806001c

08082a30 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8082a30:	b508      	push	{r3, lr}
 8082a32:	4b02      	ldr	r3, [pc, #8]	; (8082a3c <HAL_USB_USART_Flush_Data+0xc>)
 8082a34:	681b      	ldr	r3, [r3, #0]
 8082a36:	6a1b      	ldr	r3, [r3, #32]
 8082a38:	9301      	str	r3, [sp, #4]
 8082a3a:	bd08      	pop	{r3, pc}
 8082a3c:	0806001c 	.word	0x0806001c

08082a40 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 8082a40:	b508      	push	{r3, lr}
 8082a42:	4b02      	ldr	r3, [pc, #8]	; (8082a4c <HAL_USB_USART_Is_Enabled+0xc>)
 8082a44:	681b      	ldr	r3, [r3, #0]
 8082a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8082a48:	9301      	str	r3, [sp, #4]
 8082a4a:	bd08      	pop	{r3, pc}
 8082a4c:	0806001c 	.word	0x0806001c

08082a50 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8082a50:	b508      	push	{r3, lr}
 8082a52:	4b02      	ldr	r3, [pc, #8]	; (8082a5c <set_system_mode+0xc>)
 8082a54:	681b      	ldr	r3, [r3, #0]
 8082a56:	685b      	ldr	r3, [r3, #4]
 8082a58:	9301      	str	r3, [sp, #4]
 8082a5a:	bd08      	pop	{r3, pc}
 8082a5c:	080401a4 	.word	0x080401a4

08082a60 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8082a60:	b508      	push	{r3, lr}
 8082a62:	4b02      	ldr	r3, [pc, #8]	; (8082a6c <system_delay_ms+0xc>)
 8082a64:	681b      	ldr	r3, [r3, #0]
 8082a66:	695b      	ldr	r3, [r3, #20]
 8082a68:	9301      	str	r3, [sp, #4]
 8082a6a:	bd08      	pop	{r3, pc}
 8082a6c:	080401a4 	.word	0x080401a4

08082a70 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8082a70:	b508      	push	{r3, lr}
 8082a72:	4b02      	ldr	r3, [pc, #8]	; (8082a7c <system_thread_set_state+0xc>)
 8082a74:	681b      	ldr	r3, [r3, #0]
 8082a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082a78:	9301      	str	r3, [sp, #4]
 8082a7a:	bd08      	pop	{r3, pc}
 8082a7c:	080401a4 	.word	0x080401a4

08082a80 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8082a80:	b508      	push	{r3, lr}
 8082a82:	4b02      	ldr	r3, [pc, #8]	; (8082a8c <application_thread_current+0xc>)
 8082a84:	681b      	ldr	r3, [r3, #0]
 8082a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8082a88:	9301      	str	r3, [sp, #4]
 8082a8a:	bd08      	pop	{r3, pc}
 8082a8c:	080401a4 	.word	0x080401a4

08082a90 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8082a90:	b508      	push	{r3, lr}
 8082a92:	4b02      	ldr	r3, [pc, #8]	; (8082a9c <application_thread_invoke+0xc>)
 8082a94:	681b      	ldr	r3, [r3, #0]
 8082a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8082a98:	9301      	str	r3, [sp, #4]
 8082a9a:	bd08      	pop	{r3, pc}
 8082a9c:	080401a4 	.word	0x080401a4

08082aa0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8082aa0:	b508      	push	{r3, lr}
 8082aa2:	4b03      	ldr	r3, [pc, #12]	; (8082ab0 <system_ctrl_set_app_request_handler+0x10>)
 8082aa4:	681b      	ldr	r3, [r3, #0]
 8082aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8082aaa:	9301      	str	r3, [sp, #4]
 8082aac:	bd08      	pop	{r3, pc}
 8082aae:	0000      	.short	0x0000
 8082ab0:	080401a4 	.word	0x080401a4

08082ab4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8082ab4:	b508      	push	{r3, lr}
 8082ab6:	4b03      	ldr	r3, [pc, #12]	; (8082ac4 <system_ctrl_set_result+0x10>)
 8082ab8:	681b      	ldr	r3, [r3, #0]
 8082aba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8082abe:	9301      	str	r3, [sp, #4]
 8082ac0:	bd08      	pop	{r3, pc}
 8082ac2:	0000      	.short	0x0000
 8082ac4:	080401a4 	.word	0x080401a4

08082ac8 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8082ac8:	b508      	push	{r3, lr}
 8082aca:	4b02      	ldr	r3, [pc, #8]	; (8082ad4 <network_ready+0xc>)
 8082acc:	681b      	ldr	r3, [r3, #0]
 8082ace:	691b      	ldr	r3, [r3, #16]
 8082ad0:	9301      	str	r3, [sp, #4]
 8082ad2:	bd08      	pop	{r3, pc}
 8082ad4:	080401c8 	.word	0x080401c8

08082ad8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8082ad8:	b508      	push	{r3, lr}
 8082ada:	4b02      	ldr	r3, [pc, #8]	; (8082ae4 <spark_variable+0xc>)
 8082adc:	681b      	ldr	r3, [r3, #0]
 8082ade:	681b      	ldr	r3, [r3, #0]
 8082ae0:	9301      	str	r3, [sp, #4]
 8082ae2:	bd08      	pop	{r3, pc}
 8082ae4:	080401cc 	.word	0x080401cc

08082ae8 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8082ae8:	b508      	push	{r3, lr}
 8082aea:	4b02      	ldr	r3, [pc, #8]	; (8082af4 <spark_process+0xc>)
 8082aec:	681b      	ldr	r3, [r3, #0]
 8082aee:	689b      	ldr	r3, [r3, #8]
 8082af0:	9301      	str	r3, [sp, #4]
 8082af2:	bd08      	pop	{r3, pc}
 8082af4:	080401cc 	.word	0x080401cc

08082af8 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8082af8:	b508      	push	{r3, lr}
 8082afa:	4b02      	ldr	r3, [pc, #8]	; (8082b04 <spark_send_event+0xc>)
 8082afc:	681b      	ldr	r3, [r3, #0]
 8082afe:	6a1b      	ldr	r3, [r3, #32]
 8082b00:	9301      	str	r3, [sp, #4]
 8082b02:	bd08      	pop	{r3, pc}
 8082b04:	080401cc 	.word	0x080401cc

08082b08 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8082b08:	b508      	push	{r3, lr}
 8082b0a:	4b02      	ldr	r3, [pc, #8]	; (8082b14 <spark_set_random_seed_from_cloud_handler+0xc>)
 8082b0c:	681b      	ldr	r3, [r3, #0]
 8082b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8082b10:	9301      	str	r3, [sp, #4]
 8082b12:	bd08      	pop	{r3, pc}
 8082b14:	080401cc 	.word	0x080401cc

08082b18 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8082b18:	b508      	push	{r3, lr}
 8082b1a:	4b02      	ldr	r3, [pc, #8]	; (8082b24 <malloc+0xc>)
 8082b1c:	681b      	ldr	r3, [r3, #0]
 8082b1e:	681b      	ldr	r3, [r3, #0]
 8082b20:	9301      	str	r3, [sp, #4]
 8082b22:	bd08      	pop	{r3, pc}
 8082b24:	080401a0 	.word	0x080401a0

08082b28 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8082b28:	b508      	push	{r3, lr}
 8082b2a:	4b02      	ldr	r3, [pc, #8]	; (8082b34 <free+0xc>)
 8082b2c:	681b      	ldr	r3, [r3, #0]
 8082b2e:	685b      	ldr	r3, [r3, #4]
 8082b30:	9301      	str	r3, [sp, #4]
 8082b32:	bd08      	pop	{r3, pc}
 8082b34:	080401a0 	.word	0x080401a0

08082b38 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8082b38:	b508      	push	{r3, lr}
 8082b3a:	4b02      	ldr	r3, [pc, #8]	; (8082b44 <realloc+0xc>)
 8082b3c:	681b      	ldr	r3, [r3, #0]
 8082b3e:	689b      	ldr	r3, [r3, #8]
 8082b40:	9301      	str	r3, [sp, #4]
 8082b42:	bd08      	pop	{r3, pc}
 8082b44:	080401a0 	.word	0x080401a0

08082b48 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 8082b48:	b508      	push	{r3, lr}
 8082b4a:	4b02      	ldr	r3, [pc, #8]	; (8082b54 <sprintf+0xc>)
 8082b4c:	681b      	ldr	r3, [r3, #0]
 8082b4e:	68db      	ldr	r3, [r3, #12]
 8082b50:	9301      	str	r3, [sp, #4]
 8082b52:	bd08      	pop	{r3, pc}
 8082b54:	080401a0 	.word	0x080401a0

08082b58 <snprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8082b58:	b508      	push	{r3, lr}
 8082b5a:	4b02      	ldr	r3, [pc, #8]	; (8082b64 <snprintf+0xc>)
 8082b5c:	681b      	ldr	r3, [r3, #0]
 8082b5e:	69db      	ldr	r3, [r3, #28]
 8082b60:	9301      	str	r3, [sp, #4]
 8082b62:	bd08      	pop	{r3, pc}
 8082b64:	080401a0 	.word	0x080401a0

08082b68 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8082b68:	b508      	push	{r3, lr}
 8082b6a:	4b02      	ldr	r3, [pc, #8]	; (8082b74 <vsnprintf+0xc>)
 8082b6c:	681b      	ldr	r3, [r3, #0]
 8082b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8082b70:	9301      	str	r3, [sp, #4]
 8082b72:	bd08      	pop	{r3, pc}
 8082b74:	080401a0 	.word	0x080401a0

08082b78 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8082b78:	b508      	push	{r3, lr}
 8082b7a:	4b02      	ldr	r3, [pc, #8]	; (8082b84 <abort+0xc>)
 8082b7c:	681b      	ldr	r3, [r3, #0]
 8082b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082b80:	9301      	str	r3, [sp, #4]
 8082b82:	bd08      	pop	{r3, pc}
 8082b84:	080401a0 	.word	0x080401a0

08082b88 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8082b88:	b508      	push	{r3, lr}
 8082b8a:	4b02      	ldr	r3, [pc, #8]	; (8082b94 <_malloc_r+0xc>)
 8082b8c:	681b      	ldr	r3, [r3, #0]
 8082b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082b90:	9301      	str	r3, [sp, #4]
 8082b92:	bd08      	pop	{r3, pc}
 8082b94:	080401a0 	.word	0x080401a0

08082b98 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8082b98:	4770      	bx	lr

08082b9a <_ZN8SPIClassD0Ev>:
 8082b9a:	b510      	push	{r4, lr}
 8082b9c:	4604      	mov	r4, r0
 8082b9e:	f7fd fa7e 	bl	808009e <_ZdlPv>
 8082ba2:	4620      	mov	r0, r4
 8082ba4:	bd10      	pop	{r4, pc}
	...

08082ba8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8082ba8:	b570      	push	{r4, r5, r6, lr}
 8082baa:	4604      	mov	r4, r0
 8082bac:	460e      	mov	r6, r1
 8082bae:	4b07      	ldr	r3, [pc, #28]	; (8082bcc <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 8082bb0:	2500      	movs	r5, #0
 8082bb2:	6003      	str	r3, [r0, #0]
 8082bb4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8082bb8:	f7ff fe72 	bl	80828a0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8082bbc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 8082bbe:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8082bc0:	f7ff fdfe 	bl	80827c0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8082bc4:	60a5      	str	r5, [r4, #8]
}
 8082bc6:	4620      	mov	r0, r4
 8082bc8:	bd70      	pop	{r4, r5, r6, pc}
 8082bca:	bf00      	nop
 8082bcc:	08084bc0 	.word	0x08084bc0

08082bd0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 8082bd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8082bd4:	7900      	ldrb	r0, [r0, #4]
 8082bd6:	f7ff bde3 	b.w	80827a0 <HAL_SPI_Begin>

08082bda <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
 8082bda:	68c0      	ldr	r0, [r0, #12]
 8082bdc:	f7ff be70 	b.w	80828c0 <os_mutex_unlock>

08082be0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8082be0:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 8082be2:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8082be4:	6018      	str	r0, [r3, #0]
 8082be6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 8082be8:	6818      	ldr	r0, [r3, #0]
 8082bea:	b2e5      	uxtb	r5, r4
 8082bec:	4288      	cmp	r0, r1
 8082bee:	d906      	bls.n	8082bfe <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8082bf0:	3401      	adds	r4, #1
 8082bf2:	2c08      	cmp	r4, #8
 8082bf4:	d002      	beq.n	8082bfc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 8082bf6:	0840      	lsrs	r0, r0, #1
 8082bf8:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 8082bfa:	e7f5      	b.n	8082be8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8082bfc:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 8082bfe:	4b02      	ldr	r3, [pc, #8]	; (8082c08 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8082c00:	5d5b      	ldrb	r3, [r3, r5]
 8082c02:	7013      	strb	r3, [r2, #0]
 8082c04:	bd30      	pop	{r4, r5, pc}
 8082c06:	bf00      	nop
 8082c08:	08084bc8 	.word	0x08084bc8

08082c0c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
  lock();
  return 0;
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
 8082c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8082c10:	4680      	mov	r8, r0
 8082c12:	b08f      	sub	sp, #60	; 0x3c
            os_mutex_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
 8082c14:	68c0      	ldr	r0, [r0, #12]
 8082c16:	460f      	mov	r7, r1
 8082c18:	f7ff fe4a 	bl	80828b0 <os_mutex_lock>
  lock();
  // Get Current SPISettings
  hal_spi_info_t info;
  querySpiInfo(_spi, &info);
 8082c1c:	f898 4004 	ldrb.w	r4, [r8, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 8082c20:	2214      	movs	r2, #20
 8082c22:	2100      	movs	r1, #0
 8082c24:	a809      	add	r0, sp, #36	; 0x24
 8082c26:	f001 fdad 	bl	8084784 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 8082c2a:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 8082c2c:	4620      	mov	r0, r4
 8082c2e:	2200      	movs	r2, #0
 8082c30:	a909      	add	r1, sp, #36	; 0x24
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 8082c32:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  HAL_SPI_Info(spi, info, nullptr);
 8082c36:	f7ff fdd3 	bl	80827e0 <HAL_SPI_Info>
}

static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
  if (!info->enabled || info->default_settings)
 8082c3a:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
 8082c3e:	b14c      	cbz	r4, 8082c54 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
 8082c40:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 8082c44:	b92d      	cbnz	r5, 8082c52 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
 8082c46:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8082c48:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8082c4c:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
 8082c50:	e003      	b.n	8082c5a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
 8082c52:	2400      	movs	r4, #0
 8082c54:	46a1      	mov	r9, r4
 8082c56:	4626      	mov	r6, r4
 8082c58:	2501      	movs	r5, #1
 8082c5a:	793b      	ldrb	r3, [r7, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 8082c5c:	b10d      	cbz	r5, 8082c62 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
 8082c5e:	2b00      	cmp	r3, #0
 8082c60:	d140      	bne.n	8082ce4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
      return true;

    if (default_ == other.default_ &&
 8082c62:	429d      	cmp	r5, r3
 8082c64:	d10b      	bne.n	8082c7e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
 8082c66:	68ba      	ldr	r2, [r7, #8]
 8082c68:	42b2      	cmp	r2, r6
 8082c6a:	d108      	bne.n	8082c7e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 8082c6c:	f88d 9020 	strb.w	r9, [sp, #32]
 8082c70:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8082c74:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8082c78:	89ba      	ldrh	r2, [r7, #12]
 8082c7a:	4291      	cmp	r1, r2
 8082c7c:	d032      	beq.n	8082ce4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
  querySpiInfo(_spi, &info);
  particle::__SPISettings current = spiSettingsFromSpiInfo(&info);
  // If they differ, reconfigure SPI peripheral
  if (settings != current)
  {
    if (!settings.default_) {
 8082c7e:	bb23      	cbnz	r3, 8082cca <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xbe>
      uint8_t divisor = 0;
 8082c80:	f88d 300f 	strb.w	r3, [sp, #15]
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);
 8082c84:	f10d 020f 	add.w	r2, sp, #15
 8082c88:	ab04      	add	r3, sp, #16
 8082c8a:	68b9      	ldr	r1, [r7, #8]
 8082c8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8082c8e:	f7ff ffa7 	bl	8082be0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
 8082c92:	793b      	ldrb	r3, [r7, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 8082c94:	b105      	cbz	r5, 8082c98 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
 8082c96:	bb13      	cbnz	r3, 8082cde <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
 8082c98:	42ab      	cmp	r3, r5
 8082c9a:	d009      	beq.n	8082cb0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>

      if (!(current <= settings && clock == current.clock_)) {
        HAL_SPI_Set_Settings(_spi, 0, divisor, settings.bitOrder_, settings.dataMode_, nullptr);
 8082c9c:	2100      	movs	r1, #0
 8082c9e:	7b3b      	ldrb	r3, [r7, #12]
 8082ca0:	9101      	str	r1, [sp, #4]
 8082ca2:	7b7c      	ldrb	r4, [r7, #13]
 8082ca4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8082ca8:	f898 0004 	ldrb.w	r0, [r8, #4]
 8082cac:	9400      	str	r4, [sp, #0]
 8082cae:	e013      	b.n	8082cd8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xcc>
 8082cb0:	68bb      	ldr	r3, [r7, #8]
 8082cb2:	42b3      	cmp	r3, r6
 8082cb4:	d3f2      	bcc.n	8082c9c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 8082cb6:	f88d 9020 	strb.w	r9, [sp, #32]
 8082cba:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8082cbe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8082cc2:	89bb      	ldrh	r3, [r7, #12]
 8082cc4:	429a      	cmp	r2, r3
 8082cc6:	d1e9      	bne.n	8082c9c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
 8082cc8:	e009      	b.n	8082cde <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      }
    } else {
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
 8082cca:	2300      	movs	r3, #0
 8082ccc:	461a      	mov	r2, r3
 8082cce:	f898 0004 	ldrb.w	r0, [r8, #4]
 8082cd2:	9301      	str	r3, [sp, #4]
 8082cd4:	9300      	str	r3, [sp, #0]
 8082cd6:	2101      	movs	r1, #1
 8082cd8:	f7ff fd9a 	bl	8082810 <HAL_SPI_Set_Settings>
 8082cdc:	e002      	b.n	8082ce4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
    if (!settings.default_) {
      uint8_t divisor = 0;
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);

      if (!(current <= settings && clock == current.clock_)) {
 8082cde:	9b04      	ldr	r3, [sp, #16]
 8082ce0:	42b3      	cmp	r3, r6
 8082ce2:	d1db      	bne.n	8082c9c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
    }
  }

  return 0;
}
 8082ce4:	2000      	movs	r0, #0
 8082ce6:	b00f      	add	sp, #60	; 0x3c
 8082ce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08082cec <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 8082cec:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 8082cee:	7900      	ldrb	r0, [r0, #4]
 8082cf0:	f7ff fd5e 	bl	80827b0 <HAL_SPI_Send_Receive_Data>
}
 8082cf4:	b2c0      	uxtb	r0, r0
 8082cf6:	bd08      	pop	{r3, pc}

08082cf8 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 8082cf8:	b530      	push	{r4, r5, lr}
 8082cfa:	b087      	sub	sp, #28
 8082cfc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8082cfe:	4604      	mov	r4, r0
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 8082d00:	7900      	ldrb	r0, [r0, #4]
 8082d02:	9500      	str	r5, [sp, #0]
 8082d04:	f7ff fd74 	bl	80827f0 <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
 8082d08:	b93d      	cbnz	r5, 8082d1a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
 8082d0a:	a902      	add	r1, sp, #8
 8082d0c:	7920      	ldrb	r0, [r4, #4]
 8082d0e:	f7ff fd77 	bl	8082800 <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
 8082d12:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8082d16:	07db      	lsls	r3, r3, #31
 8082d18:	d4f7      	bmi.n	8082d0a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
 8082d1a:	b007      	add	sp, #28
 8082d1c:	bd30      	pop	{r4, r5, pc}

08082d1e <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8082d1e:	7900      	ldrb	r0, [r0, #4]
 8082d20:	f7ff bd56 	b.w	80827d0 <HAL_SPI_Is_Enabled>

08082d24 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8082d24:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 8082d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082d2a:	4c0d      	ldr	r4, [pc, #52]	; (8082d60 <_GLOBAL__sub_I_System+0x3c>)
 8082d2c:	2500      	movs	r5, #0
 8082d2e:	8063      	strh	r3, [r4, #2]
 8082d30:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8082d34:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8082d36:	80a3      	strh	r3, [r4, #4]
 8082d38:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8082d3a:	f7ff fe89 	bl	8082a50 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8082d3e:	a802      	add	r0, sp, #8
 8082d40:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8082d44:	462a      	mov	r2, r5
 8082d46:	4629      	mov	r1, r5
 8082d48:	f7ff fd82 	bl	8082850 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8082d4c:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 8082d4e:	2b1e      	cmp	r3, #30
 8082d50:	d104      	bne.n	8082d5c <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 8082d52:	2303      	movs	r3, #3
 8082d54:	7023      	strb	r3, [r4, #0]
 8082d56:	2311      	movs	r3, #17
 8082d58:	8065      	strh	r5, [r4, #2]
 8082d5a:	80a3      	strh	r3, [r4, #4]
 8082d5c:	b003      	add	sp, #12
 8082d5e:	bd30      	pop	{r4, r5, pc}
 8082d60:	20000cb6 	.word	0x20000cb6

08082d64 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 8082d64:	b510      	push	{r4, lr}
 8082d66:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 8082d68:	f001 fd69 	bl	808483e <strlen>
 8082d6c:	3801      	subs	r0, #1
 8082d6e:	1823      	adds	r3, r4, r0
 8082d70:	4620      	mov	r0, r4
	while(i<j){
 8082d72:	4298      	cmp	r0, r3
 8082d74:	d206      	bcs.n	8082d84 <_Z11str_reversePc+0x20>
		c = *i;
 8082d76:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 8082d78:	7819      	ldrb	r1, [r3, #0]
 8082d7a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 8082d7e:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 8082d82:	e7f6      	b.n	8082d72 <_Z11str_reversePc+0xe>
 8082d84:	bd10      	pop	{r4, pc}

08082d86 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 8082d86:	b570      	push	{r4, r5, r6, lr}
 8082d88:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 8082d8a:	1e91      	subs	r1, r2, #2
 8082d8c:	2922      	cmp	r1, #34	; 0x22
 8082d8e:	d820      	bhi.n	8082dd2 <ultoa+0x4c>
 8082d90:	4625      	mov	r5, r4
 8082d92:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8082d94:	b910      	cbnz	r0, 8082d9c <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8082d96:	4423      	add	r3, r4
            *ptr++ = '0';
 8082d98:	2230      	movs	r2, #48	; 0x30
 8082d9a:	e00e      	b.n	8082dba <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 8082d9c:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 8082da0:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 8082da4:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 8082da6:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 8082da8:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 8082dac:	bf94      	ite	ls
 8082dae:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 8082db0:	3157      	addhi	r1, #87	; 0x57
 8082db2:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 8082db6:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8082db8:	e7eb      	b.n	8082d92 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8082dba:	4299      	cmp	r1, r3
 8082dbc:	d202      	bcs.n	8082dc4 <ultoa+0x3e>
            *ptr++ = '0';
 8082dbe:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8082dc2:	e7fa      	b.n	8082dba <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 8082dc4:	2300      	movs	r3, #0
	str_reverse(buffer);
 8082dc6:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 8082dc8:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 8082dca:	f7ff ffcb 	bl	8082d64 <_Z11str_reversePc>
	return buffer;
 8082dce:	4620      	mov	r0, r4
 8082dd0:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 8082dd2:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 8082dd4:	bd70      	pop	{r4, r5, r6, pc}

08082dd6 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8082dd6:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 8082dd8:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8082dda:	460c      	mov	r4, r1
 8082ddc:	4615      	mov	r5, r2
	if(a<0){
 8082dde:	da0b      	bge.n	8082df8 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8082de0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8082de4:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8082de8:	bf14      	ite	ne
 8082dea:	4258      	negne	r0, r3
 8082dec:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 8082dee:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8082df0:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 8082df2:	462a      	mov	r2, r5
 8082df4:	4419      	add	r1, r3
 8082df6:	e000      	b.n	8082dfa <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 8082df8:	2301      	movs	r3, #1
 8082dfa:	f7ff ffc4 	bl	8082d86 <ultoa>
	}
	return buffer;
}
 8082dfe:	4620      	mov	r0, r4
 8082e00:	bd38      	pop	{r3, r4, r5, pc}

08082e02 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8082e02:	b510      	push	{r4, lr}
 8082e04:	4604      	mov	r4, r0
{
	free(buffer);
 8082e06:	6800      	ldr	r0, [r0, #0]
 8082e08:	f7ff fe8e 	bl	8082b28 <free>
}
 8082e0c:	4620      	mov	r0, r4
 8082e0e:	bd10      	pop	{r4, pc}

08082e10 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8082e10:	b510      	push	{r4, lr}
 8082e12:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8082e14:	6800      	ldr	r0, [r0, #0]
 8082e16:	b108      	cbz	r0, 8082e1c <_ZN6String10invalidateEv+0xc>
 8082e18:	f7ff fe86 	bl	8082b28 <free>
	buffer = NULL;
 8082e1c:	2300      	movs	r3, #0
 8082e1e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8082e20:	60a3      	str	r3, [r4, #8]
 8082e22:	6063      	str	r3, [r4, #4]
 8082e24:	bd10      	pop	{r4, pc}

08082e26 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8082e26:	b538      	push	{r3, r4, r5, lr}
 8082e28:	4604      	mov	r4, r0
 8082e2a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8082e2c:	6800      	ldr	r0, [r0, #0]
 8082e2e:	3101      	adds	r1, #1
 8082e30:	f7ff fe82 	bl	8082b38 <realloc>
	if (newbuffer) {
 8082e34:	b110      	cbz	r0, 8082e3c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8082e36:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8082e3a:	2001      	movs	r0, #1
	}
	return 0;
}
 8082e3c:	bd38      	pop	{r3, r4, r5, pc}

08082e3e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8082e3e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8082e40:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8082e42:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8082e44:	b113      	cbz	r3, 8082e4c <_ZN6String7reserveEj+0xe>
 8082e46:	6843      	ldr	r3, [r0, #4]
 8082e48:	428b      	cmp	r3, r1
 8082e4a:	d207      	bcs.n	8082e5c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8082e4c:	4620      	mov	r0, r4
 8082e4e:	f7ff ffea 	bl	8082e26 <_ZN6String12changeBufferEj>
 8082e52:	b120      	cbz	r0, 8082e5e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8082e54:	68a3      	ldr	r3, [r4, #8]
 8082e56:	b90b      	cbnz	r3, 8082e5c <_ZN6String7reserveEj+0x1e>
 8082e58:	6822      	ldr	r2, [r4, #0]
 8082e5a:	7013      	strb	r3, [r2, #0]
 8082e5c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8082e5e:	bd10      	pop	{r4, pc}

08082e60 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8082e60:	b570      	push	{r4, r5, r6, lr}
 8082e62:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8082e64:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8082e66:	4604      	mov	r4, r0
 8082e68:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8082e6a:	f7ff ffe8 	bl	8082e3e <_ZN6String7reserveEj>
 8082e6e:	b918      	cbnz	r0, 8082e78 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8082e70:	4620      	mov	r0, r4
 8082e72:	f7ff ffcd 	bl	8082e10 <_ZN6String10invalidateEv>
		return *this;
 8082e76:	e009      	b.n	8082e8c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8082e78:	462a      	mov	r2, r5
 8082e7a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8082e7c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8082e7e:	6820      	ldr	r0, [r4, #0]
 8082e80:	f001 fc75 	bl	808476e <memcpy>
	buffer[len] = 0;
 8082e84:	6822      	ldr	r2, [r4, #0]
 8082e86:	68a3      	ldr	r3, [r4, #8]
 8082e88:	2100      	movs	r1, #0
 8082e8a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8082e8c:	4620      	mov	r0, r4
 8082e8e:	bd70      	pop	{r4, r5, r6, pc}

08082e90 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8082e90:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082e92:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8082e94:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082e96:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8082e98:	6043      	str	r3, [r0, #4]
	len = 0;
 8082e9a:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082e9c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8082e9e:	460d      	mov	r5, r1
 8082ea0:	b139      	cbz	r1, 8082eb2 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8082ea2:	4608      	mov	r0, r1
 8082ea4:	f001 fccb 	bl	808483e <strlen>
 8082ea8:	4629      	mov	r1, r5
 8082eaa:	4602      	mov	r2, r0
 8082eac:	4620      	mov	r0, r4
 8082eae:	f7ff ffd7 	bl	8082e60 <_ZN6String4copyEPKcj>
}
 8082eb2:	4620      	mov	r0, r4
 8082eb4:	bd38      	pop	{r3, r4, r5, pc}

08082eb6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8082eb6:	b538      	push	{r3, r4, r5, lr}
 8082eb8:	4605      	mov	r5, r0
	if (buffer) {
 8082eba:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8082ebc:	460c      	mov	r4, r1
	if (buffer) {
 8082ebe:	b160      	cbz	r0, 8082eda <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 8082ec0:	686a      	ldr	r2, [r5, #4]
 8082ec2:	688b      	ldr	r3, [r1, #8]
 8082ec4:	429a      	cmp	r2, r3
 8082ec6:	d306      	bcc.n	8082ed6 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 8082ec8:	6809      	ldr	r1, [r1, #0]
 8082eca:	f001 fc95 	bl	80847f8 <strcpy>
			len = rhs.len;
 8082ece:	68a3      	ldr	r3, [r4, #8]
 8082ed0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8082ed2:	2300      	movs	r3, #0
 8082ed4:	e00a      	b.n	8082eec <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 8082ed6:	f7ff fe27 	bl	8082b28 <free>
		}
	}
	buffer = rhs.buffer;
 8082eda:	6823      	ldr	r3, [r4, #0]
 8082edc:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8082ede:	6863      	ldr	r3, [r4, #4]
 8082ee0:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8082ee2:	68a3      	ldr	r3, [r4, #8]
 8082ee4:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 8082ee6:	2300      	movs	r3, #0
 8082ee8:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 8082eea:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 8082eec:	60a3      	str	r3, [r4, #8]
 8082eee:	bd38      	pop	{r3, r4, r5, pc}

08082ef0 <_ZN6StringaSEO15StringSumHelper>:
	return *this;
}

String & String::operator = (StringSumHelper &&rval)
{
	if (this != &rval) move(rval);
 8082ef0:	4288      	cmp	r0, r1
	if (this != &rval) move(rval);
	return *this;
}

String & String::operator = (StringSumHelper &&rval)
{
 8082ef2:	b510      	push	{r4, lr}
 8082ef4:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 8082ef6:	d001      	beq.n	8082efc <_ZN6StringaSEO15StringSumHelper+0xc>
 8082ef8:	f7ff ffdd 	bl	8082eb6 <_ZN6String4moveERS_>
	return *this;
}
 8082efc:	4620      	mov	r0, r4
 8082efe:	bd10      	pop	{r4, pc}

08082f00 <_ZN6StringaSEPKc>:
#endif

String & String::operator = (const char *cstr)
{
 8082f00:	b538      	push	{r3, r4, r5, lr}
 8082f02:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8082f04:	460c      	mov	r4, r1
 8082f06:	b141      	cbz	r1, 8082f1a <_ZN6StringaSEPKc+0x1a>
 8082f08:	4608      	mov	r0, r1
 8082f0a:	f001 fc98 	bl	808483e <strlen>
 8082f0e:	4621      	mov	r1, r4
 8082f10:	4602      	mov	r2, r0
 8082f12:	4628      	mov	r0, r5
 8082f14:	f7ff ffa4 	bl	8082e60 <_ZN6String4copyEPKcj>
 8082f18:	e001      	b.n	8082f1e <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 8082f1a:	f7ff ff79 	bl	8082e10 <_ZN6String10invalidateEv>

	return *this;
}
 8082f1e:	4628      	mov	r0, r5
 8082f20:	bd38      	pop	{r3, r4, r5, pc}

08082f22 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8082f22:	b510      	push	{r4, lr}
 8082f24:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082f26:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8082f28:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082f2a:	6023      	str	r3, [r4, #0]
	capacity = 0;
 8082f2c:	6063      	str	r3, [r4, #4]
	len = 0;
 8082f2e:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8082f30:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8082f32:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 8082f34:	a901      	add	r1, sp, #4
 8082f36:	f7ff ff4e 	bl	8082dd6 <itoa>
	*this = buf;
 8082f3a:	a901      	add	r1, sp, #4
 8082f3c:	4620      	mov	r0, r4
 8082f3e:	f7ff ffdf 	bl	8082f00 <_ZN6StringaSEPKc>
}
 8082f42:	4620      	mov	r0, r4
 8082f44:	b00a      	add	sp, #40	; 0x28
 8082f46:	bd10      	pop	{r4, pc}

08082f48 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8082f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082f4a:	4606      	mov	r6, r0
 8082f4c:	460d      	mov	r5, r1
 8082f4e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8082f50:	2400      	movs	r4, #0
  while (size--) {
 8082f52:	42bd      	cmp	r5, r7
 8082f54:	d00c      	beq.n	8082f70 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8082f56:	6833      	ldr	r3, [r6, #0]
 8082f58:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082f5c:	689b      	ldr	r3, [r3, #8]
 8082f5e:	4630      	mov	r0, r6
 8082f60:	4798      	blx	r3
     if (chunk>=0)
 8082f62:	2800      	cmp	r0, #0
 8082f64:	db01      	blt.n	8082f6a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8082f66:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8082f68:	e7f3      	b.n	8082f52 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8082f6a:	2c00      	cmp	r4, #0
 8082f6c:	bf08      	it	eq
 8082f6e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8082f70:	4620      	mov	r0, r4
 8082f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082f74 <_ZN5Print5printEPKc>:
 8082f74:	b508      	push	{r3, lr}
 8082f76:	f7fe fc53 	bl	8081820 <_ZN5Print5writeEPKc>
 8082f7a:	bd08      	pop	{r3, pc}

08082f7c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8082f7c:	6803      	ldr	r3, [r0, #0]
 8082f7e:	689b      	ldr	r3, [r3, #8]
 8082f80:	4718      	bx	r3

08082f82 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8082f82:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8082f84:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8082f86:	4605      	mov	r5, r0
  size_t n = print('\r');
 8082f88:	f7ff fff8 	bl	8082f7c <_ZN5Print5printEc>
  n += print('\n');
 8082f8c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8082f8e:	4604      	mov	r4, r0
  n += print('\n');
 8082f90:	4628      	mov	r0, r5
 8082f92:	f7ff fff3 	bl	8082f7c <_ZN5Print5printEc>
  return n;
}
 8082f96:	4420      	add	r0, r4
 8082f98:	bd38      	pop	{r3, r4, r5, pc}

08082f9a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8082f9a:	b538      	push	{r3, r4, r5, lr}
 8082f9c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8082f9e:	f7fe fc3f 	bl	8081820 <_ZN5Print5writeEPKc>
 8082fa2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8082fa4:	4628      	mov	r0, r5
 8082fa6:	f7ff ffec 	bl	8082f82 <_ZN5Print7printlnEv>
  return n;
}
 8082faa:	4420      	add	r0, r4
 8082fac:	bd38      	pop	{r3, r4, r5, pc}

08082fae <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8082fae:	2a01      	cmp	r2, #1
 8082fb0:	bf98      	it	ls
 8082fb2:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8082fb4:	b530      	push	{r4, r5, lr}
 8082fb6:	460b      	mov	r3, r1
 8082fb8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8082fba:	2100      	movs	r1, #0
 8082fbc:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8082fc0:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8082fc4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8082fc8:	fb05 3312 	mls	r3, r5, r2, r3
 8082fcc:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8082fce:	2b09      	cmp	r3, #9
 8082fd0:	bf94      	ite	ls
 8082fd2:	3330      	addls	r3, #48	; 0x30
 8082fd4:	3337      	addhi	r3, #55	; 0x37
 8082fd6:	b2db      	uxtb	r3, r3
 8082fd8:	4621      	mov	r1, r4
 8082fda:	f804 3901 	strb.w	r3, [r4], #-1
 8082fde:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8082fe0:	2d00      	cmp	r5, #0
 8082fe2:	d1ef      	bne.n	8082fc4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8082fe4:	f7fe fc1c 	bl	8081820 <_ZN5Print5writeEPKc>
}
 8082fe8:	b00b      	add	sp, #44	; 0x2c
 8082fea:	bd30      	pop	{r4, r5, pc}

08082fec <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8082fec:	b410      	push	{r4}
  if (base == 0) return write(n);
 8082fee:	b922      	cbnz	r2, 8082ffa <_ZN5Print5printEmi+0xe>
 8082ff0:	6803      	ldr	r3, [r0, #0]
 8082ff2:	b2c9      	uxtb	r1, r1
 8082ff4:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8082ff6:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8082ff8:	4718      	bx	r3
  else return printNumber(n, base);
 8082ffa:	b2d2      	uxtb	r2, r2
}
 8082ffc:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8082ffe:	f7ff bfd6 	b.w	8082fae <_ZN5Print11printNumberEmh>

08083002 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8083002:	f7ff bff3 	b.w	8082fec <_ZN5Print5printEmi>

08083006 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 8083006:	b40c      	push	{r2, r3}
 8083008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808300c:	b087      	sub	sp, #28
 808300e:	af00      	add	r7, sp, #0
 8083010:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8083014:	f854 9b04 	ldr.w	r9, [r4], #4
 8083018:	4605      	mov	r5, r0
 808301a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 808301c:	4623      	mov	r3, r4
 808301e:	464a      	mov	r2, r9
 8083020:	2114      	movs	r1, #20
 8083022:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 8083024:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 8083026:	f7ff fd9f 	bl	8082b68 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 808302a:	2813      	cmp	r0, #19
 808302c:	d805      	bhi.n	808303a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808302e:	1d39      	adds	r1, r7, #4
 8083030:	4628      	mov	r0, r5
 8083032:	f7fe fbf5 	bl	8081820 <_ZN5Print5writeEPKc>
 8083036:	4604      	mov	r4, r0
 8083038:	e013      	b.n	8083062 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 808303a:	f100 0308 	add.w	r3, r0, #8
 808303e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 8083042:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8083044:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 8083048:	1c41      	adds	r1, r0, #1
 808304a:	4623      	mov	r3, r4
 808304c:	464a      	mov	r2, r9
 808304e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 8083050:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 8083052:	f7ff fd89 	bl	8082b68 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8083056:	4669      	mov	r1, sp
 8083058:	4628      	mov	r0, r5
 808305a:	f7fe fbe1 	bl	8081820 <_ZN5Print5writeEPKc>
 808305e:	4604      	mov	r4, r0
 8083060:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 8083062:	b11e      	cbz	r6, 808306c <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 8083064:	4628      	mov	r0, r5
 8083066:	f7ff ff8c 	bl	8082f82 <_ZN5Print7printlnEv>
 808306a:	4404      	add	r4, r0
    return n;
}
 808306c:	4620      	mov	r0, r4
 808306e:	371c      	adds	r7, #28
 8083070:	46bd      	mov	sp, r7
 8083072:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8083076:	b002      	add	sp, #8
 8083078:	4770      	bx	lr

0808307a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 808307a:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 808307c:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 808307e:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 8083080:	b17c      	cbz	r4, 80830a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8083082:	6863      	ldr	r3, [r4, #4]
 8083084:	3b01      	subs	r3, #1
 8083086:	6063      	str	r3, [r4, #4]
 8083088:	b95b      	cbnz	r3, 80830a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 808308a:	6823      	ldr	r3, [r4, #0]
 808308c:	4620      	mov	r0, r4
 808308e:	689b      	ldr	r3, [r3, #8]
 8083090:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8083092:	68a3      	ldr	r3, [r4, #8]
 8083094:	3b01      	subs	r3, #1
 8083096:	60a3      	str	r3, [r4, #8]
 8083098:	b91b      	cbnz	r3, 80830a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 808309a:	6823      	ldr	r3, [r4, #0]
 808309c:	4620      	mov	r0, r4
 808309e:	68db      	ldr	r3, [r3, #12]
 80830a0:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80830a2:	4628      	mov	r0, r5
 80830a4:	bd38      	pop	{r3, r4, r5, pc}

080830a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80830a6:	680b      	ldr	r3, [r1, #0]
 80830a8:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80830aa:	b113      	cbz	r3, 80830b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80830ac:	685a      	ldr	r2, [r3, #4]
 80830ae:	3201      	adds	r2, #1
 80830b0:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80830b2:	4770      	bx	lr

080830b4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80830b4:	4a01      	ldr	r2, [pc, #4]	; (80830bc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80830b6:	4b02      	ldr	r3, [pc, #8]	; (80830c0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80830b8:	601a      	str	r2, [r3, #0]
 80830ba:	4770      	bx	lr
 80830bc:	08084c89 	.word	0x08084c89
 80830c0:	20000cbc 	.word	0x20000cbc

080830c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80830c4:	4b02      	ldr	r3, [pc, #8]	; (80830d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80830c6:	681a      	ldr	r2, [r3, #0]
 80830c8:	4b02      	ldr	r3, [pc, #8]	; (80830d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80830ca:	601a      	str	r2, [r3, #0]
 80830cc:	4770      	bx	lr
 80830ce:	bf00      	nop
 80830d0:	20000404 	.word	0x20000404
 80830d4:	20000cc0 	.word	0x20000cc0

080830d8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80830d8:	2100      	movs	r1, #0
 80830da:	f7ff bcc1 	b.w	8082a60 <system_delay_ms>

080830de <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80830de:	b510      	push	{r4, lr}
 80830e0:	4604      	mov	r4, r0
 80830e2:	f7fd f900 	bl	80802e6 <_ZNSt14_Function_baseD1Ev>
 80830e6:	4620      	mov	r0, r4
 80830e8:	bd10      	pop	{r4, pc}

080830ea <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80830ea:	b513      	push	{r0, r1, r4, lr}
 80830ec:	460b      	mov	r3, r1
 80830ee:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80830f0:	c803      	ldmia	r0, {r0, r1}
 80830f2:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80830f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80830fa:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80830fe:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8083102:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8083106:	b002      	add	sp, #8
 8083108:	bd10      	pop	{r4, pc}
	...

0808310c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808310c:	4803      	ldr	r0, [pc, #12]	; (808311c <_GLOBAL__sub_I_RGB+0x10>)
 808310e:	2300      	movs	r3, #0
 8083110:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8083112:	4a03      	ldr	r2, [pc, #12]	; (8083120 <_GLOBAL__sub_I_RGB+0x14>)
 8083114:	4903      	ldr	r1, [pc, #12]	; (8083124 <_GLOBAL__sub_I_RGB+0x18>)
 8083116:	f000 bdef 	b.w	8083cf8 <__aeabi_atexit>
 808311a:	bf00      	nop
 808311c:	20000cc4 	.word	0x20000cc4
 8083120:	20000470 	.word	0x20000470
 8083124:	080830df 	.word	0x080830df

08083128 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8083128:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 808312a:	4b18      	ldr	r3, [pc, #96]	; (808318c <serialEventRun+0x64>)
 808312c:	b133      	cbz	r3, 808313c <serialEventRun+0x14>
 808312e:	f000 fbbb 	bl	80838a8 <_Z16_fetch_usbserialv>
 8083132:	6803      	ldr	r3, [r0, #0]
 8083134:	691b      	ldr	r3, [r3, #16]
 8083136:	4798      	blx	r3
 8083138:	2800      	cmp	r0, #0
 808313a:	dc1e      	bgt.n	808317a <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 808313c:	4b14      	ldr	r3, [pc, #80]	; (8083190 <serialEventRun+0x68>)
 808313e:	b133      	cbz	r3, 808314e <serialEventRun+0x26>
 8083140:	f000 fc82 	bl	8083a48 <_Z22__fetch_global_Serial1v>
 8083144:	6803      	ldr	r3, [r0, #0]
 8083146:	691b      	ldr	r3, [r3, #16]
 8083148:	4798      	blx	r3
 808314a:	2800      	cmp	r0, #0
 808314c:	dc18      	bgt.n	8083180 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 808314e:	4b11      	ldr	r3, [pc, #68]	; (8083194 <serialEventRun+0x6c>)
 8083150:	b10b      	cbz	r3, 8083156 <serialEventRun+0x2e>
 8083152:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8083156:	4b10      	ldr	r3, [pc, #64]	; (8083198 <serialEventRun+0x70>)
 8083158:	b10b      	cbz	r3, 808315e <serialEventRun+0x36>
 808315a:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 808315e:	4b0f      	ldr	r3, [pc, #60]	; (808319c <serialEventRun+0x74>)
 8083160:	b10b      	cbz	r3, 8083166 <serialEventRun+0x3e>
 8083162:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8083166:	4b0e      	ldr	r3, [pc, #56]	; (80831a0 <serialEventRun+0x78>)
 8083168:	b17b      	cbz	r3, 808318a <serialEventRun+0x62>
 808316a:	f000 fbd9 	bl	8083920 <_Z17_fetch_usbserial1v>
 808316e:	6803      	ldr	r3, [r0, #0]
 8083170:	691b      	ldr	r3, [r3, #16]
 8083172:	4798      	blx	r3
 8083174:	2800      	cmp	r0, #0
 8083176:	dc06      	bgt.n	8083186 <serialEventRun+0x5e>
 8083178:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 808317a:	f3af 8000 	nop.w
 808317e:	e7dd      	b.n	808313c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8083180:	f3af 8000 	nop.w
 8083184:	e7e3      	b.n	808314e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8083186:	f3af 8000 	nop.w
 808318a:	bd08      	pop	{r3, pc}
	...

080831a4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80831a4:	b508      	push	{r3, lr}
	serialEventRun();
 80831a6:	f7ff ffbf 	bl	8083128 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80831aa:	f7ff fb49 	bl	8082840 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80831ae:	4b01      	ldr	r3, [pc, #4]	; (80831b4 <_post_loop+0x10>)
 80831b0:	6018      	str	r0, [r3, #0]
 80831b2:	bd08      	pop	{r3, pc}
 80831b4:	200011c0 	.word	0x200011c0

080831b8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80831b8:	4802      	ldr	r0, [pc, #8]	; (80831c4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80831ba:	4a03      	ldr	r2, [pc, #12]	; (80831c8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80831bc:	4903      	ldr	r1, [pc, #12]	; (80831cc <_Z33system_initialize_user_backup_ramv+0x14>)
 80831be:	1a12      	subs	r2, r2, r0
 80831c0:	f001 bad5 	b.w	808476e <memcpy>
 80831c4:	40024000 	.word	0x40024000
 80831c8:	40024004 	.word	0x40024004
 80831cc:	08084f80 	.word	0x08084f80

080831d0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80831d0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80831d2:	2300      	movs	r3, #0
 80831d4:	9300      	str	r3, [sp, #0]
 80831d6:	461a      	mov	r2, r3
 80831d8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80831dc:	f7ff fc6a 	bl	8082ab4 <system_ctrl_set_result>
}
 80831e0:	b003      	add	sp, #12
 80831e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080831e8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80831e8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80831ea:	8843      	ldrh	r3, [r0, #2]
 80831ec:	2b0a      	cmp	r3, #10
 80831ee:	d008      	beq.n	8083202 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80831f0:	2b50      	cmp	r3, #80	; 0x50
 80831f2:	d109      	bne.n	8083208 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80831f4:	4b09      	ldr	r3, [pc, #36]	; (808321c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80831f6:	681b      	ldr	r3, [r3, #0]
 80831f8:	b13b      	cbz	r3, 808320a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80831fa:	b003      	add	sp, #12
 80831fc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8083200:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8083202:	f7ff ffe5 	bl	80831d0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8083206:	e006      	b.n	8083216 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8083208:	2300      	movs	r3, #0
 808320a:	9300      	str	r3, [sp, #0]
 808320c:	461a      	mov	r2, r3
 808320e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8083212:	f7ff fc4f 	bl	8082ab4 <system_ctrl_set_result>
        break;
    }
}
 8083216:	b003      	add	sp, #12
 8083218:	f85d fb04 	ldr.w	pc, [sp], #4
 808321c:	20000cd4 	.word	0x20000cd4

08083220 <module_user_init_hook>:

void module_user_init_hook()
{
 8083220:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8083222:	4c10      	ldr	r4, [pc, #64]	; (8083264 <module_user_init_hook+0x44>)
 8083224:	4d10      	ldr	r5, [pc, #64]	; (8083268 <module_user_init_hook+0x48>)
 8083226:	6823      	ldr	r3, [r4, #0]
 8083228:	42ab      	cmp	r3, r5
 808322a:	4b10      	ldr	r3, [pc, #64]	; (808326c <module_user_init_hook+0x4c>)
 808322c:	bf0c      	ite	eq
 808322e:	2201      	moveq	r2, #1
 8083230:	2200      	movne	r2, #0
 8083232:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8083234:	d002      	beq.n	808323c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8083236:	f7ff ffbf 	bl	80831b8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 808323a:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 808323c:	f7ff faf0 	bl	8082820 <HAL_RNG_GetRandomNumber>
 8083240:	f001 faa8 	bl	8084794 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8083244:	4b0a      	ldr	r3, [pc, #40]	; (8083270 <module_user_init_hook+0x50>)
 8083246:	b11b      	cbz	r3, 8083250 <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 8083248:	f7ff faea 	bl	8082820 <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 808324c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8083250:	2100      	movs	r1, #0
 8083252:	4807      	ldr	r0, [pc, #28]	; (8083270 <module_user_init_hook+0x50>)
 8083254:	f7ff fc58 	bl	8082b08 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8083258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 808325c:	2100      	movs	r1, #0
 808325e:	4805      	ldr	r0, [pc, #20]	; (8083274 <module_user_init_hook+0x54>)
 8083260:	f7ff bc1e 	b.w	8082aa0 <system_ctrl_set_app_request_handler>
 8083264:	40024000 	.word	0x40024000
 8083268:	9a271c1e 	.word	0x9a271c1e
 808326c:	20000cd8 	.word	0x20000cd8
 8083270:	00000000 	.word	0x00000000
 8083274:	080831e9 	.word	0x080831e9

08083278 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8083278:	4770      	bx	lr

0808327a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 808327a:	2000      	movs	r0, #0
 808327c:	4770      	bx	lr

0808327e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808327e:	b510      	push	{r4, lr}
 8083280:	4604      	mov	r4, r0
 8083282:	f7fc ff0c 	bl	808009e <_ZdlPv>
 8083286:	4620      	mov	r0, r4
 8083288:	bd10      	pop	{r4, pc}

0808328a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 808328a:	b508      	push	{r3, lr}
      { delete this; }
 808328c:	b108      	cbz	r0, 8083292 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 808328e:	f7ff fff6 	bl	808327e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8083292:	bd08      	pop	{r3, pc}

08083294 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8083294:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8083296:	68c4      	ldr	r4, [r0, #12]
 8083298:	b1d4      	cbz	r4, 80832d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 808329a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 808329c:	2b02      	cmp	r3, #2
 808329e:	d102      	bne.n	80832a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80832a0:	68e0      	ldr	r0, [r4, #12]
 80832a2:	f7ff fc41 	bl	8082b28 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80832a6:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80832a8:	b12d      	cbz	r5, 80832b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80832aa:	4628      	mov	r0, r5
 80832ac:	f7fd f81b 	bl	80802e6 <_ZNSt14_Function_baseD1Ev>
 80832b0:	4628      	mov	r0, r5
 80832b2:	f7fc fef4 	bl	808009e <_ZdlPv>
 80832b6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80832b8:	b12d      	cbz	r5, 80832c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 80832ba:	4628      	mov	r0, r5
 80832bc:	f7fd f813 	bl	80802e6 <_ZNSt14_Function_baseD1Ev>
 80832c0:	4628      	mov	r0, r5
 80832c2:	f7fc feec 	bl	808009e <_ZdlPv>
 80832c6:	4620      	mov	r0, r4
 80832c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80832cc:	f7fc bee7 	b.w	808009e <_ZdlPv>
 80832d0:	bd38      	pop	{r3, r4, r5, pc}

080832d2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80832d2:	b513      	push	{r0, r1, r4, lr}
 80832d4:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80832d6:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80832da:	2300      	movs	r3, #0
 80832dc:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80832de:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80832e0:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80832e2:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80832e4:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80832e6:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80832e8:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80832ea:	f7ff fec6 	bl	808307a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80832ee:	4620      	mov	r0, r4
 80832f0:	b002      	add	sp, #8
 80832f2:	bd10      	pop	{r4, pc}

080832f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80832f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80832f6:	460c      	mov	r4, r1
 80832f8:	4606      	mov	r6, r0
 80832fa:	460f      	mov	r7, r1
 80832fc:	f854 3b04 	ldr.w	r3, [r4], #4
 8083300:	ad02      	add	r5, sp, #8
 8083302:	f845 3d08 	str.w	r3, [r5, #-8]!
 8083306:	4621      	mov	r1, r4
 8083308:	a801      	add	r0, sp, #4
 808330a:	f7ff fecc 	bl	80830a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 808330e:	4629      	mov	r1, r5
 8083310:	4630      	mov	r0, r6
 8083312:	f7ff ffde 	bl	80832d2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8083316:	a801      	add	r0, sp, #4
 8083318:	f7ff feaf 	bl	808307a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808331c:	4620      	mov	r0, r4
 808331e:	f7ff feac 	bl	808307a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8083322:	4638      	mov	r0, r7
 8083324:	f7fc febb 	bl	808009e <_ZdlPv>
        return p;
    }
 8083328:	4630      	mov	r0, r6
 808332a:	b003      	add	sp, #12
 808332c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808332e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808332e:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8083330:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8083332:	b90a      	cbnz	r2, 8083338 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8083334:	f000 fce5 	bl	8083d02 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8083338:	68c3      	ldr	r3, [r0, #12]
    }
 808333a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808333e:	4718      	bx	r3

08083340 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8083340:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8083342:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8083344:	f100 0110 	add.w	r1, r0, #16
 8083348:	f7ff fff1 	bl	808332e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 808334c:	bd08      	pop	{r3, pc}

0808334e <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808334e:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8083350:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8083352:	b90a      	cbnz	r2, 8083358 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8083354:	f000 fcd5 	bl	8083d02 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8083358:	68c3      	ldr	r3, [r0, #12]
    }
 808335a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808335e:	4718      	bx	r3

08083360 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8083360:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8083362:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8083364:	f100 0110 	add.w	r1, r0, #16
 8083368:	f7ff fff1 	bl	808334e <_ZNKSt8functionIFvRKbEEclES1_>
 808336c:	bd08      	pop	{r3, pc}

0808336e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808336e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8083370:	2300      	movs	r3, #0
 8083372:	6083      	str	r3, [r0, #8]
 8083374:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8083376:	4604      	mov	r4, r0
 8083378:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 808337a:	b12b      	cbz	r3, 8083388 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808337c:	2202      	movs	r2, #2
 808337e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8083380:	68eb      	ldr	r3, [r5, #12]
 8083382:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8083384:	68ab      	ldr	r3, [r5, #8]
 8083386:	60a3      	str	r3, [r4, #8]
	}
    }
 8083388:	4620      	mov	r0, r4
 808338a:	bd38      	pop	{r3, r4, r5, pc}

0808338c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 808338c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 8083390:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8083394:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8083396:	f04f 0002 	mov.w	r0, #2
 808339a:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808339c:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80833a0:	808b      	strh	r3, [r1, #4]
 80833a2:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80833a4:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80833a6:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 80833aa:	600b      	str	r3, [r1, #0]
 80833ac:	e8d4 1f4f 	ldrexb	r1, [r4]
 80833b0:	4299      	cmp	r1, r3
 80833b2:	d103      	bne.n	80833bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 80833b4:	e8c4 0f45 	strexb	r5, r0, [r4]
 80833b8:	2d00      	cmp	r5, #0
 80833ba:	d1f7      	bne.n	80833ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80833bc:	d002      	beq.n	80833c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 80833be:	f88d 1000 	strb.w	r1, [sp]
 80833c2:	e06b      	b.n	808349c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80833c4:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80833c8:	bf1c      	itt	ne
 80833ca:	60e7      	strne	r7, [r4, #12]
 80833cc:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80833ce:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 80833d2:	bf18      	it	ne
 80833d4:	461f      	movne	r7, r3
 80833d6:	2301      	movs	r3, #1
 80833d8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80833da:	f3bf 8f5f 	dmb	sy
 80833de:	f104 0308 	add.w	r3, r4, #8
 80833e2:	2000      	movs	r0, #0
 80833e4:	e853 6f00 	ldrex	r6, [r3]
 80833e8:	e843 0200 	strex	r2, r0, [r3]
 80833ec:	2a00      	cmp	r2, #0
 80833ee:	d1f9      	bne.n	80833e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 80833f0:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80833f4:	2e00      	cmp	r6, #0
 80833f6:	d051      	beq.n	808349c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80833f8:	f7ff fb42 	bl	8082a80 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80833fc:	b120      	cbz	r0, 8083408 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80833fe:	4629      	mov	r1, r5
 8083400:	4630      	mov	r0, r6
 8083402:	f7ff ff94 	bl	808332e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8083406:	e043      	b.n	8083490 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8083408:	4631      	mov	r1, r6
 808340a:	4668      	mov	r0, sp
 808340c:	f7ff ffaf 	bl	808336e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8083410:	68e0      	ldr	r0, [r4, #12]
 8083412:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8083416:	b108      	cbz	r0, 808341c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 8083418:	f001 f9f6 	bl	8084808 <strdup>
 808341c:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808341e:	2010      	movs	r0, #16
 8083420:	f8ad 5014 	strh.w	r5, [sp, #20]
 8083424:	f7fc fe39 	bl	808009a <_Znwj>
 8083428:	4605      	mov	r5, r0
 808342a:	b330      	cbz	r0, 808347a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808342c:	f04f 0800 	mov.w	r8, #0
 8083430:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8083434:	2018      	movs	r0, #24
 8083436:	f7fc fe30 	bl	808009a <_Znwj>
 808343a:	4604      	mov	r4, r0
 808343c:	b1c0      	cbz	r0, 8083470 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808343e:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8083442:	4601      	mov	r1, r0
 8083444:	4668      	mov	r0, sp
 8083446:	f7ff fe50 	bl	80830ea <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808344a:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 808344c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808344e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8083450:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8083452:	9202      	str	r2, [sp, #8]
 8083454:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8083456:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8083458:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 808345c:	9203      	str	r2, [sp, #12]
 808345e:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 8083460:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8083464:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8083468:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 808346a:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808346e:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8083470:	4b0d      	ldr	r3, [pc, #52]	; (80834a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8083472:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8083474:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8083476:	4b0d      	ldr	r3, [pc, #52]	; (80834ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 8083478:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 808347a:	9804      	ldr	r0, [sp, #16]
 808347c:	f7ff fb54 	bl	8082b28 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8083480:	4668      	mov	r0, sp
 8083482:	f7fc ff30 	bl	80802e6 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8083486:	2200      	movs	r2, #0
 8083488:	4629      	mov	r1, r5
 808348a:	4809      	ldr	r0, [pc, #36]	; (80834b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 808348c:	f7ff fb00 	bl	8082a90 <application_thread_invoke>
 8083490:	4630      	mov	r0, r6
 8083492:	f7fc ff28 	bl	80802e6 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8083496:	4630      	mov	r0, r6
 8083498:	f7fc fe01 	bl	808009e <_ZdlPv>
 808349c:	4638      	mov	r0, r7
 808349e:	f7ff fb43 	bl	8082b28 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 80834a2:	b006      	add	sp, #24
 80834a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80834a8:	08083341 	.word	0x08083341
 80834ac:	0808359d 	.word	0x0808359d
 80834b0:	08083a95 	.word	0x08083a95

080834b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80834b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80834b8:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80834ba:	ad07      	add	r5, sp, #28
 80834bc:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80834c0:	4606      	mov	r6, r0
 80834c2:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80834c4:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80834c6:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80834c8:	460f      	mov	r7, r1
 80834ca:	4690      	mov	r8, r2
 80834cc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80834d0:	f8c5 b004 	str.w	fp, [r5, #4]
 80834d4:	f8c5 b008 	str.w	fp, [r5, #8]
 80834d8:	9307      	str	r3, [sp, #28]
 80834da:	f7fc fdde 	bl	808009a <_Znwj>
 80834de:	4604      	mov	r4, r0
 80834e0:	b138      	cbz	r0, 80834f2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80834e2:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80834e6:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80834ea:	f8c0 b004 	str.w	fp, [r0, #4]
 80834ee:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80834f2:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80834f4:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80834f6:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80834f8:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80834fa:	f7fc fdce 	bl	808009a <_Znwj>
 80834fe:	b128      	cbz	r0, 808350c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8083500:	2301      	movs	r3, #1
 8083502:	6043      	str	r3, [r0, #4]
 8083504:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8083506:	4b23      	ldr	r3, [pc, #140]	; (8083594 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 8083508:	60c4      	str	r4, [r0, #12]
 808350a:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 808350c:	4b22      	ldr	r3, [pc, #136]	; (8083598 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808350e:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8083510:	2008      	movs	r0, #8
 8083512:	9308      	str	r3, [sp, #32]
 8083514:	f7fc fdc1 	bl	808009a <_Znwj>
 8083518:	4604      	mov	r4, r0
 808351a:	b128      	cbz	r0, 8083528 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 808351c:	9b03      	ldr	r3, [sp, #12]
 808351e:	a904      	add	r1, sp, #16
 8083520:	f840 3b04 	str.w	r3, [r0], #4
 8083524:	f7ff fdbf 	bl	80830a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8083528:	9500      	str	r5, [sp, #0]
 808352a:	fa5f f38a 	uxtb.w	r3, sl
 808352e:	464a      	mov	r2, r9
 8083530:	4641      	mov	r1, r8
 8083532:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8083534:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8083536:	f7ff fadf 	bl	8082af8 <spark_send_event>
 808353a:	b9b8      	cbnz	r0, 808356c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 808353c:	9b03      	ldr	r3, [sp, #12]
 808353e:	785b      	ldrb	r3, [r3, #1]
 8083540:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8083544:	b993      	cbnz	r3, 808356c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8083546:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 808354a:	a905      	add	r1, sp, #20
 808354c:	a803      	add	r0, sp, #12
 808354e:	9205      	str	r2, [sp, #20]
 8083550:	f8ad 3018 	strh.w	r3, [sp, #24]
 8083554:	f7ff ff1a 	bl	808338c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8083558:	9805      	ldr	r0, [sp, #20]
 808355a:	f7ff fae5 	bl	8082b28 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 808355e:	a805      	add	r0, sp, #20
 8083560:	9909      	ldr	r1, [sp, #36]	; 0x24
 8083562:	f7ff fec7 	bl	80832f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8083566:	a806      	add	r0, sp, #24
 8083568:	f7ff fd87 	bl	808307a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 808356c:	9b03      	ldr	r3, [sp, #12]
 808356e:	a904      	add	r1, sp, #16
 8083570:	a806      	add	r0, sp, #24
 8083572:	9305      	str	r3, [sp, #20]
 8083574:	f7ff fd97 	bl	80830a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8083578:	a905      	add	r1, sp, #20
 808357a:	4630      	mov	r0, r6
 808357c:	f7ff fea9 	bl	80832d2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8083580:	a806      	add	r0, sp, #24
 8083582:	f7ff fd7a 	bl	808307a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8083586:	a804      	add	r0, sp, #16
 8083588:	f7ff fd77 	bl	808307a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 808358c:	4630      	mov	r0, r6
 808358e:	b00b      	add	sp, #44	; 0x2c
 8083590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8083594:	08084ce4 	.word	0x08084ce4
 8083598:	08083705 	.word	0x08083705

0808359c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 808359c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808359e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80835a0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80835a2:	d006      	beq.n	80835b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80835a4:	2a03      	cmp	r2, #3
 80835a6:	d017      	beq.n	80835d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80835a8:	2a01      	cmp	r2, #1
 80835aa:	d120      	bne.n	80835ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80835ac:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80835ae:	6003      	str	r3, [r0, #0]
	      break;
 80835b0:	e01d      	b.n	80835ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80835b2:	2018      	movs	r0, #24
 80835b4:	680e      	ldr	r6, [r1, #0]
 80835b6:	f7fc fd70 	bl	808009a <_Znwj>
 80835ba:	4605      	mov	r5, r0
 80835bc:	b150      	cbz	r0, 80835d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80835be:	4631      	mov	r1, r6
 80835c0:	f7ff fed5 	bl	808336e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80835c4:	6930      	ldr	r0, [r6, #16]
 80835c6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80835ca:	b108      	cbz	r0, 80835d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80835cc:	f001 f91c 	bl	8084808 <strdup>
 80835d0:	6128      	str	r0, [r5, #16]
 80835d2:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80835d4:	6025      	str	r5, [r4, #0]
 80835d6:	e00a      	b.n	80835ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80835d8:	6804      	ldr	r4, [r0, #0]
 80835da:	b144      	cbz	r4, 80835ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80835dc:	6920      	ldr	r0, [r4, #16]
 80835de:	f7ff faa3 	bl	8082b28 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80835e2:	4620      	mov	r0, r4
 80835e4:	f7fc fe7f 	bl	80802e6 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80835e8:	4620      	mov	r0, r4
 80835ea:	f7fc fd58 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80835ee:	2000      	movs	r0, #0
 80835f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080835f2 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80835f2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80835f4:	2300      	movs	r3, #0
 80835f6:	6083      	str	r3, [r0, #8]
 80835f8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80835fa:	4604      	mov	r4, r0
 80835fc:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80835fe:	b12b      	cbz	r3, 808360c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8083600:	2202      	movs	r2, #2
 8083602:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8083604:	68eb      	ldr	r3, [r5, #12]
 8083606:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8083608:	68ab      	ldr	r3, [r5, #8]
 808360a:	60a3      	str	r3, [r4, #8]
	}
    }
 808360c:	4620      	mov	r0, r4
 808360e:	bd38      	pop	{r3, r4, r5, pc}

08083610 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8083610:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8083612:	b570      	push	{r4, r5, r6, lr}
 8083614:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8083616:	d006      	beq.n	8083626 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8083618:	2a03      	cmp	r2, #3
 808361a:	d011      	beq.n	8083640 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 808361c:	2a01      	cmp	r2, #1
 808361e:	d117      	bne.n	8083650 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8083620:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8083622:	6003      	str	r3, [r0, #0]
	      break;
 8083624:	e014      	b.n	8083650 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8083626:	2014      	movs	r0, #20
 8083628:	680e      	ldr	r6, [r1, #0]
 808362a:	f7fc fd36 	bl	808009a <_Znwj>
 808362e:	4605      	mov	r5, r0
 8083630:	b120      	cbz	r0, 808363c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8083632:	4631      	mov	r1, r6
 8083634:	f7ff ffdd 	bl	80835f2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8083638:	7c33      	ldrb	r3, [r6, #16]
 808363a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808363c:	6025      	str	r5, [r4, #0]
 808363e:	e007      	b.n	8083650 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8083640:	6804      	ldr	r4, [r0, #0]
 8083642:	b12c      	cbz	r4, 8083650 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8083644:	4620      	mov	r0, r4
 8083646:	f7fc fe4e 	bl	80802e6 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808364a:	4620      	mov	r0, r4
 808364c:	f7fc fd27 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8083650:	2000      	movs	r0, #0
 8083652:	bd70      	pop	{r4, r5, r6, pc}

08083654 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8083654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8083656:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8083658:	f3bf 8f5f 	dmb	sy
 808365c:	b087      	sub	sp, #28
 808365e:	2300      	movs	r3, #0
 8083660:	e850 6f00 	ldrex	r6, [r0]
 8083664:	e840 3200 	strex	r2, r3, [r0]
 8083668:	2a00      	cmp	r2, #0
 808366a:	d1f9      	bne.n	8083660 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 808366c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8083670:	2e00      	cmp	r6, #0
 8083672:	d03e      	beq.n	80836f2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8083674:	4618      	mov	r0, r3
 8083676:	f7ff fa03 	bl	8082a80 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 808367a:	4607      	mov	r7, r0
 808367c:	b120      	cbz	r0, 8083688 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808367e:	4621      	mov	r1, r4
 8083680:	4630      	mov	r0, r6
 8083682:	f7ff fe64 	bl	808334e <_ZNKSt8functionIFvRKbEEclES1_>
 8083686:	e02e      	b.n	80836e6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8083688:	4631      	mov	r1, r6
 808368a:	a801      	add	r0, sp, #4
 808368c:	f7ff ffb1 	bl	80835f2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8083690:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8083692:	2010      	movs	r0, #16
 8083694:	f88d 3014 	strb.w	r3, [sp, #20]
 8083698:	f7fc fcff 	bl	808009a <_Znwj>
 808369c:	4605      	mov	r5, r0
 808369e:	b1d0      	cbz	r0, 80836d6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80836a0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80836a2:	2014      	movs	r0, #20
 80836a4:	f7fc fcf9 	bl	808009a <_Znwj>
 80836a8:	4604      	mov	r4, r0
 80836aa:	b178      	cbz	r0, 80836cc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80836ac:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80836ae:	4601      	mov	r1, r0
 80836b0:	a801      	add	r0, sp, #4
 80836b2:	f7ff fd1a 	bl	80830ea <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80836b6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80836b8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80836ba:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80836bc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80836be:	9203      	str	r2, [sp, #12]
 80836c0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80836c2:	60e3      	str	r3, [r4, #12]
 80836c4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80836c8:	9204      	str	r2, [sp, #16]
 80836ca:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80836cc:	4b0a      	ldr	r3, [pc, #40]	; (80836f8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80836ce:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80836d0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80836d2:	4b0a      	ldr	r3, [pc, #40]	; (80836fc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80836d4:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80836d6:	a801      	add	r0, sp, #4
 80836d8:	f7fc fe05 	bl	80802e6 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80836dc:	2200      	movs	r2, #0
 80836de:	4629      	mov	r1, r5
 80836e0:	4807      	ldr	r0, [pc, #28]	; (8083700 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80836e2:	f7ff f9d5 	bl	8082a90 <application_thread_invoke>
 80836e6:	4630      	mov	r0, r6
 80836e8:	f7fc fdfd 	bl	80802e6 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80836ec:	4630      	mov	r0, r6
 80836ee:	f7fc fcd6 	bl	808009e <_ZdlPv>
        }
    }
 80836f2:	b007      	add	sp, #28
 80836f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80836f6:	bf00      	nop
 80836f8:	08083361 	.word	0x08083361
 80836fc:	08083611 	.word	0x08083611
 8083700:	08083a95 	.word	0x08083a95

08083704 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8083704:	b530      	push	{r4, r5, lr}
 8083706:	4604      	mov	r4, r0
 8083708:	b085      	sub	sp, #20
 808370a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 808370c:	4668      	mov	r0, sp
 808370e:	4611      	mov	r1, r2
 8083710:	f7ff fdf0 	bl	80832f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8083714:	b17c      	cbz	r4, 8083736 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8083716:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8083718:	4628      	mov	r0, r5
 808371a:	b10d      	cbz	r5, 8083720 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 808371c:	f001 f874 	bl	8084808 <strdup>
 8083720:	9002      	str	r0, [sp, #8]
 8083722:	a902      	add	r1, sp, #8
 8083724:	4668      	mov	r0, sp
 8083726:	f8ad 400c 	strh.w	r4, [sp, #12]
 808372a:	f7ff fe2f 	bl	808338c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 808372e:	9802      	ldr	r0, [sp, #8]
 8083730:	f7ff f9fa 	bl	8082b28 <free>
 8083734:	e01d      	b.n	8083772 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8083736:	f04f 0201 	mov.w	r2, #1
 808373a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 808373c:	f88d 4008 	strb.w	r4, [sp, #8]
 8083740:	e8d0 3f4f 	ldrexb	r3, [r0]
 8083744:	42a3      	cmp	r3, r4
 8083746:	d103      	bne.n	8083750 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8083748:	e8c0 2f41 	strexb	r1, r2, [r0]
 808374c:	2900      	cmp	r1, #0
 808374e:	d1f7      	bne.n	8083740 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8083750:	d002      	beq.n	8083758 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8083752:	f88d 3008 	strb.w	r3, [sp, #8]
 8083756:	e00c      	b.n	8083772 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8083758:	f110 010c 	adds.w	r1, r0, #12
 808375c:	f04f 0301 	mov.w	r3, #1
 8083760:	bf18      	it	ne
 8083762:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8083764:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8083768:	3004      	adds	r0, #4
 808376a:	f800 3c03 	strb.w	r3, [r0, #-3]
 808376e:	f7ff ff71 	bl	8083654 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8083772:	a801      	add	r0, sp, #4
 8083774:	f7ff fc81 	bl	808307a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8083778:	b005      	add	sp, #20
 808377a:	bd30      	pop	{r4, r5, pc}

0808377c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 808377c:	4770      	bx	lr

0808377e <_ZN9IPAddressD0Ev>:
 808377e:	b510      	push	{r4, lr}
 8083780:	4604      	mov	r4, r0
 8083782:	f7fc fc8c 	bl	808009e <_ZdlPv>
 8083786:	4620      	mov	r0, r4
 8083788:	bd10      	pop	{r4, pc}

0808378a <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 808378a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808378c:	460f      	mov	r7, r1
 808378e:	f100 0608 	add.w	r6, r0, #8
 8083792:	1d05      	adds	r5, r0, #4
 8083794:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8083796:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 808379a:	220a      	movs	r2, #10
 808379c:	4638      	mov	r0, r7
 808379e:	f7ff fc30 	bl	8083002 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80837a2:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80837a4:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80837a6:	d007      	beq.n	80837b8 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80837a8:	2c00      	cmp	r4, #0
 80837aa:	d0f4      	beq.n	8083796 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80837ac:	212e      	movs	r1, #46	; 0x2e
 80837ae:	4638      	mov	r0, r7
 80837b0:	f7ff fbe4 	bl	8082f7c <_ZN5Print5printEc>
 80837b4:	4404      	add	r4, r0
 80837b6:	e7ee      	b.n	8083796 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80837b8:	4620      	mov	r0, r4
 80837ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080837bc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80837bc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80837be:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80837c2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80837c6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80837ca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80837ce:	6041      	str	r1, [r0, #4]
 80837d0:	bd10      	pop	{r4, pc}
	...

080837d4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80837d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80837d6:	4d04      	ldr	r5, [pc, #16]	; (80837e8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80837d8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80837da:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80837de:	9500      	str	r5, [sp, #0]
 80837e0:	f7ff ffec 	bl	80837bc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80837e4:	b003      	add	sp, #12
 80837e6:	bd30      	pop	{r4, r5, pc}
 80837e8:	08084d00 	.word	0x08084d00

080837ec <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80837ec:	7441      	strb	r1, [r0, #17]
 80837ee:	4770      	bx	lr

080837f0 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80837f0:	4770      	bx	lr

080837f2 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80837f2:	2100      	movs	r1, #0
 80837f4:	7c00      	ldrb	r0, [r0, #16]
 80837f6:	f7ff b90b 	b.w	8082a10 <HAL_USB_USART_Receive_Data>

080837fa <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80837fa:	2101      	movs	r1, #1
 80837fc:	7c00      	ldrb	r0, [r0, #16]
 80837fe:	f7ff b907 	b.w	8082a10 <HAL_USB_USART_Receive_Data>

08083802 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 8083802:	7c00      	ldrb	r0, [r0, #16]
 8083804:	f7ff b8fc 	b.w	8082a00 <HAL_USB_USART_Available_Data_For_Write>

08083808 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 8083808:	7c00      	ldrb	r0, [r0, #16]
 808380a:	f7ff b8f1 	b.w	80829f0 <HAL_USB_USART_Available_Data>

0808380e <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 808380e:	b538      	push	{r3, r4, r5, lr}
 8083810:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8083812:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 8083814:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8083816:	f7ff f8f3 	bl	8082a00 <HAL_USB_USART_Available_Data_For_Write>
 808381a:	2800      	cmp	r0, #0
 808381c:	dc01      	bgt.n	8083822 <_ZN9USBSerial5writeEh+0x14>
 808381e:	7c60      	ldrb	r0, [r4, #17]
 8083820:	b120      	cbz	r0, 808382c <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 8083822:	4629      	mov	r1, r5
 8083824:	7c20      	ldrb	r0, [r4, #16]
 8083826:	f7ff f8fb 	bl	8082a20 <HAL_USB_USART_Send_Data>
    return 1;
 808382a:	2001      	movs	r0, #1
  }
  return 0;
}
 808382c:	bd38      	pop	{r3, r4, r5, pc}

0808382e <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 808382e:	7c00      	ldrb	r0, [r0, #16]
 8083830:	f7ff b8fe 	b.w	8082a30 <HAL_USB_USART_Flush_Data>

08083834 <_ZN9USBSerialD0Ev>:
 8083834:	b510      	push	{r4, lr}
 8083836:	4604      	mov	r4, r0
 8083838:	f7fc fc31 	bl	808009e <_ZdlPv>
 808383c:	4620      	mov	r0, r4
 808383e:	bd10      	pop	{r4, pc}

08083840 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8083840:	b510      	push	{r4, lr}
 8083842:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8083844:	2300      	movs	r3, #0
 8083846:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8083848:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808384c:	60a3      	str	r3, [r4, #8]
 808384e:	4b05      	ldr	r3, [pc, #20]	; (8083864 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8083850:	4608      	mov	r0, r1
 8083852:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8083854:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8083856:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8083858:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 808385a:	4611      	mov	r1, r2
 808385c:	f7ff f8b8 	bl	80829d0 <HAL_USB_USART_Init>
}
 8083860:	4620      	mov	r0, r4
 8083862:	bd10      	pop	{r4, pc}
 8083864:	08084d14 	.word	0x08084d14

08083868 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8083868:	2200      	movs	r2, #0
 808386a:	7c00      	ldrb	r0, [r0, #16]
 808386c:	f7ff b8b8 	b.w	80829e0 <HAL_USB_USART_Begin>

08083870 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 8083870:	7c00      	ldrb	r0, [r0, #16]
 8083872:	f7ff b8e5 	b.w	8082a40 <HAL_USB_USART_Is_Enabled>

08083876 <_ZN9USBSerialcvbEv>:
{
	return HAL_USB_USART_Receive_Data(_serial, true);
}

USBSerial::operator bool() {
  return isEnabled();
 8083876:	f7ff bffb 	b.w	8083870 <_ZN9USBSerial9isEnabledEv>
	...

0808387c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 808387c:	b510      	push	{r4, lr}
 808387e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8083880:	2214      	movs	r2, #20
 8083882:	2100      	movs	r1, #0
 8083884:	f000 ff7e 	bl	8084784 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8083888:	4b05      	ldr	r3, [pc, #20]	; (80838a0 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808388a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808388c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 808388e:	4b05      	ldr	r3, [pc, #20]	; (80838a4 <_Z19acquireSerialBufferv+0x28>)
 8083890:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8083892:	f240 1301 	movw	r3, #257	; 0x101
 8083896:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8083898:	2381      	movs	r3, #129	; 0x81
 808389a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 808389c:	bd10      	pop	{r4, pc}
 808389e:	bf00      	nop
 80838a0:	20000d61 	.word	0x20000d61
 80838a4:	20000ce0 	.word	0x20000ce0

080838a8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80838a8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80838aa:	4d0e      	ldr	r5, [pc, #56]	; (80838e4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80838ac:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80838ae:	a801      	add	r0, sp, #4
 80838b0:	f7ff ffe4 	bl	808387c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80838b4:	6829      	ldr	r1, [r5, #0]
 80838b6:	f011 0401 	ands.w	r4, r1, #1
 80838ba:	d110      	bne.n	80838de <_Z16_fetch_usbserialv+0x36>
 80838bc:	4628      	mov	r0, r5
 80838be:	f7fc fbf0 	bl	80800a2 <__cxa_guard_acquire>
 80838c2:	b160      	cbz	r0, 80838de <_Z16_fetch_usbserialv+0x36>
 80838c4:	aa01      	add	r2, sp, #4
 80838c6:	4621      	mov	r1, r4
 80838c8:	4807      	ldr	r0, [pc, #28]	; (80838e8 <_Z16_fetch_usbserialv+0x40>)
 80838ca:	f7ff ffb9 	bl	8083840 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80838ce:	4628      	mov	r0, r5
 80838d0:	f7fc fbec 	bl	80800ac <__cxa_guard_release>
 80838d4:	4a05      	ldr	r2, [pc, #20]	; (80838ec <_Z16_fetch_usbserialv+0x44>)
 80838d6:	4906      	ldr	r1, [pc, #24]	; (80838f0 <_Z16_fetch_usbserialv+0x48>)
 80838d8:	4803      	ldr	r0, [pc, #12]	; (80838e8 <_Z16_fetch_usbserialv+0x40>)
 80838da:	f000 fa0d 	bl	8083cf8 <__aeabi_atexit>
	return _usbserial;
}
 80838de:	4802      	ldr	r0, [pc, #8]	; (80838e8 <_Z16_fetch_usbserialv+0x40>)
 80838e0:	b007      	add	sp, #28
 80838e2:	bd30      	pop	{r4, r5, pc}
 80838e4:	20000cdc 	.word	0x20000cdc
 80838e8:	20000e64 	.word	0x20000e64
 80838ec:	20000470 	.word	0x20000470
 80838f0:	080837f1 	.word	0x080837f1

080838f4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80838f4:	b510      	push	{r4, lr}
 80838f6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80838f8:	2214      	movs	r2, #20
 80838fa:	2100      	movs	r1, #0
 80838fc:	f000 ff42 	bl	8084784 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8083900:	4b05      	ldr	r3, [pc, #20]	; (8083918 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8083902:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8083904:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8083906:	4b05      	ldr	r3, [pc, #20]	; (808391c <_Z23acquireUSBSerial1Bufferv+0x28>)
 8083908:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808390a:	f240 1301 	movw	r3, #257	; 0x101
 808390e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8083910:	2381      	movs	r3, #129	; 0x81
 8083912:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8083914:	bd10      	pop	{r4, pc}
 8083916:	bf00      	nop
 8083918:	20000f14 	.word	0x20000f14
 808391c:	20000e7c 	.word	0x20000e7c

08083920 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8083920:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8083922:	4c0e      	ldr	r4, [pc, #56]	; (808395c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8083924:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8083926:	a801      	add	r0, sp, #4
 8083928:	f7ff ffe4 	bl	80838f4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808392c:	6823      	ldr	r3, [r4, #0]
 808392e:	07db      	lsls	r3, r3, #31
 8083930:	d410      	bmi.n	8083954 <_Z17_fetch_usbserial1v+0x34>
 8083932:	4620      	mov	r0, r4
 8083934:	f7fc fbb5 	bl	80800a2 <__cxa_guard_acquire>
 8083938:	b160      	cbz	r0, 8083954 <_Z17_fetch_usbserial1v+0x34>
 808393a:	aa01      	add	r2, sp, #4
 808393c:	2101      	movs	r1, #1
 808393e:	4808      	ldr	r0, [pc, #32]	; (8083960 <_Z17_fetch_usbserial1v+0x40>)
 8083940:	f7ff ff7e 	bl	8083840 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8083944:	4620      	mov	r0, r4
 8083946:	f7fc fbb1 	bl	80800ac <__cxa_guard_release>
 808394a:	4a06      	ldr	r2, [pc, #24]	; (8083964 <_Z17_fetch_usbserial1v+0x44>)
 808394c:	4906      	ldr	r1, [pc, #24]	; (8083968 <_Z17_fetch_usbserial1v+0x48>)
 808394e:	4804      	ldr	r0, [pc, #16]	; (8083960 <_Z17_fetch_usbserial1v+0x40>)
 8083950:	f000 f9d2 	bl	8083cf8 <__aeabi_atexit>
  return _usbserial1;
}
 8083954:	4802      	ldr	r0, [pc, #8]	; (8083960 <_Z17_fetch_usbserial1v+0x40>)
 8083956:	b006      	add	sp, #24
 8083958:	bd10      	pop	{r4, pc}
 808395a:	bf00      	nop
 808395c:	20000e78 	.word	0x20000e78
 8083960:	20000f00 	.word	0x20000f00
 8083964:	20000470 	.word	0x20000470
 8083968:	080837f1 	.word	0x080837f1

0808396c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808396c:	2200      	movs	r2, #0
 808396e:	4611      	mov	r1, r2
 8083970:	4610      	mov	r0, r2
 8083972:	f7ff b8a9 	b.w	8082ac8 <network_ready>
	...

08083978 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    NetworkClass& Network = Cellular;
}
 8083978:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 808397a:	4c0b      	ldr	r4, [pc, #44]	; (80839a8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x30>)
 808397c:	2528      	movs	r5, #40	; 0x28
 808397e:	462a      	mov	r2, r5
 8083980:	2100      	movs	r1, #0
 8083982:	4620      	mov	r0, r4
 8083984:	f000 fefe 	bl	8084784 <memset>
        cid = -1;
 8083988:	f04f 33ff 	mov.w	r3, #4294967295
 808398c:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
 808398e:	8025      	strh	r5, [r4, #0]
#include "inet_hal.h"
#include "spark_wiring_cellular_printable.h"

namespace spark {

class CellularClass : public NetworkClass
 8083990:	4c06      	ldr	r4, [pc, #24]	; (80839ac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 8083992:	4b07      	ldr	r3, [pc, #28]	; (80839b0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 8083994:	4620      	mov	r0, r4
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 8083996:	252c      	movs	r5, #44	; 0x2c
 8083998:	f840 3b04 	str.w	r3, [r0], #4
 808399c:	462a      	mov	r2, r5
 808399e:	2100      	movs	r1, #0
 80839a0:	f000 fef0 	bl	8084784 <memset>
        size = sizeof(*this);
 80839a4:	80a5      	strh	r5, [r4, #4]
 80839a6:	bd38      	pop	{r3, r4, r5, pc}
 80839a8:	20001048 	.word	0x20001048
 80839ac:	20001018 	.word	0x20001018
 80839b0:	08084d44 	.word	0x08084d44

080839b4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80839b4:	4770      	bx	lr

080839b6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80839b6:	7441      	strb	r1, [r0, #17]
 80839b8:	4770      	bx	lr

080839ba <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80839ba:	7c00      	ldrb	r0, [r0, #16]
 80839bc:	f7fe bfc0 	b.w	8082940 <HAL_USART_Available_Data_For_Write>

080839c0 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80839c0:	7c00      	ldrb	r0, [r0, #16]
 80839c2:	f7fe bf95 	b.w	80828f0 <HAL_USART_Available_Data>

080839c6 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80839c6:	7c00      	ldrb	r0, [r0, #16]
 80839c8:	f7fe bfa2 	b.w	8082910 <HAL_USART_Peek_Data>

080839cc <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80839cc:	7c00      	ldrb	r0, [r0, #16]
 80839ce:	f7fe bf97 	b.w	8082900 <HAL_USART_Read_Data>

080839d2 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80839d2:	7c00      	ldrb	r0, [r0, #16]
 80839d4:	f7fe bfa4 	b.w	8082920 <HAL_USART_Flush_Data>

080839d8 <_ZN11USARTSerialD0Ev>:
 80839d8:	b510      	push	{r4, lr}
 80839da:	4604      	mov	r4, r0
 80839dc:	f7fc fb5f 	bl	808009e <_ZdlPv>
 80839e0:	4620      	mov	r0, r4
 80839e2:	bd10      	pop	{r4, pc}

080839e4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80839e4:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80839e6:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80839e8:	4604      	mov	r4, r0
 80839ea:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80839ec:	b925      	cbnz	r5, 80839f8 <_ZN11USARTSerial5writeEh+0x14>
 80839ee:	7c00      	ldrb	r0, [r0, #16]
 80839f0:	f7fe ffa6 	bl	8082940 <HAL_USART_Available_Data_For_Write>
 80839f4:	2800      	cmp	r0, #0
 80839f6:	dd05      	ble.n	8083a04 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80839f8:	4631      	mov	r1, r6
 80839fa:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80839fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8083a00:	f7fe bf6e 	b.w	80828e0 <HAL_USART_Write_Data>
  }
  return 0;
}
 8083a04:	4628      	mov	r0, r5
 8083a06:	bd70      	pop	{r4, r5, r6, pc}

08083a08 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8083a08:	b510      	push	{r4, lr}
 8083a0a:	4604      	mov	r4, r0
 8083a0c:	4608      	mov	r0, r1
 8083a0e:	4611      	mov	r1, r2
 8083a10:	2200      	movs	r2, #0
 8083a12:	6062      	str	r2, [r4, #4]
 8083a14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8083a18:	60a2      	str	r2, [r4, #8]
 8083a1a:	4a05      	ldr	r2, [pc, #20]	; (8083a30 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8083a1c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8083a1e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8083a20:	2201      	movs	r2, #1
 8083a22:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8083a24:	461a      	mov	r2, r3
 8083a26:	f7fe ff53 	bl	80828d0 <HAL_USART_Init>
}
 8083a2a:	4620      	mov	r0, r4
 8083a2c:	bd10      	pop	{r4, pc}
 8083a2e:	bf00      	nop
 8083a30:	08084d50 	.word	0x08084d50

08083a34 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 8083a34:	2300      	movs	r3, #0
 8083a36:	7c00      	ldrb	r0, [r0, #16]
 8083a38:	f7fe bf8a 	b.w	8082950 <HAL_USART_BeginConfig>

08083a3c <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 8083a3c:	2200      	movs	r2, #0
 8083a3e:	f7ff bff9 	b.w	8083a34 <_ZN11USARTSerial5beginEmm>

08083a42 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8083a42:	7c00      	ldrb	r0, [r0, #16]
 8083a44:	f7fe bf74 	b.w	8082930 <HAL_USART_Is_Enabled>

08083a48 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8083a48:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8083a4a:	4d0c      	ldr	r5, [pc, #48]	; (8083a7c <_Z22__fetch_global_Serial1v+0x34>)
 8083a4c:	6829      	ldr	r1, [r5, #0]
 8083a4e:	f011 0401 	ands.w	r4, r1, #1
 8083a52:	d111      	bne.n	8083a78 <_Z22__fetch_global_Serial1v+0x30>
 8083a54:	4628      	mov	r0, r5
 8083a56:	f7fc fb24 	bl	80800a2 <__cxa_guard_acquire>
 8083a5a:	b168      	cbz	r0, 8083a78 <_Z22__fetch_global_Serial1v+0x30>
 8083a5c:	4a08      	ldr	r2, [pc, #32]	; (8083a80 <_Z22__fetch_global_Serial1v+0x38>)
 8083a5e:	4621      	mov	r1, r4
 8083a60:	4b08      	ldr	r3, [pc, #32]	; (8083a84 <_Z22__fetch_global_Serial1v+0x3c>)
 8083a62:	4809      	ldr	r0, [pc, #36]	; (8083a88 <_Z22__fetch_global_Serial1v+0x40>)
 8083a64:	f7ff ffd0 	bl	8083a08 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8083a68:	4628      	mov	r0, r5
 8083a6a:	f7fc fb1f 	bl	80800ac <__cxa_guard_release>
 8083a6e:	4a07      	ldr	r2, [pc, #28]	; (8083a8c <_Z22__fetch_global_Serial1v+0x44>)
 8083a70:	4907      	ldr	r1, [pc, #28]	; (8083a90 <_Z22__fetch_global_Serial1v+0x48>)
 8083a72:	4805      	ldr	r0, [pc, #20]	; (8083a88 <_Z22__fetch_global_Serial1v+0x40>)
 8083a74:	f000 f940 	bl	8083cf8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8083a78:	4803      	ldr	r0, [pc, #12]	; (8083a88 <_Z22__fetch_global_Serial1v+0x40>)
 8083a7a:	bd38      	pop	{r3, r4, r5, pc}
 8083a7c:	20001108 	.word	0x20001108
 8083a80:	2000110c 	.word	0x2000110c
 8083a84:	20001084 	.word	0x20001084
 8083a88:	20001070 	.word	0x20001070
 8083a8c:	20000470 	.word	0x20000470
 8083a90:	080839b5 	.word	0x080839b5

08083a94 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8083a94:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8083a96:	6883      	ldr	r3, [r0, #8]
 8083a98:	4604      	mov	r4, r0
 8083a9a:	b90b      	cbnz	r3, 8083aa0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8083a9c:	f000 f931 	bl	8083d02 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8083aa0:	68c3      	ldr	r3, [r0, #12]
 8083aa2:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8083aa4:	68a3      	ldr	r3, [r4, #8]
 8083aa6:	b11b      	cbz	r3, 8083ab0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8083aa8:	2203      	movs	r2, #3
 8083aaa:	4621      	mov	r1, r4
 8083aac:	4620      	mov	r0, r4
 8083aae:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8083ab0:	4620      	mov	r0, r4
}
 8083ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8083ab6:	f7fc baf2 	b.w	808009e <_ZdlPv>

08083aba <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 8083aba:	4770      	bx	lr

08083abc <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8083abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083abe:	4606      	mov	r6, r0
 8083ac0:	4615      	mov	r5, r2
 8083ac2:	460c      	mov	r4, r1
 8083ac4:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8083ac6:	42bc      	cmp	r4, r7
 8083ac8:	d006      	beq.n	8083ad8 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8083aca:	6833      	ldr	r3, [r6, #0]
 8083acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8083ad0:	689b      	ldr	r3, [r3, #8]
 8083ad2:	4630      	mov	r0, r6
 8083ad4:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8083ad6:	e7f6      	b.n	8083ac6 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 8083ad8:	4628      	mov	r0, r5
 8083ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08083adc <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8083adc:	2200      	movs	r2, #0
 8083ade:	7c00      	ldrb	r0, [r0, #16]
 8083ae0:	f7fe bf3e 	b.w	8082960 <HAL_I2C_Write_Data>

08083ae4 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8083ae4:	2100      	movs	r1, #0
 8083ae6:	7c00      	ldrb	r0, [r0, #16]
 8083ae8:	f7fe bf42 	b.w	8082970 <HAL_I2C_Available_Data>

08083aec <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8083aec:	2100      	movs	r1, #0
 8083aee:	7c00      	ldrb	r0, [r0, #16]
 8083af0:	f7fe bf46 	b.w	8082980 <HAL_I2C_Read_Data>

08083af4 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8083af4:	2100      	movs	r1, #0
 8083af6:	7c00      	ldrb	r0, [r0, #16]
 8083af8:	f7fe bf4a 	b.w	8082990 <HAL_I2C_Peek_Data>

08083afc <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8083afc:	2100      	movs	r1, #0
 8083afe:	7c00      	ldrb	r0, [r0, #16]
 8083b00:	f7fe bf4e 	b.w	80829a0 <HAL_I2C_Flush_Data>

08083b04 <_ZN7TwoWireD0Ev>:
 8083b04:	b510      	push	{r4, lr}
 8083b06:	4604      	mov	r4, r0
 8083b08:	f7fc fac9 	bl	808009e <_ZdlPv>
 8083b0c:	4620      	mov	r0, r4
 8083b0e:	bd10      	pop	{r4, pc}

08083b10 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8083b10:	b510      	push	{r4, lr}
 8083b12:	4604      	mov	r4, r0
 8083b14:	4608      	mov	r0, r1
 8083b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8083b1a:	60a3      	str	r3, [r4, #8]
 8083b1c:	4b04      	ldr	r3, [pc, #16]	; (8083b30 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 8083b1e:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8083b20:	7420      	strb	r0, [r4, #16]
 8083b22:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8083b24:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 8083b26:	f7fe ff4b 	bl	80829c0 <HAL_I2C_Init>

}
 8083b2a:	4620      	mov	r0, r4
 8083b2c:	bd10      	pop	{r4, pc}
 8083b2e:	bf00      	nop
 8083b30:	08084d80 	.word	0x08084d80

08083b34 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8083b34:	2100      	movs	r1, #0
 8083b36:	7c00      	ldrb	r0, [r0, #16]
 8083b38:	f7fe bf3a 	b.w	80829b0 <HAL_I2C_Is_Enabled>

08083b3c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8083b3c:	b510      	push	{r4, lr}
 8083b3e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8083b40:	480f      	ldr	r0, [pc, #60]	; (8083b80 <pinAvailable+0x44>)
 8083b42:	f7ff f8ec 	bl	8082d1e <_ZN8SPIClass9isEnabledEv>
 8083b46:	b128      	cbz	r0, 8083b54 <pinAvailable+0x18>
 8083b48:	f1a4 030d 	sub.w	r3, r4, #13
 8083b4c:	2b02      	cmp	r3, #2
 8083b4e:	d801      	bhi.n	8083b54 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8083b50:	2000      	movs	r0, #0
 8083b52:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8083b54:	f000 f8b0 	bl	8083cb8 <_Z19__fetch_global_Wirev>
 8083b58:	f7ff ffec 	bl	8083b34 <_ZN7TwoWire9isEnabledEv>
 8083b5c:	b108      	cbz	r0, 8083b62 <pinAvailable+0x26>
 8083b5e:	2c01      	cmp	r4, #1
 8083b60:	d9f6      	bls.n	8083b50 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8083b62:	f7ff ff71 	bl	8083a48 <_Z22__fetch_global_Serial1v>
 8083b66:	f7ff ff6c 	bl	8083a42 <_ZN11USARTSerial9isEnabledEv>
 8083b6a:	b118      	cbz	r0, 8083b74 <pinAvailable+0x38>
 8083b6c:	f1a4 0312 	sub.w	r3, r4, #18
 8083b70:	2b01      	cmp	r3, #1
 8083b72:	d9ed      	bls.n	8083b50 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8083b74:	2c2e      	cmp	r4, #46	; 0x2e
 8083b76:	bf8c      	ite	hi
 8083b78:	2000      	movhi	r0, #0
 8083b7a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8083b7c:	bd10      	pop	{r4, pc}
 8083b7e:	bf00      	nop
 8083b80:	20001190 	.word	0x20001190

08083b84 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8083b84:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 8083b86:	b538      	push	{r3, r4, r5, lr}
 8083b88:	4604      	mov	r4, r0
 8083b8a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8083b8c:	d80a      	bhi.n	8083ba4 <pinMode+0x20>
 8083b8e:	29ff      	cmp	r1, #255	; 0xff
 8083b90:	d008      	beq.n	8083ba4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8083b92:	f7ff ffd3 	bl	8083b3c <pinAvailable>
 8083b96:	b128      	cbz	r0, 8083ba4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8083b98:	4629      	mov	r1, r5
 8083b9a:	4620      	mov	r0, r4
}
 8083b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8083ba0:	f7fe bdd6 	b.w	8082750 <HAL_Pin_Mode>
 8083ba4:	bd38      	pop	{r3, r4, r5, pc}

08083ba6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8083ba6:	b538      	push	{r3, r4, r5, lr}
 8083ba8:	4604      	mov	r4, r0
 8083baa:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8083bac:	f7fe fdd8 	bl	8082760 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8083bb0:	28ff      	cmp	r0, #255	; 0xff
 8083bb2:	d010      	beq.n	8083bd6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8083bb4:	2806      	cmp	r0, #6
 8083bb6:	d804      	bhi.n	8083bc2 <digitalWrite+0x1c>
 8083bb8:	234d      	movs	r3, #77	; 0x4d
 8083bba:	fa23 f000 	lsr.w	r0, r3, r0
 8083bbe:	07c3      	lsls	r3, r0, #31
 8083bc0:	d409      	bmi.n	8083bd6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8083bc2:	4620      	mov	r0, r4
 8083bc4:	f7ff ffba 	bl	8083b3c <pinAvailable>
 8083bc8:	b128      	cbz	r0, 8083bd6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8083bca:	4629      	mov	r1, r5
 8083bcc:	4620      	mov	r0, r4
}
 8083bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 8083bd2:	f7fe bdcd 	b.w	8082770 <HAL_GPIO_Write>
 8083bd6:	bd38      	pop	{r3, r4, r5, pc}

08083bd8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8083bd8:	b510      	push	{r4, lr}
 8083bda:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8083bdc:	f7fe fdc0 	bl	8082760 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 8083be0:	3804      	subs	r0, #4
 8083be2:	b2c0      	uxtb	r0, r0
 8083be4:	2801      	cmp	r0, #1
 8083be6:	d908      	bls.n	8083bfa <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 8083be8:	4620      	mov	r0, r4
 8083bea:	f7ff ffa7 	bl	8083b3c <pinAvailable>
 8083bee:	b120      	cbz	r0, 8083bfa <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8083bf0:	4620      	mov	r0, r4
}
 8083bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8083bf6:	f7fe bdc3 	b.w	8082780 <HAL_GPIO_Read>
}
 8083bfa:	2000      	movs	r0, #0
 8083bfc:	bd10      	pop	{r4, pc}

08083bfe <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 8083bfe:	b510      	push	{r4, lr}
 8083c00:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8083c02:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 8083c04:	bf9c      	itt	ls
 8083c06:	340a      	addls	r4, #10
 8083c08:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8083c0a:	4620      	mov	r0, r4
 8083c0c:	f7ff ff96 	bl	8083b3c <pinAvailable>
 8083c10:	b150      	cbz	r0, 8083c28 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8083c12:	2103      	movs	r1, #3
 8083c14:	4620      	mov	r0, r4
 8083c16:	f7fe fd93 	bl	8082740 <HAL_Validate_Pin_Function>
 8083c1a:	2803      	cmp	r0, #3
 8083c1c:	d104      	bne.n	8083c28 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8083c1e:	4620      	mov	r0, r4
}
 8083c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8083c24:	f7fe bdb4 	b.w	8082790 <HAL_ADC_Read>
}
 8083c28:	2000      	movs	r0, #0
 8083c2a:	bd10      	pop	{r4, pc}

08083c2c <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8083c2c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8083c2e:	4e11      	ldr	r6, [pc, #68]	; (8083c74 <_GLOBAL__sub_I_SPI+0x48>)
 8083c30:	4d11      	ldr	r5, [pc, #68]	; (8083c78 <_GLOBAL__sub_I_SPI+0x4c>)
 8083c32:	4c12      	ldr	r4, [pc, #72]	; (8083c7c <_GLOBAL__sub_I_SPI+0x50>)
 8083c34:	2100      	movs	r1, #0
 8083c36:	4630      	mov	r0, r6
 8083c38:	f7fe ffb6 	bl	8082ba8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8083c3c:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8083c3e:	4e10      	ldr	r6, [pc, #64]	; (8083c80 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8083c40:	462a      	mov	r2, r5
 8083c42:	4621      	mov	r1, r4
 8083c44:	f000 f858 	bl	8083cf8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8083c48:	2101      	movs	r1, #1
 8083c4a:	4630      	mov	r0, r6
 8083c4c:	f7fe ffac 	bl	8082ba8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8083c50:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8083c52:	4e0c      	ldr	r6, [pc, #48]	; (8083c84 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8083c54:	462a      	mov	r2, r5
 8083c56:	4621      	mov	r1, r4
 8083c58:	f000 f84e 	bl	8083cf8 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8083c5c:	2102      	movs	r1, #2
 8083c5e:	4630      	mov	r0, r6
 8083c60:	f7fe ffa2 	bl	8082ba8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8083c64:	462a      	mov	r2, r5
 8083c66:	4621      	mov	r1, r4
 8083c68:	4630      	mov	r0, r6
 8083c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8083c6e:	f000 b843 	b.w	8083cf8 <__aeabi_atexit>
 8083c72:	bf00      	nop
 8083c74:	20001190 	.word	0x20001190
 8083c78:	20000470 	.word	0x20000470
 8083c7c:	08082b99 	.word	0x08082b99
 8083c80:	200011a0 	.word	0x200011a0
 8083c84:	200011b0 	.word	0x200011b0

08083c88 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 8083c88:	b513      	push	{r0, r1, r4, lr}
 8083c8a:	4c08      	ldr	r4, [pc, #32]	; (8083cac <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8083c8c:	2300      	movs	r3, #0
 8083c8e:	461a      	mov	r2, r3
 8083c90:	4619      	mov	r1, r3
 8083c92:	9300      	str	r3, [sp, #0]
 8083c94:	4620      	mov	r0, r4
 8083c96:	f7ff fd9d 	bl	80837d4 <_ZN9IPAddressC1Ehhhh>
 8083c9a:	4620      	mov	r0, r4
 8083c9c:	4a04      	ldr	r2, [pc, #16]	; (8083cb0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8083c9e:	4905      	ldr	r1, [pc, #20]	; (8083cb4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8083ca0:	b002      	add	sp, #8
 8083ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8083ca6:	f000 b827 	b.w	8083cf8 <__aeabi_atexit>
 8083caa:	bf00      	nop
 8083cac:	200011c4 	.word	0x200011c4
 8083cb0:	20000470 	.word	0x20000470
 8083cb4:	0808377d 	.word	0x0808377d

08083cb8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8083cb8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 8083cba:	4d0b      	ldr	r5, [pc, #44]	; (8083ce8 <_Z19__fetch_global_Wirev+0x30>)
 8083cbc:	6829      	ldr	r1, [r5, #0]
 8083cbe:	f011 0401 	ands.w	r4, r1, #1
 8083cc2:	d10f      	bne.n	8083ce4 <_Z19__fetch_global_Wirev+0x2c>
 8083cc4:	4628      	mov	r0, r5
 8083cc6:	f7fc f9ec 	bl	80800a2 <__cxa_guard_acquire>
 8083cca:	b158      	cbz	r0, 8083ce4 <_Z19__fetch_global_Wirev+0x2c>
 8083ccc:	4621      	mov	r1, r4
 8083cce:	4807      	ldr	r0, [pc, #28]	; (8083cec <_Z19__fetch_global_Wirev+0x34>)
 8083cd0:	f7ff ff1e 	bl	8083b10 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8083cd4:	4628      	mov	r0, r5
 8083cd6:	f7fc f9e9 	bl	80800ac <__cxa_guard_release>
 8083cda:	4a05      	ldr	r2, [pc, #20]	; (8083cf0 <_Z19__fetch_global_Wirev+0x38>)
 8083cdc:	4905      	ldr	r1, [pc, #20]	; (8083cf4 <_Z19__fetch_global_Wirev+0x3c>)
 8083cde:	4803      	ldr	r0, [pc, #12]	; (8083cec <_Z19__fetch_global_Wirev+0x34>)
 8083ce0:	f000 f80a 	bl	8083cf8 <__aeabi_atexit>
	return wire;
}
 8083ce4:	4801      	ldr	r0, [pc, #4]	; (8083cec <_Z19__fetch_global_Wirev+0x34>)
 8083ce6:	bd38      	pop	{r3, r4, r5, pc}
 8083ce8:	200011cc 	.word	0x200011cc
 8083cec:	200011d0 	.word	0x200011d0
 8083cf0:	20000470 	.word	0x20000470
 8083cf4:	08083abb 	.word	0x08083abb

08083cf8 <__aeabi_atexit>:
 8083cf8:	460b      	mov	r3, r1
 8083cfa:	4601      	mov	r1, r0
 8083cfc:	4618      	mov	r0, r3
 8083cfe:	f000 bd19 	b.w	8084734 <__cxa_atexit>

08083d02 <_ZSt25__throw_bad_function_callv>:
 8083d02:	b508      	push	{r3, lr}
 8083d04:	f7fe ff38 	bl	8082b78 <abort>

08083d08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8083d08:	4b18      	ldr	r3, [pc, #96]	; (8083d6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8083d0a:	681a      	ldr	r2, [r3, #0]
 8083d0c:	07d1      	lsls	r1, r2, #31
 8083d0e:	bf5c      	itt	pl
 8083d10:	2201      	movpl	r2, #1
 8083d12:	601a      	strpl	r2, [r3, #0]
 8083d14:	4b16      	ldr	r3, [pc, #88]	; (8083d70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8083d16:	681a      	ldr	r2, [r3, #0]
 8083d18:	07d2      	lsls	r2, r2, #31
 8083d1a:	bf5c      	itt	pl
 8083d1c:	2201      	movpl	r2, #1
 8083d1e:	601a      	strpl	r2, [r3, #0]
 8083d20:	4b14      	ldr	r3, [pc, #80]	; (8083d74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8083d22:	681a      	ldr	r2, [r3, #0]
 8083d24:	07d0      	lsls	r0, r2, #31
 8083d26:	bf5c      	itt	pl
 8083d28:	2201      	movpl	r2, #1
 8083d2a:	601a      	strpl	r2, [r3, #0]
 8083d2c:	4b12      	ldr	r3, [pc, #72]	; (8083d78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8083d2e:	681a      	ldr	r2, [r3, #0]
 8083d30:	07d1      	lsls	r1, r2, #31
 8083d32:	bf5c      	itt	pl
 8083d34:	2201      	movpl	r2, #1
 8083d36:	601a      	strpl	r2, [r3, #0]
 8083d38:	4b10      	ldr	r3, [pc, #64]	; (8083d7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8083d3a:	681a      	ldr	r2, [r3, #0]
 8083d3c:	07d2      	lsls	r2, r2, #31
 8083d3e:	bf5c      	itt	pl
 8083d40:	2201      	movpl	r2, #1
 8083d42:	601a      	strpl	r2, [r3, #0]
 8083d44:	4b0e      	ldr	r3, [pc, #56]	; (8083d80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8083d46:	681a      	ldr	r2, [r3, #0]
 8083d48:	07d0      	lsls	r0, r2, #31
 8083d4a:	bf5c      	itt	pl
 8083d4c:	2201      	movpl	r2, #1
 8083d4e:	601a      	strpl	r2, [r3, #0]
 8083d50:	4b0c      	ldr	r3, [pc, #48]	; (8083d84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8083d52:	681a      	ldr	r2, [r3, #0]
 8083d54:	07d1      	lsls	r1, r2, #31
 8083d56:	bf5c      	itt	pl
 8083d58:	2201      	movpl	r2, #1
 8083d5a:	601a      	strpl	r2, [r3, #0]
 8083d5c:	4b0a      	ldr	r3, [pc, #40]	; (8083d88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8083d5e:	681a      	ldr	r2, [r3, #0]
 8083d60:	07d2      	lsls	r2, r2, #31
 8083d62:	bf5c      	itt	pl
 8083d64:	2201      	movpl	r2, #1
 8083d66:	601a      	strpl	r2, [r3, #0]
 8083d68:	4770      	bx	lr
 8083d6a:	bf00      	nop
 8083d6c:	20001200 	.word	0x20001200
 8083d70:	200011fc 	.word	0x200011fc
 8083d74:	200011f8 	.word	0x200011f8
 8083d78:	200011f4 	.word	0x200011f4
 8083d7c:	200011f0 	.word	0x200011f0
 8083d80:	200011ec 	.word	0x200011ec
 8083d84:	200011e8 	.word	0x200011e8
 8083d88:	200011e4 	.word	0x200011e4

08083d8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8083d8c:	4b24      	ldr	r3, [pc, #144]	; (8083e20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8083d8e:	681a      	ldr	r2, [r3, #0]
 8083d90:	07d0      	lsls	r0, r2, #31
 8083d92:	bf5c      	itt	pl
 8083d94:	2201      	movpl	r2, #1
 8083d96:	601a      	strpl	r2, [r3, #0]
 8083d98:	4b22      	ldr	r3, [pc, #136]	; (8083e24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8083d9a:	681a      	ldr	r2, [r3, #0]
 8083d9c:	07d1      	lsls	r1, r2, #31
 8083d9e:	bf5c      	itt	pl
 8083da0:	2201      	movpl	r2, #1
 8083da2:	601a      	strpl	r2, [r3, #0]
 8083da4:	4b20      	ldr	r3, [pc, #128]	; (8083e28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8083da6:	681a      	ldr	r2, [r3, #0]
 8083da8:	07d2      	lsls	r2, r2, #31
 8083daa:	bf5c      	itt	pl
 8083dac:	2201      	movpl	r2, #1
 8083dae:	601a      	strpl	r2, [r3, #0]
 8083db0:	4b1e      	ldr	r3, [pc, #120]	; (8083e2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8083db2:	681a      	ldr	r2, [r3, #0]
 8083db4:	07d0      	lsls	r0, r2, #31
 8083db6:	bf5c      	itt	pl
 8083db8:	2201      	movpl	r2, #1
 8083dba:	601a      	strpl	r2, [r3, #0]
 8083dbc:	4b1c      	ldr	r3, [pc, #112]	; (8083e30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8083dbe:	681a      	ldr	r2, [r3, #0]
 8083dc0:	07d1      	lsls	r1, r2, #31
 8083dc2:	bf5c      	itt	pl
 8083dc4:	2201      	movpl	r2, #1
 8083dc6:	601a      	strpl	r2, [r3, #0]
 8083dc8:	4b1a      	ldr	r3, [pc, #104]	; (8083e34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8083dca:	681a      	ldr	r2, [r3, #0]
 8083dcc:	07d2      	lsls	r2, r2, #31
 8083dce:	bf5c      	itt	pl
 8083dd0:	2201      	movpl	r2, #1
 8083dd2:	601a      	strpl	r2, [r3, #0]
 8083dd4:	4b18      	ldr	r3, [pc, #96]	; (8083e38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8083dd6:	681a      	ldr	r2, [r3, #0]
 8083dd8:	07d0      	lsls	r0, r2, #31
 8083dda:	bf5c      	itt	pl
 8083ddc:	2201      	movpl	r2, #1
 8083dde:	601a      	strpl	r2, [r3, #0]
 8083de0:	4b16      	ldr	r3, [pc, #88]	; (8083e3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8083de2:	681a      	ldr	r2, [r3, #0]
 8083de4:	07d1      	lsls	r1, r2, #31
 8083de6:	bf5c      	itt	pl
 8083de8:	2201      	movpl	r2, #1
 8083dea:	601a      	strpl	r2, [r3, #0]
 8083dec:	4b14      	ldr	r3, [pc, #80]	; (8083e40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8083dee:	681a      	ldr	r2, [r3, #0]
 8083df0:	07d2      	lsls	r2, r2, #31
 8083df2:	bf5c      	itt	pl
 8083df4:	2201      	movpl	r2, #1
 8083df6:	601a      	strpl	r2, [r3, #0]
 8083df8:	4b12      	ldr	r3, [pc, #72]	; (8083e44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8083dfa:	681a      	ldr	r2, [r3, #0]
 8083dfc:	07d0      	lsls	r0, r2, #31
 8083dfe:	bf5c      	itt	pl
 8083e00:	2201      	movpl	r2, #1
 8083e02:	601a      	strpl	r2, [r3, #0]
 8083e04:	4b10      	ldr	r3, [pc, #64]	; (8083e48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8083e06:	681a      	ldr	r2, [r3, #0]
 8083e08:	07d1      	lsls	r1, r2, #31
 8083e0a:	bf5c      	itt	pl
 8083e0c:	2201      	movpl	r2, #1
 8083e0e:	601a      	strpl	r2, [r3, #0]
 8083e10:	4b0e      	ldr	r3, [pc, #56]	; (8083e4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8083e12:	681a      	ldr	r2, [r3, #0]
 8083e14:	07d2      	lsls	r2, r2, #31
 8083e16:	bf5c      	itt	pl
 8083e18:	2201      	movpl	r2, #1
 8083e1a:	601a      	strpl	r2, [r3, #0]
 8083e1c:	4770      	bx	lr
 8083e1e:	bf00      	nop
 8083e20:	20001230 	.word	0x20001230
 8083e24:	2000122c 	.word	0x2000122c
 8083e28:	20001228 	.word	0x20001228
 8083e2c:	20001224 	.word	0x20001224
 8083e30:	20001220 	.word	0x20001220
 8083e34:	2000121c 	.word	0x2000121c
 8083e38:	20001218 	.word	0x20001218
 8083e3c:	20001214 	.word	0x20001214
 8083e40:	20001210 	.word	0x20001210
 8083e44:	2000120c 	.word	0x2000120c
 8083e48:	20001208 	.word	0x20001208
 8083e4c:	20001204 	.word	0x20001204

08083e50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8083e50:	4b24      	ldr	r3, [pc, #144]	; (8083ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8083e52:	681a      	ldr	r2, [r3, #0]
 8083e54:	07d0      	lsls	r0, r2, #31
 8083e56:	bf5c      	itt	pl
 8083e58:	2201      	movpl	r2, #1
 8083e5a:	601a      	strpl	r2, [r3, #0]
 8083e5c:	4b22      	ldr	r3, [pc, #136]	; (8083ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8083e5e:	681a      	ldr	r2, [r3, #0]
 8083e60:	07d1      	lsls	r1, r2, #31
 8083e62:	bf5c      	itt	pl
 8083e64:	2201      	movpl	r2, #1
 8083e66:	601a      	strpl	r2, [r3, #0]
 8083e68:	4b20      	ldr	r3, [pc, #128]	; (8083eec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8083e6a:	681a      	ldr	r2, [r3, #0]
 8083e6c:	07d2      	lsls	r2, r2, #31
 8083e6e:	bf5c      	itt	pl
 8083e70:	2201      	movpl	r2, #1
 8083e72:	601a      	strpl	r2, [r3, #0]
 8083e74:	4b1e      	ldr	r3, [pc, #120]	; (8083ef0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8083e76:	681a      	ldr	r2, [r3, #0]
 8083e78:	07d0      	lsls	r0, r2, #31
 8083e7a:	bf5c      	itt	pl
 8083e7c:	2201      	movpl	r2, #1
 8083e7e:	601a      	strpl	r2, [r3, #0]
 8083e80:	4b1c      	ldr	r3, [pc, #112]	; (8083ef4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8083e82:	681a      	ldr	r2, [r3, #0]
 8083e84:	07d1      	lsls	r1, r2, #31
 8083e86:	bf5c      	itt	pl
 8083e88:	2201      	movpl	r2, #1
 8083e8a:	601a      	strpl	r2, [r3, #0]
 8083e8c:	4b1a      	ldr	r3, [pc, #104]	; (8083ef8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8083e8e:	681a      	ldr	r2, [r3, #0]
 8083e90:	07d2      	lsls	r2, r2, #31
 8083e92:	bf5c      	itt	pl
 8083e94:	2201      	movpl	r2, #1
 8083e96:	601a      	strpl	r2, [r3, #0]
 8083e98:	4b18      	ldr	r3, [pc, #96]	; (8083efc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8083e9a:	681a      	ldr	r2, [r3, #0]
 8083e9c:	07d0      	lsls	r0, r2, #31
 8083e9e:	bf5c      	itt	pl
 8083ea0:	2201      	movpl	r2, #1
 8083ea2:	601a      	strpl	r2, [r3, #0]
 8083ea4:	4b16      	ldr	r3, [pc, #88]	; (8083f00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8083ea6:	681a      	ldr	r2, [r3, #0]
 8083ea8:	07d1      	lsls	r1, r2, #31
 8083eaa:	bf5c      	itt	pl
 8083eac:	2201      	movpl	r2, #1
 8083eae:	601a      	strpl	r2, [r3, #0]
 8083eb0:	4b14      	ldr	r3, [pc, #80]	; (8083f04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8083eb2:	681a      	ldr	r2, [r3, #0]
 8083eb4:	07d2      	lsls	r2, r2, #31
 8083eb6:	bf5c      	itt	pl
 8083eb8:	2201      	movpl	r2, #1
 8083eba:	601a      	strpl	r2, [r3, #0]
 8083ebc:	4b12      	ldr	r3, [pc, #72]	; (8083f08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8083ebe:	681a      	ldr	r2, [r3, #0]
 8083ec0:	07d0      	lsls	r0, r2, #31
 8083ec2:	bf5c      	itt	pl
 8083ec4:	2201      	movpl	r2, #1
 8083ec6:	601a      	strpl	r2, [r3, #0]
 8083ec8:	4b10      	ldr	r3, [pc, #64]	; (8083f0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8083eca:	681a      	ldr	r2, [r3, #0]
 8083ecc:	07d1      	lsls	r1, r2, #31
 8083ece:	bf5c      	itt	pl
 8083ed0:	2201      	movpl	r2, #1
 8083ed2:	601a      	strpl	r2, [r3, #0]
 8083ed4:	4b0e      	ldr	r3, [pc, #56]	; (8083f10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8083ed6:	681a      	ldr	r2, [r3, #0]
 8083ed8:	07d2      	lsls	r2, r2, #31
 8083eda:	bf5c      	itt	pl
 8083edc:	2201      	movpl	r2, #1
 8083ede:	601a      	strpl	r2, [r3, #0]
 8083ee0:	4770      	bx	lr
 8083ee2:	bf00      	nop
 8083ee4:	20001260 	.word	0x20001260
 8083ee8:	2000125c 	.word	0x2000125c
 8083eec:	20001258 	.word	0x20001258
 8083ef0:	20001254 	.word	0x20001254
 8083ef4:	20001250 	.word	0x20001250
 8083ef8:	2000124c 	.word	0x2000124c
 8083efc:	20001248 	.word	0x20001248
 8083f00:	20001244 	.word	0x20001244
 8083f04:	20001240 	.word	0x20001240
 8083f08:	2000123c 	.word	0x2000123c
 8083f0c:	20001238 	.word	0x20001238
 8083f10:	20001234 	.word	0x20001234

08083f14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8083f14:	4b18      	ldr	r3, [pc, #96]	; (8083f78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8083f16:	681a      	ldr	r2, [r3, #0]
 8083f18:	07d1      	lsls	r1, r2, #31
 8083f1a:	bf5c      	itt	pl
 8083f1c:	2201      	movpl	r2, #1
 8083f1e:	601a      	strpl	r2, [r3, #0]
 8083f20:	4b16      	ldr	r3, [pc, #88]	; (8083f7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8083f22:	681a      	ldr	r2, [r3, #0]
 8083f24:	07d2      	lsls	r2, r2, #31
 8083f26:	bf5c      	itt	pl
 8083f28:	2201      	movpl	r2, #1
 8083f2a:	601a      	strpl	r2, [r3, #0]
 8083f2c:	4b14      	ldr	r3, [pc, #80]	; (8083f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8083f2e:	681a      	ldr	r2, [r3, #0]
 8083f30:	07d0      	lsls	r0, r2, #31
 8083f32:	bf5c      	itt	pl
 8083f34:	2201      	movpl	r2, #1
 8083f36:	601a      	strpl	r2, [r3, #0]
 8083f38:	4b12      	ldr	r3, [pc, #72]	; (8083f84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8083f3a:	681a      	ldr	r2, [r3, #0]
 8083f3c:	07d1      	lsls	r1, r2, #31
 8083f3e:	bf5c      	itt	pl
 8083f40:	2201      	movpl	r2, #1
 8083f42:	601a      	strpl	r2, [r3, #0]
 8083f44:	4b10      	ldr	r3, [pc, #64]	; (8083f88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8083f46:	681a      	ldr	r2, [r3, #0]
 8083f48:	07d2      	lsls	r2, r2, #31
 8083f4a:	bf5c      	itt	pl
 8083f4c:	2201      	movpl	r2, #1
 8083f4e:	601a      	strpl	r2, [r3, #0]
 8083f50:	4b0e      	ldr	r3, [pc, #56]	; (8083f8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8083f52:	681a      	ldr	r2, [r3, #0]
 8083f54:	07d0      	lsls	r0, r2, #31
 8083f56:	bf5c      	itt	pl
 8083f58:	2201      	movpl	r2, #1
 8083f5a:	601a      	strpl	r2, [r3, #0]
 8083f5c:	4b0c      	ldr	r3, [pc, #48]	; (8083f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8083f5e:	681a      	ldr	r2, [r3, #0]
 8083f60:	07d1      	lsls	r1, r2, #31
 8083f62:	bf5c      	itt	pl
 8083f64:	2201      	movpl	r2, #1
 8083f66:	601a      	strpl	r2, [r3, #0]
 8083f68:	4b0a      	ldr	r3, [pc, #40]	; (8083f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8083f6a:	681a      	ldr	r2, [r3, #0]
 8083f6c:	07d2      	lsls	r2, r2, #31
 8083f6e:	bf5c      	itt	pl
 8083f70:	2201      	movpl	r2, #1
 8083f72:	601a      	strpl	r2, [r3, #0]
 8083f74:	4770      	bx	lr
 8083f76:	bf00      	nop
 8083f78:	20001280 	.word	0x20001280
 8083f7c:	2000127c 	.word	0x2000127c
 8083f80:	20001278 	.word	0x20001278
 8083f84:	20001274 	.word	0x20001274
 8083f88:	20001270 	.word	0x20001270
 8083f8c:	2000126c 	.word	0x2000126c
 8083f90:	20001268 	.word	0x20001268
 8083f94:	20001264 	.word	0x20001264

08083f98 <__aeabi_drsub>:
 8083f98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8083f9c:	e002      	b.n	8083fa4 <__adddf3>
 8083f9e:	bf00      	nop

08083fa0 <__aeabi_dsub>:
 8083fa0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08083fa4 <__adddf3>:
 8083fa4:	b530      	push	{r4, r5, lr}
 8083fa6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8083faa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8083fae:	ea94 0f05 	teq	r4, r5
 8083fb2:	bf08      	it	eq
 8083fb4:	ea90 0f02 	teqeq	r0, r2
 8083fb8:	bf1f      	itttt	ne
 8083fba:	ea54 0c00 	orrsne.w	ip, r4, r0
 8083fbe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8083fc2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8083fc6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8083fca:	f000 80e2 	beq.w	8084192 <__adddf3+0x1ee>
 8083fce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8083fd2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8083fd6:	bfb8      	it	lt
 8083fd8:	426d      	neglt	r5, r5
 8083fda:	dd0c      	ble.n	8083ff6 <__adddf3+0x52>
 8083fdc:	442c      	add	r4, r5
 8083fde:	ea80 0202 	eor.w	r2, r0, r2
 8083fe2:	ea81 0303 	eor.w	r3, r1, r3
 8083fe6:	ea82 0000 	eor.w	r0, r2, r0
 8083fea:	ea83 0101 	eor.w	r1, r3, r1
 8083fee:	ea80 0202 	eor.w	r2, r0, r2
 8083ff2:	ea81 0303 	eor.w	r3, r1, r3
 8083ff6:	2d36      	cmp	r5, #54	; 0x36
 8083ff8:	bf88      	it	hi
 8083ffa:	bd30      	pophi	{r4, r5, pc}
 8083ffc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8084000:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8084004:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8084008:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 808400c:	d002      	beq.n	8084014 <__adddf3+0x70>
 808400e:	4240      	negs	r0, r0
 8084010:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8084014:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8084018:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808401c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8084020:	d002      	beq.n	8084028 <__adddf3+0x84>
 8084022:	4252      	negs	r2, r2
 8084024:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8084028:	ea94 0f05 	teq	r4, r5
 808402c:	f000 80a7 	beq.w	808417e <__adddf3+0x1da>
 8084030:	f1a4 0401 	sub.w	r4, r4, #1
 8084034:	f1d5 0e20 	rsbs	lr, r5, #32
 8084038:	db0d      	blt.n	8084056 <__adddf3+0xb2>
 808403a:	fa02 fc0e 	lsl.w	ip, r2, lr
 808403e:	fa22 f205 	lsr.w	r2, r2, r5
 8084042:	1880      	adds	r0, r0, r2
 8084044:	f141 0100 	adc.w	r1, r1, #0
 8084048:	fa03 f20e 	lsl.w	r2, r3, lr
 808404c:	1880      	adds	r0, r0, r2
 808404e:	fa43 f305 	asr.w	r3, r3, r5
 8084052:	4159      	adcs	r1, r3
 8084054:	e00e      	b.n	8084074 <__adddf3+0xd0>
 8084056:	f1a5 0520 	sub.w	r5, r5, #32
 808405a:	f10e 0e20 	add.w	lr, lr, #32
 808405e:	2a01      	cmp	r2, #1
 8084060:	fa03 fc0e 	lsl.w	ip, r3, lr
 8084064:	bf28      	it	cs
 8084066:	f04c 0c02 	orrcs.w	ip, ip, #2
 808406a:	fa43 f305 	asr.w	r3, r3, r5
 808406e:	18c0      	adds	r0, r0, r3
 8084070:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8084074:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8084078:	d507      	bpl.n	808408a <__adddf3+0xe6>
 808407a:	f04f 0e00 	mov.w	lr, #0
 808407e:	f1dc 0c00 	rsbs	ip, ip, #0
 8084082:	eb7e 0000 	sbcs.w	r0, lr, r0
 8084086:	eb6e 0101 	sbc.w	r1, lr, r1
 808408a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808408e:	d31b      	bcc.n	80840c8 <__adddf3+0x124>
 8084090:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8084094:	d30c      	bcc.n	80840b0 <__adddf3+0x10c>
 8084096:	0849      	lsrs	r1, r1, #1
 8084098:	ea5f 0030 	movs.w	r0, r0, rrx
 808409c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80840a0:	f104 0401 	add.w	r4, r4, #1
 80840a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80840a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80840ac:	f080 809a 	bcs.w	80841e4 <__adddf3+0x240>
 80840b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80840b4:	bf08      	it	eq
 80840b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80840ba:	f150 0000 	adcs.w	r0, r0, #0
 80840be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80840c2:	ea41 0105 	orr.w	r1, r1, r5
 80840c6:	bd30      	pop	{r4, r5, pc}
 80840c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80840cc:	4140      	adcs	r0, r0
 80840ce:	eb41 0101 	adc.w	r1, r1, r1
 80840d2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80840d6:	f1a4 0401 	sub.w	r4, r4, #1
 80840da:	d1e9      	bne.n	80840b0 <__adddf3+0x10c>
 80840dc:	f091 0f00 	teq	r1, #0
 80840e0:	bf04      	itt	eq
 80840e2:	4601      	moveq	r1, r0
 80840e4:	2000      	moveq	r0, #0
 80840e6:	fab1 f381 	clz	r3, r1
 80840ea:	bf08      	it	eq
 80840ec:	3320      	addeq	r3, #32
 80840ee:	f1a3 030b 	sub.w	r3, r3, #11
 80840f2:	f1b3 0220 	subs.w	r2, r3, #32
 80840f6:	da0c      	bge.n	8084112 <__adddf3+0x16e>
 80840f8:	320c      	adds	r2, #12
 80840fa:	dd08      	ble.n	808410e <__adddf3+0x16a>
 80840fc:	f102 0c14 	add.w	ip, r2, #20
 8084100:	f1c2 020c 	rsb	r2, r2, #12
 8084104:	fa01 f00c 	lsl.w	r0, r1, ip
 8084108:	fa21 f102 	lsr.w	r1, r1, r2
 808410c:	e00c      	b.n	8084128 <__adddf3+0x184>
 808410e:	f102 0214 	add.w	r2, r2, #20
 8084112:	bfd8      	it	le
 8084114:	f1c2 0c20 	rsble	ip, r2, #32
 8084118:	fa01 f102 	lsl.w	r1, r1, r2
 808411c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8084120:	bfdc      	itt	le
 8084122:	ea41 010c 	orrle.w	r1, r1, ip
 8084126:	4090      	lslle	r0, r2
 8084128:	1ae4      	subs	r4, r4, r3
 808412a:	bfa2      	ittt	ge
 808412c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8084130:	4329      	orrge	r1, r5
 8084132:	bd30      	popge	{r4, r5, pc}
 8084134:	ea6f 0404 	mvn.w	r4, r4
 8084138:	3c1f      	subs	r4, #31
 808413a:	da1c      	bge.n	8084176 <__adddf3+0x1d2>
 808413c:	340c      	adds	r4, #12
 808413e:	dc0e      	bgt.n	808415e <__adddf3+0x1ba>
 8084140:	f104 0414 	add.w	r4, r4, #20
 8084144:	f1c4 0220 	rsb	r2, r4, #32
 8084148:	fa20 f004 	lsr.w	r0, r0, r4
 808414c:	fa01 f302 	lsl.w	r3, r1, r2
 8084150:	ea40 0003 	orr.w	r0, r0, r3
 8084154:	fa21 f304 	lsr.w	r3, r1, r4
 8084158:	ea45 0103 	orr.w	r1, r5, r3
 808415c:	bd30      	pop	{r4, r5, pc}
 808415e:	f1c4 040c 	rsb	r4, r4, #12
 8084162:	f1c4 0220 	rsb	r2, r4, #32
 8084166:	fa20 f002 	lsr.w	r0, r0, r2
 808416a:	fa01 f304 	lsl.w	r3, r1, r4
 808416e:	ea40 0003 	orr.w	r0, r0, r3
 8084172:	4629      	mov	r1, r5
 8084174:	bd30      	pop	{r4, r5, pc}
 8084176:	fa21 f004 	lsr.w	r0, r1, r4
 808417a:	4629      	mov	r1, r5
 808417c:	bd30      	pop	{r4, r5, pc}
 808417e:	f094 0f00 	teq	r4, #0
 8084182:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8084186:	bf06      	itte	eq
 8084188:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 808418c:	3401      	addeq	r4, #1
 808418e:	3d01      	subne	r5, #1
 8084190:	e74e      	b.n	8084030 <__adddf3+0x8c>
 8084192:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8084196:	bf18      	it	ne
 8084198:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808419c:	d029      	beq.n	80841f2 <__adddf3+0x24e>
 808419e:	ea94 0f05 	teq	r4, r5
 80841a2:	bf08      	it	eq
 80841a4:	ea90 0f02 	teqeq	r0, r2
 80841a8:	d005      	beq.n	80841b6 <__adddf3+0x212>
 80841aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80841ae:	bf04      	itt	eq
 80841b0:	4619      	moveq	r1, r3
 80841b2:	4610      	moveq	r0, r2
 80841b4:	bd30      	pop	{r4, r5, pc}
 80841b6:	ea91 0f03 	teq	r1, r3
 80841ba:	bf1e      	ittt	ne
 80841bc:	2100      	movne	r1, #0
 80841be:	2000      	movne	r0, #0
 80841c0:	bd30      	popne	{r4, r5, pc}
 80841c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80841c6:	d105      	bne.n	80841d4 <__adddf3+0x230>
 80841c8:	0040      	lsls	r0, r0, #1
 80841ca:	4149      	adcs	r1, r1
 80841cc:	bf28      	it	cs
 80841ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80841d2:	bd30      	pop	{r4, r5, pc}
 80841d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80841d8:	bf3c      	itt	cc
 80841da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80841de:	bd30      	popcc	{r4, r5, pc}
 80841e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80841e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80841e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80841ec:	f04f 0000 	mov.w	r0, #0
 80841f0:	bd30      	pop	{r4, r5, pc}
 80841f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80841f6:	bf1a      	itte	ne
 80841f8:	4619      	movne	r1, r3
 80841fa:	4610      	movne	r0, r2
 80841fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8084200:	bf1c      	itt	ne
 8084202:	460b      	movne	r3, r1
 8084204:	4602      	movne	r2, r0
 8084206:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808420a:	bf06      	itte	eq
 808420c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8084210:	ea91 0f03 	teqeq	r1, r3
 8084214:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8084218:	bd30      	pop	{r4, r5, pc}
 808421a:	bf00      	nop

0808421c <__aeabi_ui2d>:
 808421c:	f090 0f00 	teq	r0, #0
 8084220:	bf04      	itt	eq
 8084222:	2100      	moveq	r1, #0
 8084224:	4770      	bxeq	lr
 8084226:	b530      	push	{r4, r5, lr}
 8084228:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808422c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8084230:	f04f 0500 	mov.w	r5, #0
 8084234:	f04f 0100 	mov.w	r1, #0
 8084238:	e750      	b.n	80840dc <__adddf3+0x138>
 808423a:	bf00      	nop

0808423c <__aeabi_i2d>:
 808423c:	f090 0f00 	teq	r0, #0
 8084240:	bf04      	itt	eq
 8084242:	2100      	moveq	r1, #0
 8084244:	4770      	bxeq	lr
 8084246:	b530      	push	{r4, r5, lr}
 8084248:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808424c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8084250:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8084254:	bf48      	it	mi
 8084256:	4240      	negmi	r0, r0
 8084258:	f04f 0100 	mov.w	r1, #0
 808425c:	e73e      	b.n	80840dc <__adddf3+0x138>
 808425e:	bf00      	nop

08084260 <__aeabi_f2d>:
 8084260:	0042      	lsls	r2, r0, #1
 8084262:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8084266:	ea4f 0131 	mov.w	r1, r1, rrx
 808426a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808426e:	bf1f      	itttt	ne
 8084270:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8084274:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8084278:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 808427c:	4770      	bxne	lr
 808427e:	f092 0f00 	teq	r2, #0
 8084282:	bf14      	ite	ne
 8084284:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8084288:	4770      	bxeq	lr
 808428a:	b530      	push	{r4, r5, lr}
 808428c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8084290:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8084294:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8084298:	e720      	b.n	80840dc <__adddf3+0x138>
 808429a:	bf00      	nop

0808429c <__aeabi_ul2d>:
 808429c:	ea50 0201 	orrs.w	r2, r0, r1
 80842a0:	bf08      	it	eq
 80842a2:	4770      	bxeq	lr
 80842a4:	b530      	push	{r4, r5, lr}
 80842a6:	f04f 0500 	mov.w	r5, #0
 80842aa:	e00a      	b.n	80842c2 <__aeabi_l2d+0x16>

080842ac <__aeabi_l2d>:
 80842ac:	ea50 0201 	orrs.w	r2, r0, r1
 80842b0:	bf08      	it	eq
 80842b2:	4770      	bxeq	lr
 80842b4:	b530      	push	{r4, r5, lr}
 80842b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80842ba:	d502      	bpl.n	80842c2 <__aeabi_l2d+0x16>
 80842bc:	4240      	negs	r0, r0
 80842be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80842c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80842c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80842ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80842ce:	f43f aedc 	beq.w	808408a <__adddf3+0xe6>
 80842d2:	f04f 0203 	mov.w	r2, #3
 80842d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80842da:	bf18      	it	ne
 80842dc:	3203      	addne	r2, #3
 80842de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80842e2:	bf18      	it	ne
 80842e4:	3203      	addne	r2, #3
 80842e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80842ea:	f1c2 0320 	rsb	r3, r2, #32
 80842ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80842f2:	fa20 f002 	lsr.w	r0, r0, r2
 80842f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80842fa:	ea40 000e 	orr.w	r0, r0, lr
 80842fe:	fa21 f102 	lsr.w	r1, r1, r2
 8084302:	4414      	add	r4, r2
 8084304:	e6c1      	b.n	808408a <__adddf3+0xe6>
 8084306:	bf00      	nop

08084308 <__aeabi_dmul>:
 8084308:	b570      	push	{r4, r5, r6, lr}
 808430a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808430e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8084312:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8084316:	bf1d      	ittte	ne
 8084318:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808431c:	ea94 0f0c 	teqne	r4, ip
 8084320:	ea95 0f0c 	teqne	r5, ip
 8084324:	f000 f8de 	bleq	80844e4 <__aeabi_dmul+0x1dc>
 8084328:	442c      	add	r4, r5
 808432a:	ea81 0603 	eor.w	r6, r1, r3
 808432e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8084332:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8084336:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808433a:	bf18      	it	ne
 808433c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8084340:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8084344:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8084348:	d038      	beq.n	80843bc <__aeabi_dmul+0xb4>
 808434a:	fba0 ce02 	umull	ip, lr, r0, r2
 808434e:	f04f 0500 	mov.w	r5, #0
 8084352:	fbe1 e502 	umlal	lr, r5, r1, r2
 8084356:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808435a:	fbe0 e503 	umlal	lr, r5, r0, r3
 808435e:	f04f 0600 	mov.w	r6, #0
 8084362:	fbe1 5603 	umlal	r5, r6, r1, r3
 8084366:	f09c 0f00 	teq	ip, #0
 808436a:	bf18      	it	ne
 808436c:	f04e 0e01 	orrne.w	lr, lr, #1
 8084370:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8084374:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8084378:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 808437c:	d204      	bcs.n	8084388 <__aeabi_dmul+0x80>
 808437e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8084382:	416d      	adcs	r5, r5
 8084384:	eb46 0606 	adc.w	r6, r6, r6
 8084388:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 808438c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8084390:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8084394:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8084398:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 808439c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80843a0:	bf88      	it	hi
 80843a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80843a6:	d81e      	bhi.n	80843e6 <__aeabi_dmul+0xde>
 80843a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80843ac:	bf08      	it	eq
 80843ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80843b2:	f150 0000 	adcs.w	r0, r0, #0
 80843b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80843ba:	bd70      	pop	{r4, r5, r6, pc}
 80843bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80843c0:	ea46 0101 	orr.w	r1, r6, r1
 80843c4:	ea40 0002 	orr.w	r0, r0, r2
 80843c8:	ea81 0103 	eor.w	r1, r1, r3
 80843cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80843d0:	bfc2      	ittt	gt
 80843d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80843d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80843da:	bd70      	popgt	{r4, r5, r6, pc}
 80843dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80843e0:	f04f 0e00 	mov.w	lr, #0
 80843e4:	3c01      	subs	r4, #1
 80843e6:	f300 80ab 	bgt.w	8084540 <__aeabi_dmul+0x238>
 80843ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80843ee:	bfde      	ittt	le
 80843f0:	2000      	movle	r0, #0
 80843f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80843f6:	bd70      	pople	{r4, r5, r6, pc}
 80843f8:	f1c4 0400 	rsb	r4, r4, #0
 80843fc:	3c20      	subs	r4, #32
 80843fe:	da35      	bge.n	808446c <__aeabi_dmul+0x164>
 8084400:	340c      	adds	r4, #12
 8084402:	dc1b      	bgt.n	808443c <__aeabi_dmul+0x134>
 8084404:	f104 0414 	add.w	r4, r4, #20
 8084408:	f1c4 0520 	rsb	r5, r4, #32
 808440c:	fa00 f305 	lsl.w	r3, r0, r5
 8084410:	fa20 f004 	lsr.w	r0, r0, r4
 8084414:	fa01 f205 	lsl.w	r2, r1, r5
 8084418:	ea40 0002 	orr.w	r0, r0, r2
 808441c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8084420:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8084424:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8084428:	fa21 f604 	lsr.w	r6, r1, r4
 808442c:	eb42 0106 	adc.w	r1, r2, r6
 8084430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8084434:	bf08      	it	eq
 8084436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808443a:	bd70      	pop	{r4, r5, r6, pc}
 808443c:	f1c4 040c 	rsb	r4, r4, #12
 8084440:	f1c4 0520 	rsb	r5, r4, #32
 8084444:	fa00 f304 	lsl.w	r3, r0, r4
 8084448:	fa20 f005 	lsr.w	r0, r0, r5
 808444c:	fa01 f204 	lsl.w	r2, r1, r4
 8084450:	ea40 0002 	orr.w	r0, r0, r2
 8084454:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8084458:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808445c:	f141 0100 	adc.w	r1, r1, #0
 8084460:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8084464:	bf08      	it	eq
 8084466:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808446a:	bd70      	pop	{r4, r5, r6, pc}
 808446c:	f1c4 0520 	rsb	r5, r4, #32
 8084470:	fa00 f205 	lsl.w	r2, r0, r5
 8084474:	ea4e 0e02 	orr.w	lr, lr, r2
 8084478:	fa20 f304 	lsr.w	r3, r0, r4
 808447c:	fa01 f205 	lsl.w	r2, r1, r5
 8084480:	ea43 0302 	orr.w	r3, r3, r2
 8084484:	fa21 f004 	lsr.w	r0, r1, r4
 8084488:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808448c:	fa21 f204 	lsr.w	r2, r1, r4
 8084490:	ea20 0002 	bic.w	r0, r0, r2
 8084494:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8084498:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808449c:	bf08      	it	eq
 808449e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80844a2:	bd70      	pop	{r4, r5, r6, pc}
 80844a4:	f094 0f00 	teq	r4, #0
 80844a8:	d10f      	bne.n	80844ca <__aeabi_dmul+0x1c2>
 80844aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80844ae:	0040      	lsls	r0, r0, #1
 80844b0:	eb41 0101 	adc.w	r1, r1, r1
 80844b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80844b8:	bf08      	it	eq
 80844ba:	3c01      	subeq	r4, #1
 80844bc:	d0f7      	beq.n	80844ae <__aeabi_dmul+0x1a6>
 80844be:	ea41 0106 	orr.w	r1, r1, r6
 80844c2:	f095 0f00 	teq	r5, #0
 80844c6:	bf18      	it	ne
 80844c8:	4770      	bxne	lr
 80844ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80844ce:	0052      	lsls	r2, r2, #1
 80844d0:	eb43 0303 	adc.w	r3, r3, r3
 80844d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80844d8:	bf08      	it	eq
 80844da:	3d01      	subeq	r5, #1
 80844dc:	d0f7      	beq.n	80844ce <__aeabi_dmul+0x1c6>
 80844de:	ea43 0306 	orr.w	r3, r3, r6
 80844e2:	4770      	bx	lr
 80844e4:	ea94 0f0c 	teq	r4, ip
 80844e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80844ec:	bf18      	it	ne
 80844ee:	ea95 0f0c 	teqne	r5, ip
 80844f2:	d00c      	beq.n	808450e <__aeabi_dmul+0x206>
 80844f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80844f8:	bf18      	it	ne
 80844fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80844fe:	d1d1      	bne.n	80844a4 <__aeabi_dmul+0x19c>
 8084500:	ea81 0103 	eor.w	r1, r1, r3
 8084504:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8084508:	f04f 0000 	mov.w	r0, #0
 808450c:	bd70      	pop	{r4, r5, r6, pc}
 808450e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8084512:	bf06      	itte	eq
 8084514:	4610      	moveq	r0, r2
 8084516:	4619      	moveq	r1, r3
 8084518:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808451c:	d019      	beq.n	8084552 <__aeabi_dmul+0x24a>
 808451e:	ea94 0f0c 	teq	r4, ip
 8084522:	d102      	bne.n	808452a <__aeabi_dmul+0x222>
 8084524:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8084528:	d113      	bne.n	8084552 <__aeabi_dmul+0x24a>
 808452a:	ea95 0f0c 	teq	r5, ip
 808452e:	d105      	bne.n	808453c <__aeabi_dmul+0x234>
 8084530:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8084534:	bf1c      	itt	ne
 8084536:	4610      	movne	r0, r2
 8084538:	4619      	movne	r1, r3
 808453a:	d10a      	bne.n	8084552 <__aeabi_dmul+0x24a>
 808453c:	ea81 0103 	eor.w	r1, r1, r3
 8084540:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8084544:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8084548:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808454c:	f04f 0000 	mov.w	r0, #0
 8084550:	bd70      	pop	{r4, r5, r6, pc}
 8084552:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8084556:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808455a:	bd70      	pop	{r4, r5, r6, pc}

0808455c <__aeabi_ddiv>:
 808455c:	b570      	push	{r4, r5, r6, lr}
 808455e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084562:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8084566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808456a:	bf1d      	ittte	ne
 808456c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8084570:	ea94 0f0c 	teqne	r4, ip
 8084574:	ea95 0f0c 	teqne	r5, ip
 8084578:	f000 f8a7 	bleq	80846ca <__aeabi_ddiv+0x16e>
 808457c:	eba4 0405 	sub.w	r4, r4, r5
 8084580:	ea81 0e03 	eor.w	lr, r1, r3
 8084584:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8084588:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808458c:	f000 8088 	beq.w	80846a0 <__aeabi_ddiv+0x144>
 8084590:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8084594:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8084598:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808459c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80845a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80845a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80845a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80845ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80845b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80845b4:	429d      	cmp	r5, r3
 80845b6:	bf08      	it	eq
 80845b8:	4296      	cmpeq	r6, r2
 80845ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80845be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80845c2:	d202      	bcs.n	80845ca <__aeabi_ddiv+0x6e>
 80845c4:	085b      	lsrs	r3, r3, #1
 80845c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80845ca:	1ab6      	subs	r6, r6, r2
 80845cc:	eb65 0503 	sbc.w	r5, r5, r3
 80845d0:	085b      	lsrs	r3, r3, #1
 80845d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80845d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80845da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80845de:	ebb6 0e02 	subs.w	lr, r6, r2
 80845e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80845e6:	bf22      	ittt	cs
 80845e8:	1ab6      	subcs	r6, r6, r2
 80845ea:	4675      	movcs	r5, lr
 80845ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80845f0:	085b      	lsrs	r3, r3, #1
 80845f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80845f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80845fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80845fe:	bf22      	ittt	cs
 8084600:	1ab6      	subcs	r6, r6, r2
 8084602:	4675      	movcs	r5, lr
 8084604:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8084608:	085b      	lsrs	r3, r3, #1
 808460a:	ea4f 0232 	mov.w	r2, r2, rrx
 808460e:	ebb6 0e02 	subs.w	lr, r6, r2
 8084612:	eb75 0e03 	sbcs.w	lr, r5, r3
 8084616:	bf22      	ittt	cs
 8084618:	1ab6      	subcs	r6, r6, r2
 808461a:	4675      	movcs	r5, lr
 808461c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8084620:	085b      	lsrs	r3, r3, #1
 8084622:	ea4f 0232 	mov.w	r2, r2, rrx
 8084626:	ebb6 0e02 	subs.w	lr, r6, r2
 808462a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808462e:	bf22      	ittt	cs
 8084630:	1ab6      	subcs	r6, r6, r2
 8084632:	4675      	movcs	r5, lr
 8084634:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8084638:	ea55 0e06 	orrs.w	lr, r5, r6
 808463c:	d018      	beq.n	8084670 <__aeabi_ddiv+0x114>
 808463e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8084642:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8084646:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808464a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808464e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8084652:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8084656:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808465a:	d1c0      	bne.n	80845de <__aeabi_ddiv+0x82>
 808465c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8084660:	d10b      	bne.n	808467a <__aeabi_ddiv+0x11e>
 8084662:	ea41 0100 	orr.w	r1, r1, r0
 8084666:	f04f 0000 	mov.w	r0, #0
 808466a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808466e:	e7b6      	b.n	80845de <__aeabi_ddiv+0x82>
 8084670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8084674:	bf04      	itt	eq
 8084676:	4301      	orreq	r1, r0
 8084678:	2000      	moveq	r0, #0
 808467a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808467e:	bf88      	it	hi
 8084680:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8084684:	f63f aeaf 	bhi.w	80843e6 <__aeabi_dmul+0xde>
 8084688:	ebb5 0c03 	subs.w	ip, r5, r3
 808468c:	bf04      	itt	eq
 808468e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8084692:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8084696:	f150 0000 	adcs.w	r0, r0, #0
 808469a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808469e:	bd70      	pop	{r4, r5, r6, pc}
 80846a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80846a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80846a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80846ac:	bfc2      	ittt	gt
 80846ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80846b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80846b6:	bd70      	popgt	{r4, r5, r6, pc}
 80846b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80846bc:	f04f 0e00 	mov.w	lr, #0
 80846c0:	3c01      	subs	r4, #1
 80846c2:	e690      	b.n	80843e6 <__aeabi_dmul+0xde>
 80846c4:	ea45 0e06 	orr.w	lr, r5, r6
 80846c8:	e68d      	b.n	80843e6 <__aeabi_dmul+0xde>
 80846ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80846ce:	ea94 0f0c 	teq	r4, ip
 80846d2:	bf08      	it	eq
 80846d4:	ea95 0f0c 	teqeq	r5, ip
 80846d8:	f43f af3b 	beq.w	8084552 <__aeabi_dmul+0x24a>
 80846dc:	ea94 0f0c 	teq	r4, ip
 80846e0:	d10a      	bne.n	80846f8 <__aeabi_ddiv+0x19c>
 80846e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80846e6:	f47f af34 	bne.w	8084552 <__aeabi_dmul+0x24a>
 80846ea:	ea95 0f0c 	teq	r5, ip
 80846ee:	f47f af25 	bne.w	808453c <__aeabi_dmul+0x234>
 80846f2:	4610      	mov	r0, r2
 80846f4:	4619      	mov	r1, r3
 80846f6:	e72c      	b.n	8084552 <__aeabi_dmul+0x24a>
 80846f8:	ea95 0f0c 	teq	r5, ip
 80846fc:	d106      	bne.n	808470c <__aeabi_ddiv+0x1b0>
 80846fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8084702:	f43f aefd 	beq.w	8084500 <__aeabi_dmul+0x1f8>
 8084706:	4610      	mov	r0, r2
 8084708:	4619      	mov	r1, r3
 808470a:	e722      	b.n	8084552 <__aeabi_dmul+0x24a>
 808470c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8084710:	bf18      	it	ne
 8084712:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8084716:	f47f aec5 	bne.w	80844a4 <__aeabi_dmul+0x19c>
 808471a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808471e:	f47f af0d 	bne.w	808453c <__aeabi_dmul+0x234>
 8084722:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8084726:	f47f aeeb 	bne.w	8084500 <__aeabi_dmul+0x1f8>
 808472a:	e712      	b.n	8084552 <__aeabi_dmul+0x24a>

0808472c <atol>:
 808472c:	220a      	movs	r2, #10
 808472e:	2100      	movs	r1, #0
 8084730:	f000 b926 	b.w	8084980 <strtol>

08084734 <__cxa_atexit>:
 8084734:	b510      	push	{r4, lr}
 8084736:	4c05      	ldr	r4, [pc, #20]	; (808474c <__cxa_atexit+0x18>)
 8084738:	4613      	mov	r3, r2
 808473a:	b12c      	cbz	r4, 8084748 <__cxa_atexit+0x14>
 808473c:	460a      	mov	r2, r1
 808473e:	4601      	mov	r1, r0
 8084740:	2002      	movs	r0, #2
 8084742:	f3af 8000 	nop.w
 8084746:	bd10      	pop	{r4, pc}
 8084748:	4620      	mov	r0, r4
 808474a:	bd10      	pop	{r4, pc}
 808474c:	00000000 	.word	0x00000000

08084750 <memcmp>:
 8084750:	b510      	push	{r4, lr}
 8084752:	3901      	subs	r1, #1
 8084754:	4402      	add	r2, r0
 8084756:	4290      	cmp	r0, r2
 8084758:	d007      	beq.n	808476a <memcmp+0x1a>
 808475a:	f810 3b01 	ldrb.w	r3, [r0], #1
 808475e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8084762:	42a3      	cmp	r3, r4
 8084764:	d0f7      	beq.n	8084756 <memcmp+0x6>
 8084766:	1b18      	subs	r0, r3, r4
 8084768:	bd10      	pop	{r4, pc}
 808476a:	2000      	movs	r0, #0
 808476c:	bd10      	pop	{r4, pc}

0808476e <memcpy>:
 808476e:	b510      	push	{r4, lr}
 8084770:	1e43      	subs	r3, r0, #1
 8084772:	440a      	add	r2, r1
 8084774:	4291      	cmp	r1, r2
 8084776:	d004      	beq.n	8084782 <memcpy+0x14>
 8084778:	f811 4b01 	ldrb.w	r4, [r1], #1
 808477c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8084780:	e7f8      	b.n	8084774 <memcpy+0x6>
 8084782:	bd10      	pop	{r4, pc}

08084784 <memset>:
 8084784:	4603      	mov	r3, r0
 8084786:	4402      	add	r2, r0
 8084788:	4293      	cmp	r3, r2
 808478a:	d002      	beq.n	8084792 <memset+0xe>
 808478c:	f803 1b01 	strb.w	r1, [r3], #1
 8084790:	e7fa      	b.n	8084788 <memset+0x4>
 8084792:	4770      	bx	lr

08084794 <srand>:
 8084794:	b538      	push	{r3, r4, r5, lr}
 8084796:	4b12      	ldr	r3, [pc, #72]	; (80847e0 <srand+0x4c>)
 8084798:	4605      	mov	r5, r0
 808479a:	681c      	ldr	r4, [r3, #0]
 808479c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808479e:	b9d3      	cbnz	r3, 80847d6 <srand+0x42>
 80847a0:	2018      	movs	r0, #24
 80847a2:	f7fe f9b9 	bl	8082b18 <malloc>
 80847a6:	f243 330e 	movw	r3, #13070	; 0x330e
 80847aa:	63a0      	str	r0, [r4, #56]	; 0x38
 80847ac:	8003      	strh	r3, [r0, #0]
 80847ae:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80847b2:	8043      	strh	r3, [r0, #2]
 80847b4:	f241 2334 	movw	r3, #4660	; 0x1234
 80847b8:	8083      	strh	r3, [r0, #4]
 80847ba:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80847be:	80c3      	strh	r3, [r0, #6]
 80847c0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80847c4:	8103      	strh	r3, [r0, #8]
 80847c6:	2305      	movs	r3, #5
 80847c8:	8143      	strh	r3, [r0, #10]
 80847ca:	230b      	movs	r3, #11
 80847cc:	8183      	strh	r3, [r0, #12]
 80847ce:	2201      	movs	r2, #1
 80847d0:	2300      	movs	r3, #0
 80847d2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80847d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80847d8:	2200      	movs	r2, #0
 80847da:	611d      	str	r5, [r3, #16]
 80847dc:	615a      	str	r2, [r3, #20]
 80847de:	bd38      	pop	{r3, r4, r5, pc}
 80847e0:	2000046c 	.word	0x2000046c

080847e4 <strcmp>:
 80847e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80847e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80847ec:	2a01      	cmp	r2, #1
 80847ee:	bf28      	it	cs
 80847f0:	429a      	cmpcs	r2, r3
 80847f2:	d0f7      	beq.n	80847e4 <strcmp>
 80847f4:	1ad0      	subs	r0, r2, r3
 80847f6:	4770      	bx	lr

080847f8 <strcpy>:
 80847f8:	4603      	mov	r3, r0
 80847fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80847fe:	f803 2b01 	strb.w	r2, [r3], #1
 8084802:	2a00      	cmp	r2, #0
 8084804:	d1f9      	bne.n	80847fa <strcpy+0x2>
 8084806:	4770      	bx	lr

08084808 <strdup>:
 8084808:	4b02      	ldr	r3, [pc, #8]	; (8084814 <strdup+0xc>)
 808480a:	4601      	mov	r1, r0
 808480c:	6818      	ldr	r0, [r3, #0]
 808480e:	f000 b803 	b.w	8084818 <_strdup_r>
 8084812:	bf00      	nop
 8084814:	2000046c 	.word	0x2000046c

08084818 <_strdup_r>:
 8084818:	b570      	push	{r4, r5, r6, lr}
 808481a:	4606      	mov	r6, r0
 808481c:	4608      	mov	r0, r1
 808481e:	460c      	mov	r4, r1
 8084820:	f000 f80d 	bl	808483e <strlen>
 8084824:	1c45      	adds	r5, r0, #1
 8084826:	4629      	mov	r1, r5
 8084828:	4630      	mov	r0, r6
 808482a:	f7fe f9ad 	bl	8082b88 <_malloc_r>
 808482e:	4606      	mov	r6, r0
 8084830:	b118      	cbz	r0, 808483a <_strdup_r+0x22>
 8084832:	462a      	mov	r2, r5
 8084834:	4621      	mov	r1, r4
 8084836:	f7ff ff9a 	bl	808476e <memcpy>
 808483a:	4630      	mov	r0, r6
 808483c:	bd70      	pop	{r4, r5, r6, pc}

0808483e <strlen>:
 808483e:	4603      	mov	r3, r0
 8084840:	f813 2b01 	ldrb.w	r2, [r3], #1
 8084844:	2a00      	cmp	r2, #0
 8084846:	d1fb      	bne.n	8084840 <strlen+0x2>
 8084848:	1a18      	subs	r0, r3, r0
 808484a:	3801      	subs	r0, #1
 808484c:	4770      	bx	lr

0808484e <strncpy>:
 808484e:	4603      	mov	r3, r0
 8084850:	b510      	push	{r4, lr}
 8084852:	b142      	cbz	r2, 8084866 <strncpy+0x18>
 8084854:	f811 4b01 	ldrb.w	r4, [r1], #1
 8084858:	3a01      	subs	r2, #1
 808485a:	f803 4b01 	strb.w	r4, [r3], #1
 808485e:	2c00      	cmp	r4, #0
 8084860:	d1f7      	bne.n	8084852 <strncpy+0x4>
 8084862:	441a      	add	r2, r3
 8084864:	e000      	b.n	8084868 <strncpy+0x1a>
 8084866:	bd10      	pop	{r4, pc}
 8084868:	4293      	cmp	r3, r2
 808486a:	d002      	beq.n	8084872 <strncpy+0x24>
 808486c:	f803 4b01 	strb.w	r4, [r3], #1
 8084870:	e7fa      	b.n	8084868 <strncpy+0x1a>
 8084872:	bd10      	pop	{r4, pc}

08084874 <_strtol_r>:
 8084874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8084878:	460f      	mov	r7, r1
 808487a:	4680      	mov	r8, r0
 808487c:	483f      	ldr	r0, [pc, #252]	; (808497c <_strtol_r+0x108>)
 808487e:	f8d0 9000 	ldr.w	r9, [r0]
 8084882:	463d      	mov	r5, r7
 8084884:	f815 4b01 	ldrb.w	r4, [r5], #1
 8084888:	eb09 0004 	add.w	r0, r9, r4
 808488c:	7840      	ldrb	r0, [r0, #1]
 808488e:	f000 0008 	and.w	r0, r0, #8
 8084892:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8084896:	b108      	cbz	r0, 808489c <_strtol_r+0x28>
 8084898:	462f      	mov	r7, r5
 808489a:	e7f2      	b.n	8084882 <_strtol_r+0xe>
 808489c:	2c2d      	cmp	r4, #45	; 0x2d
 808489e:	d103      	bne.n	80848a8 <_strtol_r+0x34>
 80848a0:	1cbd      	adds	r5, r7, #2
 80848a2:	787c      	ldrb	r4, [r7, #1]
 80848a4:	2601      	movs	r6, #1
 80848a6:	e003      	b.n	80848b0 <_strtol_r+0x3c>
 80848a8:	2c2b      	cmp	r4, #43	; 0x2b
 80848aa:	bf04      	itt	eq
 80848ac:	787c      	ldrbeq	r4, [r7, #1]
 80848ae:	1cbd      	addeq	r5, r7, #2
 80848b0:	b113      	cbz	r3, 80848b8 <_strtol_r+0x44>
 80848b2:	2b10      	cmp	r3, #16
 80848b4:	d10a      	bne.n	80848cc <_strtol_r+0x58>
 80848b6:	e05b      	b.n	8084970 <_strtol_r+0xfc>
 80848b8:	2c30      	cmp	r4, #48	; 0x30
 80848ba:	d157      	bne.n	808496c <_strtol_r+0xf8>
 80848bc:	7828      	ldrb	r0, [r5, #0]
 80848be:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80848c2:	2858      	cmp	r0, #88	; 0x58
 80848c4:	d14d      	bne.n	8084962 <_strtol_r+0xee>
 80848c6:	786c      	ldrb	r4, [r5, #1]
 80848c8:	2310      	movs	r3, #16
 80848ca:	3502      	adds	r5, #2
 80848cc:	2e00      	cmp	r6, #0
 80848ce:	bf14      	ite	ne
 80848d0:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80848d4:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80848d8:	fbbc faf3 	udiv	sl, ip, r3
 80848dc:	2700      	movs	r7, #0
 80848de:	4638      	mov	r0, r7
 80848e0:	fb03 cc1a 	mls	ip, r3, sl, ip
 80848e4:	eb09 0e04 	add.w	lr, r9, r4
 80848e8:	f89e e001 	ldrb.w	lr, [lr, #1]
 80848ec:	f01e 0f04 	tst.w	lr, #4
 80848f0:	d001      	beq.n	80848f6 <_strtol_r+0x82>
 80848f2:	3c30      	subs	r4, #48	; 0x30
 80848f4:	e00b      	b.n	808490e <_strtol_r+0x9a>
 80848f6:	f01e 0e03 	ands.w	lr, lr, #3
 80848fa:	d01b      	beq.n	8084934 <_strtol_r+0xc0>
 80848fc:	f1be 0f01 	cmp.w	lr, #1
 8084900:	bf0c      	ite	eq
 8084902:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8084906:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808490a:	ebce 0404 	rsb	r4, lr, r4
 808490e:	42a3      	cmp	r3, r4
 8084910:	dd10      	ble.n	8084934 <_strtol_r+0xc0>
 8084912:	f1b7 3fff 	cmp.w	r7, #4294967295
 8084916:	d00a      	beq.n	808492e <_strtol_r+0xba>
 8084918:	4550      	cmp	r0, sl
 808491a:	d806      	bhi.n	808492a <_strtol_r+0xb6>
 808491c:	d101      	bne.n	8084922 <_strtol_r+0xae>
 808491e:	4564      	cmp	r4, ip
 8084920:	dc03      	bgt.n	808492a <_strtol_r+0xb6>
 8084922:	fb03 4000 	mla	r0, r3, r0, r4
 8084926:	2701      	movs	r7, #1
 8084928:	e001      	b.n	808492e <_strtol_r+0xba>
 808492a:	f04f 37ff 	mov.w	r7, #4294967295
 808492e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8084932:	e7d7      	b.n	80848e4 <_strtol_r+0x70>
 8084934:	1c7b      	adds	r3, r7, #1
 8084936:	d10c      	bne.n	8084952 <_strtol_r+0xde>
 8084938:	2e00      	cmp	r6, #0
 808493a:	f04f 0322 	mov.w	r3, #34	; 0x22
 808493e:	bf14      	ite	ne
 8084940:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8084944:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8084948:	f8c8 3000 	str.w	r3, [r8]
 808494c:	b92a      	cbnz	r2, 808495a <_strtol_r+0xe6>
 808494e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084952:	b106      	cbz	r6, 8084956 <_strtol_r+0xe2>
 8084954:	4240      	negs	r0, r0
 8084956:	b172      	cbz	r2, 8084976 <_strtol_r+0x102>
 8084958:	b107      	cbz	r7, 808495c <_strtol_r+0xe8>
 808495a:	1e69      	subs	r1, r5, #1
 808495c:	6011      	str	r1, [r2, #0]
 808495e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084962:	2430      	movs	r4, #48	; 0x30
 8084964:	2b00      	cmp	r3, #0
 8084966:	d1b1      	bne.n	80848cc <_strtol_r+0x58>
 8084968:	2308      	movs	r3, #8
 808496a:	e7af      	b.n	80848cc <_strtol_r+0x58>
 808496c:	230a      	movs	r3, #10
 808496e:	e7ad      	b.n	80848cc <_strtol_r+0x58>
 8084970:	2c30      	cmp	r4, #48	; 0x30
 8084972:	d0a3      	beq.n	80848bc <_strtol_r+0x48>
 8084974:	e7aa      	b.n	80848cc <_strtol_r+0x58>
 8084976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808497a:	bf00      	nop
 808497c:	20000408 	.word	0x20000408

08084980 <strtol>:
 8084980:	4613      	mov	r3, r2
 8084982:	460a      	mov	r2, r1
 8084984:	4601      	mov	r1, r0
 8084986:	4802      	ldr	r0, [pc, #8]	; (8084990 <strtol+0x10>)
 8084988:	6800      	ldr	r0, [r0, #0]
 808498a:	f7ff bf73 	b.w	8084874 <_strtol_r>
 808498e:	bf00      	nop
 8084990:	2000046c 	.word	0x2000046c

08084994 <dynalib_user>:
 8084994:	0808001d 0808005d 08080089 0808008d     ....]...........
 80849a4:	00000000                                ....

080849a8 <_ZTVN8particle13__SPISettingsE>:
	...
 80849b0:	08080221                                !...

080849b4 <_ZTV5Timer>:
	...
 80849bc:	080803a9 080803e9 080802af              ............

080849c8 <_ZTV4File>:
	...
 80849d0:	0808021d 080802a3 0808028b 08080285     ................
 80849e0:	080800b7 08080419 0808027f 08080279     ............y...
 80849f0:	61666564 20746c75 42534d00 42534c00     default .MSB.LSB
 8084a00:	50533c00 74655349 676e6974 65642073     .<SPISettings de
 8084a10:	6c756166 3c003e74 53495053 69747465     fault>.<SPISetti
 8084a20:	2073676e 6c257325 73252075 444f4d20     ngs %s%lu %s MOD
 8084a30:	3e642545 74616400 72745361 00676e69     E%d>.dataString.
 8084a40:	74696e49 696c6169 676e697a 20445320     Initializing SD 
 8084a50:	64726143 002e2e2e 74696e49 696c6169     Card....Initiali
 8084a60:	6974617a 203a6e6f 6c696146 49006465     zation: Failed.I
 8084a70:	6974696e 7a696c61 6f697461 43203a6e     nitialization: C
 8084a80:	6c706d6f 64657465 74616400 676f4c61     ompleted.dataLog
 8084a90:	7478742e 2c662500 252c6625 6f6e0066     .txt.%f,%f,%f.no
 8084aa0:	636f6c20 6f697461 227b006e 2274616c      location.{"lat"
 8084ab0:	2c64253a 6f6c2220 253a226e 22202c64     :%d, "lon":%d, "
 8084ac0:	61676964 61726576 22316567 2c64253a     digaverage1":%d,
 8084ad0:	6e612220 72657661 31656761 64253a22      "anaverage1":%d
 8084ae0:	6164007d 6f6c6174 78742e67 72570074     }.datalog.txt.Wr
 8084af0:	6e697469 6f742067 20445320 64726163     iting to SD card
 8084b00:	002e2e2e 656e6f44 69727720 676e6974     ....Done writing
 8084b10:	206f7420 61204453 6320646e 69736f6c      to SD and closi
 8084b20:	6620676e 2e656c69 45002e2e 524f5252     ng file....ERROR
 8084b30:	65706f20 676e696e 6c696620 6f742065      opening file to
 8084b40:	69727720 74206574 2e2e2e6f 74616400      write to....dat
 8084b50:	676f4c61 4300203a 656c6c6f 64657463     aLog: .Collected
 8084b60:	74614420 00203a61 4f525245 706f2052      Data: .ERROR op
 8084b70:	6e696e65 69662067 7420656c 6572206f     ening file to re
 8084b80:	2e2e6461 5047002e 00434d52 47475047     ad....GPRMC.GPGG
 8084b90:	004e0041 00454e4e 00454e45 00455345     A.N.NNE.ENE.ESE.
 8084ba0:	00455353 53530053 53570057 4e570057     SSE.S.SSW.WSW.WN
 8084bb0:	4e4e0057 00000057                       W.NNW...

08084bb8 <_ZTV8SPIClass>:
	...
 8084bc0:	08082b99 08082b9b                       .+...+..

08084bc8 <_ZL14clock_divisors>:
 8084bc8:	18100800 38302820 66006e6c 6f63006e     .... (08ln.fn.co
 8084bd8:	64006564 69617465 0a0d006c 31302500     de.detail....%01
 8084be8:	00207530 2500205d 202c0064 3a292800     0u .] .%d., .():
 8084bf8:	5b200020 646f6300 203d2065 00692500      . [.code = .%i.
 8084c08:	61746564 20736c69 6200203d 00647561     details = .baud.
 8084c18:	69726553 55006c61 65534253 6c616972     Serial.USBSerial
 8084c28:	79740031 70006570 6d617261 646d6300     1.type.param.cmd
 8084c38:	00646900 00646e68 6d727473 6c696600     .id.hnd.strm.fil
 8084c48:	766c0074 6461006c 6e614864 72656c64     t.lvl.addHandler
 8084c58:	6d657200 4865766f 6c646e61 65007265     .removeHandler.e
 8084c68:	486d756e 6c646e61 00737265 4e4f534a     numHandlers.JSON
 8084c78:	65727453 6f4c6d61 6e614867 72656c64     StreamLogHandler
 8084c88:	70706100 6e6f6e00 72740065 00656361     .app.none.trace.
 8084c98:	6f666e69 72617700 7265006e 00726f72     info.warn.error.
 8084ca8:	696e6170 6c610063 005a006c 33302b25     panic.all.Z.%+03
 8084cb8:	30253a64 25007532 6d252d59 5464252d     d:%02u.%Y-%m-%dT
 8084cc8:	253a4825 53253a4d 61007a25 69746373     %H:%M:%S%z.ascti
 8084cd8:	0000656d                                me..

08084cdc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8084ce4:	08083279 0808327f 08083295 0808328b     y2...2...2...2..
 8084cf4:	0808327b                                {2..

08084cf8 <_ZTV9IPAddress>:
	...
 8084d00:	0808378b 0808377d 0808377f              .7..}7...7..

08084d0c <_ZTV9USBSerial>:
	...
 8084d14:	080837f1 08083835 0808380f 08082f49     .7..58...8..I/..
 8084d24:	08083809 080837f3 080837fb 0808382f     .8...7...7../8..
 8084d34:	08083803 080837ed                       .8...7..

08084d3c <_ZTVN5spark13CellularClassE>:
	...
 8084d44:	0808396d                                m9..

08084d48 <_ZTV11USARTSerial>:
	...
 8084d50:	080839b5 080839d9 080839e5 08082f49     .9...9...9..I/..
 8084d60:	080839c1 080839cd 080839c7 080839d3     .9...9...9...9..
 8084d70:	080839b7 080839bb                       .9...9..

08084d78 <_ZTV7TwoWire>:
	...
 8084d80:	08083abb 08083b05 08083add 08083abd     .:...;...:...:..
 8084d90:	08083ae5 08083aed 08083af5 08083afd     .:...:...:...:..

08084da0 <_ctype_>:
 8084da0:	20202000 20202020 28282020 20282828     .         ((((( 
 8084db0:	20202020 20202020 20202020 20202020                     
 8084dc0:	10108820 10101010 10101010 10101010      ...............
 8084dd0:	04040410 04040404 10040404 10101010     ................
 8084de0:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8084df0:	01010101 01010101 01010101 10101010     ................
 8084e00:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8084e10:	02020202 02020202 02020202 10101010     ................
 8084e20:	00000020 00000000 00000000 00000000      ...............
	...

08084ea4 <__sf_fake_stdin>:
	...

08084ec4 <__sf_fake_stdout>:
	...

08084ee4 <__sf_fake_stderr>:
	...

08084f04 <link_const_variable_data_end>:
 8084f04:	080809bd 	.word	0x080809bd
 8084f08:	08080b1d 	.word	0x08080b1d
 8084f0c:	08080b21 	.word	0x08080b21
 8084f10:	08081149 	.word	0x08081149
 8084f14:	0808114d 	.word	0x0808114d
 8084f18:	08081151 	.word	0x08081151
 8084f1c:	08081155 	.word	0x08081155
 8084f20:	0808181d 	.word	0x0808181d
 8084f24:	08081841 	.word	0x08081841
 8084f28:	08081845 	.word	0x08081845
 8084f2c:	08081b69 	.word	0x08081b69
 8084f30:	08081b6d 	.word	0x08081b6d
 8084f34:	08081b71 	.word	0x08081b71
 8084f38:	080820ab 	.word	0x080820ab
 8084f3c:	080820af 	.word	0x080820af
 8084f40:	080820b3 	.word	0x080820b3
 8084f44:	08082159 	.word	0x08082159
 8084f48:	0808272d 	.word	0x0808272d
 8084f4c:	08082d25 	.word	0x08082d25
 8084f50:	080830b5 	.word	0x080830b5
 8084f54:	080830c5 	.word	0x080830c5
 8084f58:	0808310d 	.word	0x0808310d
 8084f5c:	08083979 	.word	0x08083979
 8084f60:	08083c2d 	.word	0x08083c2d
 8084f64:	08083c89 	.word	0x08083c89
 8084f68:	08083d09 	.word	0x08083d09
 8084f6c:	08083d8d 	.word	0x08083d8d
 8084f70:	08083e51 	.word	0x08083e51
 8084f74:	08083f15 	.word	0x08083f15

08084f78 <link_constructors_end>:
	...
